<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>音标</title>
    <link href="/2022/09/19/DJ%E9%9F%B3%E6%A0%87/"/>
    <url>/2022/09/19/DJ%E9%9F%B3%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="DJ音标KK音标"><a href="#DJ音标KK音标" class="headerlink" title="DJ音标KK音标"></a>DJ音标<code>KK音标</code></h1><h2 id="元音"><a href="#元音" class="headerlink" title="元音"></a>元音</h2><h3 id="高元音"><a href="#高元音" class="headerlink" title="高元音"></a>高元音</h3><h4 id="x2F-iː-x2F-i-yi"><a href="#x2F-iː-x2F-i-yi" class="headerlink" title="&#x2F;iː&#x2F;/i/(yi)"></a>&#x2F;<font color='red'>iː</font>&#x2F;<code>/i/</code>(yi)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/i%CB%90.mp3"></audio></p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/i%CB%90.mp3" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919221105743.png" alt="image-20220919221105743" style="zoom: 25%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/i%CB%90.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mpeg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><h5 id="存在短版本-x2F-i-x2F-happy-x2F-i-x2F-短读-弱读"><a href="#存在短版本-x2F-i-x2F-happy-x2F-i-x2F-短读-弱读" class="headerlink" title="存在短版本&#x2F;i&#x2F; happy &#x2F;i&#x2F;短读(弱读)"></a>存在短版本&#x2F;i&#x2F; happy &#x2F;i&#x2F;短读(弱读)</h5></blockquote><audio controls>  <source src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/i%CB%90.mp3" type="audio/mpeg"></audio><h4 id="x2F-ɪ-x2F"><a href="#x2F-ɪ-x2F" class="headerlink" title="&#x2F;ɪ&#x2F;"></a>&#x2F;<font color='red'>ɪ</font>&#x2F;</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C9%AA.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919221023412.png" alt="image-20220919221023412" style="zoom: 25%;" /><blockquote><h5 id="类似”一二一-”"><a href="#类似”一二一-”" class="headerlink" title="类似”一二一!”"></a>类似”一二一!”</h5></blockquote><h4 id="x2F-uː-x2F-u-w-ou"><a href="#x2F-uː-x2F-u-w-ou" class="headerlink" title="&#x2F;uː&#x2F;/u/(w-ou)"></a>&#x2F;<font color='red'>uː</font>&#x2F;<code>/u/</code>(w-ou)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/u%CB%90.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919221715342.png" alt="image-20220919221715342" style="zoom:25%;" /><blockquote><h5 id="存在短读版本-influence-x2F-‘ɪnfluəns-x2F"><a href="#存在短读版本-influence-x2F-‘ɪnfluəns-x2F" class="headerlink" title="存在短读版本 influence &#x2F;‘ɪnfluəns&#x2F;"></a>存在短读版本 influence &#x2F;‘ɪnfluəns&#x2F;</h5></blockquote><h4 id="x2F-ʊ-x2F"><a href="#x2F-ʊ-x2F" class="headerlink" title="&#x2F;ʊ&#x2F;"></a>&#x2F;<font color='red'>ʊ</font>&#x2F;</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%CA%8A.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919222207055.png" alt="image-20220919222207055" style="zoom:25%;" /><blockquote><h5 id="类似短读-x2F-uː-x2F"><a href="#类似短读-x2F-uː-x2F" class="headerlink" title="类似短读&#x2F;uː&#x2F;"></a>类似短读&#x2F;uː&#x2F;</h5></blockquote><h3 id="中元音"><a href="#中元音" class="headerlink" title="中元音"></a>中元音</h3><h4 id="x2F-e-x2F-e-ai"><a href="#x2F-e-x2F-e-ai" class="headerlink" title="&#x2F;e&#x2F;/ɛ/(ai)"></a>&#x2F;<font color='red'>e</font>&#x2F;<code>/ɛ/</code>(ai)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/e.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919222845930.png" alt="image-20220919222845930" style="zoom:25%;" /><h4 id="x2F-ɜː-x2F-ɜr-e"><a href="#x2F-ɜː-x2F-ɜr-e" class="headerlink" title="&#x2F;ɜː&#x2F;/ɜr/(e)"></a>&#x2F;<font color='red'>ɜː</font>&#x2F;<code>/ɜr/</code>(e)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C9%9C%CB%90.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919223057656.png" alt="image-20220919223057656" style="zoom:25%;" /><blockquote><h5 id="美音中会变成r化元音"><a href="#美音中会变成r化元音" class="headerlink" title="美音中会变成r化元音"></a>美音中会变成r化元音</h5></blockquote><h4 id="x2F-ə-x2F-e"><a href="#x2F-ə-x2F-e" class="headerlink" title="&#x2F;ə&#x2F;(e)"></a>&#x2F;<font color='red'>ə</font>&#x2F;(e)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C9%99.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919224020257.png" alt="image-20220919224020257" style="zoom: 25%;" /><blockquote><h5 id="短读-x2F-ɜː-x2F-存在r化音"><a href="#短读-x2F-ɜː-x2F-存在r化音" class="headerlink" title="短读&#x2F;ɜː&#x2F;,存在r化音"></a>短读&#x2F;ɜː&#x2F;,存在r化音</h5></blockquote><h4 id="x2F-v-x2F-a"><a href="#x2F-v-x2F-a" class="headerlink" title="&#x2F;ʌ&#x2F;(a)"></a>&#x2F;<font color='red'>ʌ</font>&#x2F;(a)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%CA%8C.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919224135559.png" alt="image-20220919224135559" style="zoom:25%;" /><h4 id="x2F-oː-x2F-o-ao"><a href="#x2F-oː-x2F-o-ao" class="headerlink" title="&#x2F;ɔː&#x2F;/ɔ/ (ao)"></a>&#x2F;<font color='red'>ɔː</font>&#x2F;<code>/ɔ/</code> (ao)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C9%94%CB%90.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919224326885.png" alt="image-20220919224326885" style="zoom:25%;" /><blockquote><h5 id="在美音中会发-x2F-ɑː-x2F-cot-caught合并"><a href="#在美音中会发-x2F-ɑː-x2F-cot-caught合并" class="headerlink" title="在美音中会发&#x2F;ɑː&#x2F;(cot-caught合并)"></a>在美音中会发&#x2F;ɑː&#x2F;(cot-caught合并)</h5></blockquote><h3 id="低元音"><a href="#低元音" class="headerlink" title="低元音"></a>低元音</h3><h4 id="x2F-ae-x2F-a-ai"><a href="#x2F-ae-x2F-a-ai" class="headerlink" title="&#x2F;æ&#x2F; (a-ai)"></a>&#x2F;<font color='red'>æ</font>&#x2F; (a-ai)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C3%A6.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919225226814.png" alt="image-20220919225226814" style="zoom:25%;" /><blockquote><h6 id="发-x2F-ɑ-x2F-到-x2F-e-x2F-之间的音-近代读音向-x2F-ɑ-x2F-迁移-美音近似-x2F-e-x2F"><a href="#发-x2F-ɑ-x2F-到-x2F-e-x2F-之间的音-近代读音向-x2F-ɑ-x2F-迁移-美音近似-x2F-e-x2F" class="headerlink" title="发&#x2F;ɑ&#x2F;到&#x2F;e&#x2F;之间的音,近代读音向&#x2F;ɑ&#x2F;迁移 美音近似&#x2F;e&#x2F;"></a>发&#x2F;ɑ&#x2F;到&#x2F;e&#x2F;之间的音,近代读音向&#x2F;ɑ&#x2F;迁移 美音近似&#x2F;e&#x2F;</h6></blockquote><h4 id="x2F-ɑː-x2F-ɑ-a"><a href="#x2F-ɑː-x2F-ɑ-a" class="headerlink" title="&#x2F;ɑː&#x2F;/ɑ/ (a)"></a>&#x2F;<font color='red'>ɑː</font>&#x2F;<code>/ɑ/</code> (a)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/a%CB%90.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919225618208.png" alt="image-20220919225618208" style="zoom:25%;" /><blockquote><h5 id="美音会有r化音"><a href="#美音会有r化音" class="headerlink" title="美音会有r化音"></a>美音会有r化音</h5></blockquote><h4 id="x2F-ɒ-x2F-ao"><a href="#x2F-ɒ-x2F-ao" class="headerlink" title="&#x2F;ɒ&#x2F;(ao)"></a>&#x2F;<font color='red'>ɒ</font>&#x2F;(ao)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C9%92.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919230211108.png" alt="image-20220919230211108" style="zoom:25%;" /><blockquote><h5 id="ao短读-在美音中读-x2F-ɑ-x2F-所以kk音标为-x2F-a-x2F"><a href="#ao短读-在美音中读-x2F-ɑ-x2F-所以kk音标为-x2F-a-x2F" class="headerlink" title="ao短读,在美音中读&#x2F;ɑ:&#x2F; 所以kk音标为&#x2F;a&#x2F;"></a>ao短读,在美音中读&#x2F;ɑ:&#x2F; 所以kk音标为&#x2F;a&#x2F;</h5></blockquote><h3 id="双元音"><a href="#双元音" class="headerlink" title="双元音"></a>双元音</h3><h4 id="x2F-eɪ-x2F-e-A"><a href="#x2F-eɪ-x2F-e-A" class="headerlink" title="&#x2F;eɪ&#x2F;/e/(A)"></a>&#x2F;<font color='red'>eɪ</font>&#x2F;<code>/e/</code>(A)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/e%C9%AA.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919231158935.png" alt="image-20220919231158935" style="zoom:30%;" /><h4 id="x2F-aɪ-x2F-a-i"><a href="#x2F-aɪ-x2F-a-i" class="headerlink" title="&#x2F;aɪ&#x2F;(a-i)"></a>&#x2F;<font color='red'>aɪ</font>&#x2F;(a-i)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/a%C9%AA.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919231513391.png" alt="image-20220919231513391" style="zoom:25%;" /><h4 id="x2F-oɪ-x2F-ao-i"><a href="#x2F-oɪ-x2F-ao-i" class="headerlink" title="&#x2F;ɔɪ&#x2F; (ao-i)"></a>&#x2F;<font color='red'>ɔɪ</font>&#x2F; (ao-i)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C9%94%C9%AA.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919231145324.png" alt="image-20220919231145324" style="zoom:25%;" /><h4 id="x2F-aʊ-x2F-a-o"><a href="#x2F-aʊ-x2F-a-o" class="headerlink" title="&#x2F;aʊ&#x2F; (a-o)"></a>&#x2F;<font color='red'>aʊ</font>&#x2F; (a-o)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/a%CA%8A.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919231642099.png" alt="image-20220919231642099" style="zoom:25%;" /><h4 id="x2F-əʊ-x2F-o-e-o"><a href="#x2F-əʊ-x2F-o-e-o" class="headerlink" title="&#x2F;əʊ&#x2F;/o/(e-o)"></a>&#x2F;<font color='red'>əʊ</font>&#x2F;<code>/o/</code>(e-o)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C9%99%CA%8A.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919232112806.png" alt="image-20220919232112806" style="zoom:25%;" /><blockquote><h5 id="标注美音时为-x2F-oʊ-x2F-发ou"><a href="#标注美音时为-x2F-oʊ-x2F-发ou" class="headerlink" title="标注美音时为&#x2F;oʊ&#x2F;发ou"></a>标注美音时为&#x2F;oʊ&#x2F;发ou</h5></blockquote><h4 id="x2F-ʊə-x2F-ur-o-e"><a href="#x2F-ʊə-x2F-ur-o-e" class="headerlink" title="&#x2F;ʊə&#x2F;/ur/(o-e)"></a>&#x2F;<font color='red'>ʊə</font>&#x2F;<code>/ur/</code>(o-e)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%CA%8A%C9%99.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919232400288.png" alt="image-20220919232400288" style="zoom:25%;" /><blockquote><h5 id="美音会发r化音-x2F-ur-x2F-英音中会有第二种读音-x2F-oː-x2F"><a href="#美音会发r化音-x2F-ur-x2F-英音中会有第二种读音-x2F-oː-x2F" class="headerlink" title="美音会发r化音 &#x2F;ur&#x2F; ,英音中会有第二种读音&#x2F;ɔː&#x2F;"></a>美音会发r化音 &#x2F;ur&#x2F; ,英音中会有第二种读音&#x2F;ɔː&#x2F;</h5></blockquote><h4 id="x2F-eə-x2F-er-ai-e"><a href="#x2F-eə-x2F-er-ai-e" class="headerlink" title="&#x2F;eə&#x2F;/ɛr/(ai-e)"></a>&#x2F;<font color='red'>eə</font>&#x2F;<code>/ɛr/</code>(ai-e)</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/e%C9%99.mp3"></audio></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220919233203378.png" alt="image-20220919233203378" style="zoom:25%;" /><blockquote><h5 id="美音r化-DJ给美音注音为-x2F-er-x2F-或-x2F-ear-x2F"><a href="#美音r化-DJ给美音注音为-x2F-er-x2F-或-x2F-ear-x2F" class="headerlink" title="美音r化,DJ给美音注音为&#x2F;er&#x2F;或&#x2F;ear&#x2F;"></a>美音r化,DJ给美音注音为&#x2F;er&#x2F;或&#x2F;ear&#x2F;</h5></blockquote><h4 id="x2F-ɪə-x2F"><a href="#x2F-ɪə-x2F" class="headerlink" title="&#x2F;ɪə&#x2F;"></a>&#x2F;<font color='red'>ɪə</font>&#x2F;</h4><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C9%AA%C9%99.mp3"></audio></p><h2 id="辅音"><a href="#辅音" class="headerlink" title="辅音"></a>辅音</h2><h3 id="塞音"><a href="#塞音" class="headerlink" title="塞音"></a>塞音</h3><ul><li><h4 id="x2F-p-x2F"><a href="#x2F-p-x2F" class="headerlink" title="&#x2F;p&#x2F;"></a>&#x2F;p&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/p.mp3"></audio></p><ul><li><h4 id="x2F-b-x2F"><a href="#x2F-b-x2F" class="headerlink" title="&#x2F;b&#x2F;"></a>&#x2F;b&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/b.mp3"></audio></p><ul><li><h4 id="x2F-t-x2F"><a href="#x2F-t-x2F" class="headerlink" title="&#x2F;t&#x2F;"></a>&#x2F;t&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/t.mp3"></audio></p><ul><li><h4 id="x2F-d-x2F"><a href="#x2F-d-x2F" class="headerlink" title="&#x2F;d&#x2F;"></a>&#x2F;d&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/d.mp3"></audio></p><ul><li><h4 id="x2F-k-x2F"><a href="#x2F-k-x2F" class="headerlink" title="&#x2F;k&#x2F;"></a>&#x2F;k&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/k.mp3"></audio></p><ul><li><h4 id="x2F-g-x2F"><a href="#x2F-g-x2F" class="headerlink" title="&#x2F;g&#x2F;"></a>&#x2F;g&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/g.mp3"></audio></p><h3 id="鼻音"><a href="#鼻音" class="headerlink" title="鼻音"></a>鼻音</h3><ul><li><h4 id="x2F-m-x2F"><a href="#x2F-m-x2F" class="headerlink" title="&#x2F;m&#x2F;"></a>&#x2F;m&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/m.mp3"></audio></p><ul><li><h4 id="x2F-n-x2F"><a href="#x2F-n-x2F" class="headerlink" title="&#x2F;n&#x2F;"></a>&#x2F;n&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/n.mp3"></audio></p><ul><li><h4 id="x2F-ŋ-x2F"><a href="#x2F-ŋ-x2F" class="headerlink" title="&#x2F;ŋ&#x2F;"></a>&#x2F;ŋ&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C5%8B.mp3"></audio></p><h3 id="擦音"><a href="#擦音" class="headerlink" title="擦音"></a>擦音</h3><ul><li><h4 id="x2F-f-x2F"><a href="#x2F-f-x2F" class="headerlink" title="&#x2F;f&#x2F;"></a>&#x2F;f&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/f.mp3"></audio></p><ul><li><h4 id="x2F-v-x2F"><a href="#x2F-v-x2F" class="headerlink" title="&#x2F;v&#x2F;"></a>&#x2F;v&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/v.mp3"></audio></p><ul><li><h4 id="x2F-s-x2F"><a href="#x2F-s-x2F" class="headerlink" title="&#x2F;s&#x2F;"></a>&#x2F;s&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/s.mp3"></audio></p><ul><li><h4 id="x2F-z-x2F"><a href="#x2F-z-x2F" class="headerlink" title="&#x2F;z&#x2F;"></a>&#x2F;z&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/z.mp3"></audio></p><ul><li><h4 id="x2F-θ-x2F"><a href="#x2F-θ-x2F" class="headerlink" title="&#x2F;θ&#x2F;"></a>&#x2F;θ&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%CE%B8.mp3"></audio></p><ul><li><h4 id="x2F-ð-x2F"><a href="#x2F-ð-x2F" class="headerlink" title="&#x2F;ð&#x2F;"></a>&#x2F;ð&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%C3%B0.mp3"></audio></p><ul><li><h4 id="x2F-ʃ-x2F"><a href="#x2F-ʃ-x2F" class="headerlink" title="&#x2F;ʃ&#x2F;"></a>&#x2F;ʃ&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%CA%83.mp3"></audio></p><ul><li><h4 id="x2F-ʒ-x2F"><a href="#x2F-ʒ-x2F" class="headerlink" title="&#x2F;ʒ&#x2F;"></a>&#x2F;ʒ&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/%CA%92.mp3"></audio></p><ul><li><h4 id="x2F-h-x2F"><a href="#x2F-h-x2F" class="headerlink" title="&#x2F;h&#x2F;"></a>&#x2F;h&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/h.mp3"></audio></p><h3 id="塞擦音"><a href="#塞擦音" class="headerlink" title="塞擦音"></a>塞擦音</h3><ul><li><h4 id="x2F-tʃ-x2F"><a href="#x2F-tʃ-x2F" class="headerlink" title="&#x2F;tʃ&#x2F;"></a>&#x2F;tʃ&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/t%CA%83.mp3"></audio></p><ul><li><h4 id="x2F-dʒ-x2F"><a href="#x2F-dʒ-x2F" class="headerlink" title="&#x2F;dʒ&#x2F;"></a>&#x2F;dʒ&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/d%CA%92.mp3"></audio></p><h3 id="近音"><a href="#近音" class="headerlink" title="近音"></a>近音</h3><ul><li><h4 id="x2F-w-x2F"><a href="#x2F-w-x2F" class="headerlink" title="&#x2F;w&#x2F;"></a>&#x2F;w&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/w.mp3"></audio></p><ul><li><h4 id="x2F-r-x2F"><a href="#x2F-r-x2F" class="headerlink" title="&#x2F;r&#x2F;"></a>&#x2F;r&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/r.mp3"></audio></p><ul><li><h4 id="x2F-j-x2F"><a href="#x2F-j-x2F" class="headerlink" title="&#x2F;j&#x2F;"></a>&#x2F;j&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/j.mp3"></audio></p><h3 id="边音"><a href="#边音" class="headerlink" title="边音"></a>边音</h3><ul><li><h4 id="x2F-l-x2F"><a href="#x2F-l-x2F" class="headerlink" title="&#x2F;l&#x2F;"></a>&#x2F;l&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/l.mp3"></audio></p><h3 id="辅音连缀"><a href="#辅音连缀" class="headerlink" title="辅音连缀"></a>辅音连缀</h3><ul><li><h4 id="x2F-ts-x2F"><a href="#x2F-ts-x2F" class="headerlink" title="&#x2F;ts&#x2F;"></a>&#x2F;ts&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/ts.mp3"></audio></p><ul><li><h4 id="x2F-dz-x2F"><a href="#x2F-dz-x2F" class="headerlink" title="&#x2F;dz&#x2F;"></a>&#x2F;dz&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/dz.mp3"></audio></p><ul><li><h4 id="x2F-tr-x2F"><a href="#x2F-tr-x2F" class="headerlink" title="&#x2F;tr&#x2F;"></a>&#x2F;tr&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/tr.mp3"></audio></p><ul><li><h4 id="x2F-dr-x2F"><a href="#x2F-dr-x2F" class="headerlink" title="&#x2F;dr&#x2F;"></a>&#x2F;dr&#x2F;</h4></li></ul><p><audio src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E6%A0%87/dr.mp3"></audio></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DJ音标</tag>
      
      <tag>音标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java WEB</title>
    <link href="/2022/08/10/JavaWeb/"/>
    <url>/2022/08/10/JavaWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h4><ol><li><p>添加环境变量</p><ul><li>新建MYSQL_HOME</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220727095502395.png" alt="image-20220727095502395" style="zoom: 67%;" /><ul><li>添加进Path</li></ul></li></ol><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220727215432250.png" alt="image-20220727215432250" style="zoom:67%;" /><ol start="2"><li>安装目录下新建my.ini配置文件,并新建data文件夹</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8 <br><br><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment">#设置3306端口</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span> <br><span class="hljs-comment"># 设置mysql的安装目录</span><br><span class="hljs-attr">basedir</span>=D:\<span class="hljs-number">00</span>-Software\MySQL\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">24</span>-winx64<br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br><span class="hljs-attr">datadir</span>=D:\<span class="hljs-number">00</span>-Software\MySQL\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">24</span>-winx64\data<br><span class="hljs-comment"># 允许最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br></code></pre></td></tr></table></figure><ol start="3"><li>管理员运行cmd 初始化MySQL</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqld --initialize-insecure<br></code></pre></td></tr></table></figure><ol start="4"><li>注册MySQL</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqld -install<br></code></pre></td></tr></table></figure><ol start="5"><li>启动MySQL</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">启动<br>net start mysql<br>停止<br>net stop mysql<br></code></pre></td></tr></table></figure><h4 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#设置用户名root 密码设为1234</span><br>mysqladmin -u root password 1234<br><span class="hljs-comment">#登录</span><br>mysql -uroot -p1234<br><span class="hljs-comment">#退出</span><br>quit<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">登录参数<br>mysql -uroot -p1234 -h 127.0.0.1 -P 3306<br>mysql -u用户名 -p密码 -h要连接的mysql服务器ip地址(默认127.0.0.1) -P端口号(默认3306)<br></code></pre></td></tr></table></figure><h4 id="卸载MySQL"><a href="#卸载MySQL" class="headerlink" title="卸载MySQL"></a>卸载MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">先停止<br>net stop mysql <br>卸载<br>mysqld -remove mysql <br>删除MySQL目录以及环境变量<br>卸载完成!<br></code></pre></td></tr></table></figure><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h3><ol><li>SQL语句可以单行或多行书写，以<font color='red'>分号</font>结尾。</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</li><li>注释</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">单行注释：-- (空格)注释内容 或 #注释内容(MySQL特有)<br>多行注释：/*注释*/<br></code></pre></td></tr></table></figure><p>DDL:操作数据库，表等<br>DML:对表中的数据进行增删改<br>DQL:对表中的数据进行查询<br>DCL:对数据库进行权限控制</p><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h5 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h5><ul><li>查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><ul><li>新建</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">新建db1数据库<br><span class="hljs-keyword">create</span> database db1;<br>如果没有db1就创建<br><span class="hljs-keyword">create</span> database if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> db1;<br></code></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">删除数据库<br><span class="hljs-keyword">drop</span> database db2;<br>如果有db2就删除<br><span class="hljs-keyword">drop</span> database if <span class="hljs-keyword">exists</span> db2;<br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">使用db1数据库(打开)<br>use db1;<br>查看当前使用的数据库<br><span class="hljs-keyword">select</span> database();<br></code></pre></td></tr></table></figure><h5 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h5><ul><li>查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">查询当前数据库下所有的表<br><span class="hljs-keyword">show</span> tables;<br>查询表结构<br><span class="hljs-keyword">desc</span> 表名称;<br></code></pre></td></tr></table></figure><ul><li>创建</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名一 数据类型一,<br>    字段名二 数据类型二,<br>    ...<br>    字段名n  数据类型n<br>);<br></code></pre></td></tr></table></figure><p>数据类型</p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220815201326648.png" alt="image-20220815201326648" style="zoom: 67%;" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220815202656041.png" alt="image-20220815202656041" style="zoom: 50%;" /><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>    birthday <span class="hljs-type">date</span>,<br>    score <span class="hljs-keyword">double</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>),<br>    email <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>),<br>    tel <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>),<br>    status tinyint<br>);<br></code></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">删除表<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> 表名;<br>删除表时判断表是否存在<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> 表名;<br></code></pre></td></tr></table></figure><ul><li>修改表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">修改表名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 rename <span class="hljs-keyword">to</span> 新表名;<br>添加一列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> 列名 数据类型;<br>修改数据类型<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 modify 列名 新数据类型;<br>修改列名和数据类型<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 change 列名 新列名 新数据类型;<br>删除列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> 列名;<br></code></pre></td></tr></table></figure><h3 id="DML-增删改数据"><a href="#DML-增删改数据" class="headerlink" title="DML (增删改数据)"></a>DML (增删改数据)</h3><ul><li>添加数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">给指定列添加数据<br>inster <span class="hljs-keyword">into</span> 表名(列名<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span>,...) <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br>给全部列添加数据<br>inster <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br>批量添加数据<br>inster <span class="hljs-keyword">into</span> 表名(列名<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span>,...) <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...)...;<br>inster <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...)...;<br></code></pre></td></tr></table></figure><ul><li>修改</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">修改表数据<br><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 列名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">1</span>,列名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">2</span>,...<span class="hljs-keyword">where</span> 条件;<br><span class="hljs-comment">-- 把name为张三的修改 name为&quot;李四&quot;</span><br><span class="hljs-keyword">update</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> &quot;李四&quot;<span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> &quot;张三&quot;;<br></code></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件];<br><span class="hljs-comment">-- 删除name为张三的</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> &quot;张三&quot;;<br></code></pre></td></tr></table></figure><h3 id="DQL-查数据"><a href="#DQL-查数据" class="headerlink" title="DQL(查数据)"></a>DQL(查数据)</h3><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名列表 <span class="hljs-keyword">where</span> 条件列表 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段 <span class="hljs-keyword">having</span> 分组后条件 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序字段 limit 分页限定<br></code></pre></td></tr></table></figure><ul><li>基础查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询多个字段</span><br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名;<span class="hljs-comment">-- 查询所有数据</span><br><span class="hljs-comment">-- 去除重复记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 字段列表 <span class="hljs-keyword">from</span> 表名;<br><span class="hljs-comment">-- 起别名</span><br><span class="hljs-keyword">as</span>: <span class="hljs-comment">-- as 也可以省略</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 基础查询</span><br><span class="hljs-comment">-- 查询 姓名 公司 两列</span><br><span class="hljs-keyword">select</span> 姓名,公司 <span class="hljs-keyword">FROM</span> student;<br><span class="hljs-comment">-- 查询所有列的数据 列名使用 * 代替</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><span class="hljs-comment">-- 查询 班组 列</span><br><span class="hljs-keyword">SELECT</span> 班组 <span class="hljs-keyword">FROM</span> student;<br><span class="hljs-comment">-- 去除重复记录(班组相同的只保留一个)</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 班组 <span class="hljs-keyword">FROM</span> student;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 班组,... <span class="hljs-keyword">FROM</span> student;<br><span class="hljs-comment">-- 查询 姓名 公司 性别</span><br><span class="hljs-keyword">select</span> 姓名,公司 <span class="hljs-keyword">as</span> 所在公司,性别 <span class="hljs-keyword">from</span> student; <span class="hljs-comment">-- 公司起别名 为 所在公司</span><br></code></pre></td></tr></table></figure><ul><li>条件查询(where)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件列表;<br></code></pre></td></tr></table></figure><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220817142149024.png" alt="image-20220817142149024" style="zoom:50%;" /><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 条件查询</span><br><span class="hljs-comment">-- 查询性别为 女 </span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> 性别 <span class="hljs-operator">=</span> &quot;女&quot;;<br><span class="hljs-comment">-- 查询电话在两数值之间</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> 电话 <span class="hljs-operator">&gt;=</span> <span class="hljs-number">13165000360</span> <span class="hljs-operator">&amp;&amp;</span> 电话 <span class="hljs-operator">&lt;=</span> <span class="hljs-number">23165000360</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> 电话 <span class="hljs-operator">&gt;=</span> <span class="hljs-number">13165000360</span> <span class="hljs-keyword">AND</span> 电话 <span class="hljs-operator">&lt;=</span> <span class="hljs-number">23165000360</span>;<span class="hljs-comment">-- 建议使用 AND</span><br><span class="hljs-comment">-- 查询 数值两数值之间的 可以用 BETWEEN</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">where</span> 电话 <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">13165000360</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">23165000360</span>;<br><span class="hljs-comment">-- 查询日期条件 在两个日期之间</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">where</span> 日期 <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;1999-09-01&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;2399-11-01&#x27;</span>;<br><span class="hljs-comment">-- 查询电话等于 13966000372 的</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">where</span> 日期 <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;1999-09-01&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;2399-11-01&#x27;</span> <span class="hljs-keyword">and</span> 电话 <span class="hljs-operator">=</span> <span class="hljs-number">13966000372</span>;<br><span class="hljs-comment">-- 查询民族不等于 汉 </span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> 民族 <span class="hljs-operator">!=</span> &quot;汉&quot; ;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> 民族 <span class="hljs-operator">&lt;&gt;</span>&quot;汉&quot; ;<br><span class="hljs-comment">-- 查询 民族 = 哈尼 或者 工种 = 监理员 或者 电话 = 13966000372</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">where</span> 民族 <span class="hljs-operator">=</span> &quot;哈尼&quot; <span class="hljs-operator">||</span> 工种 <span class="hljs-operator">=</span> &quot;监理员&quot; <span class="hljs-operator">||</span> 电话 <span class="hljs-operator">=</span> <span class="hljs-number">13966000372</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">where</span> 民族 <span class="hljs-operator">=</span> &quot;哈尼&quot; <span class="hljs-keyword">OR</span> 工种 <span class="hljs-operator">=</span> &quot;监理员&quot; <span class="hljs-keyword">OR</span> 电话 <span class="hljs-operator">=</span> <span class="hljs-number">13966000372</span>;<br><span class="hljs-comment">-- 查询民族 = 哈尼或者侗 </span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">where</span> 民族 <span class="hljs-keyword">in</span> (&quot;哈尼&quot;,&quot;侗&quot;);<br><span class="hljs-comment">-- 查询工种为 NULL (NULL 比较不能使用 =/!=,需要使用 is/is NOT) </span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">where</span> 工种 <span class="hljs-keyword">is</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> 工种 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 模糊查询(_ 匹配一个 % 匹配多个)</span><br><span class="hljs-comment">-- 查询 姓王的</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">where</span> 姓名 <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;王%&#x27;</span><br><span class="hljs-comment">-- 查询姓名第二个字是 亚 </span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">where</span> 姓名 <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_亚%&#x27;</span><br><span class="hljs-comment">-- 查询姓名包含 新</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">where</span> 姓名 <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%新%&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>排序查询(order by)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序字段名<span class="hljs-number">1</span> [排序方式<span class="hljs-number">1</span>],排序字段<span class="hljs-number">2</span>[排序方式<span class="hljs-number">2</span>]...;<br></code></pre></td></tr></table></figure><blockquote><p>排序方式</p><ul><li>ASC : 升序排序(默认值)</li><li>DESC : 降序排序</li></ul></blockquote><p>注意 : 如果有多个排序条件,当前面的条件值一样时,才会根据第二条件进行排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 排序查询</span><br><span class="hljs-comment">-- 按照电话升序 (默认ASC)</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 电话;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 电话 <span class="hljs-keyword">ASC</span>;<br><span class="hljs-comment">-- 按照电话降序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 电话 <span class="hljs-keyword">DESC</span>;<br><span class="hljs-comment">-- 按照工种降序 如果一样 按照电话升序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 工种 <span class="hljs-keyword">DESC</span>,电话 <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><ul><li>聚合函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">count 统计数量<br>max 最大值<br>min 最小值<br>sum 求和<br>avg 平均值<br><span class="hljs-keyword">select</span> 聚合函数名(列名) <span class="hljs-keyword">from</span> 表;<br></code></pre></td></tr></table></figure><blockquote><p>null不参与所有聚合函数运算</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 统计一共多少人(无法统计Null)</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(姓名) <span class="hljs-keyword">from</span> student; <span class="hljs-comment">-- 316 根据姓名统计</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(日期) <span class="hljs-keyword">from</span> student; <span class="hljs-comment">-- 2 根据日期统计</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> student; <span class="hljs-comment">-- 316 只要有一个不为空就能统计</span><br><span class="hljs-comment">-- 查询 电话最大值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(电话) <span class="hljs-keyword">from</span> student; <span class="hljs-comment">-- 19954025301</span><br><span class="hljs-comment">-- 查询 电话最小值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(电话) <span class="hljs-keyword">from</span> student; <span class="hljs-comment">-- 13023175362</span><br><span class="hljs-comment">-- 查询 电话总值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">sum</span>(电话) <span class="hljs-keyword">from</span> student; <span class="hljs-comment">-- 5030362578826</span><br><span class="hljs-comment">-- 查询电话平均值</span><br></code></pre></td></tr></table></figure><ul><li>分组查询(group by)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 分组前条件限定 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段名 <span class="hljs-keyword">having</span> 分组后条件过滤;<br></code></pre></td></tr></table></figure><p>注意 : 分组之后,查询的字段为聚合函数和分分组字段,查询其他字段无任何意义;</p><blockquote><p>where 和having 区别</p><ul><li>执行时机不一样:where 是分组之前进行限定,不满足where条件,则不参与分组,而having是分组之后对结果进行过滤;</li><li>可判断的条件不一样: where 不能对聚合函数进行判断吗,having可以.</li></ul><p>执行顺序: where &gt; 聚合函数 &gt; having</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 分组</span><br><span class="hljs-comment">-- 查询男女各自的电话平均值[11]</span><br><span class="hljs-keyword">SELECT</span> 性别,<span class="hljs-built_in">avg</span>(电话) <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 性别;<br><span class="hljs-comment">-- 查询男女各自的电话平均值以及各自人数</span><br><span class="hljs-keyword">SELECT</span> 性别,<span class="hljs-built_in">avg</span>(电话),<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> student <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 性别;<br><span class="hljs-comment">-- 查询男女各自的电话平均值以及各自人数 电话小于15120316081的不参与</span><br><span class="hljs-keyword">SELECT</span> 性别,<span class="hljs-built_in">avg</span>(电话),<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> 电话 <span class="hljs-operator">&gt;</span> <span class="hljs-number">15120316081</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 性别;<br><span class="hljs-comment">-- 查询男女各自的电话平均值以及各自人数 电话小于15120316081的不参与 分组之后人数大于10个</span><br><span class="hljs-keyword">SELECT</span> 性别,<span class="hljs-built_in">avg</span>(电话),<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> 电话 <span class="hljs-operator">&gt;</span> <span class="hljs-number">15120316081</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 性别 <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><ul><li>分页查询(limit)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 limit 起始索引,查询条目数;<br></code></pre></td></tr></table></figure><blockquote><p>起始索引:从0开始</p><p>计算公式:起始索引&#x3D;(当前页码-1)*每页显示的条数</p><p>tips :</p><ul><li>分页查询limit 是MySQL数据库的方言</li><li>Oracle 分页查询使用rownumber</li><li>SQL Server分页查询使用top</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 分页查询</span><br><span class="hljs-comment">-- 从0开始,查询3条</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">3</span>;<br><span class="hljs-comment">-- 每页显示3条,查询第一页</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">3</span>;<br><span class="hljs-comment">-- 每页显示3条,查询第二页</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student LIMIT <span class="hljs-number">3</span>,<span class="hljs-number">3</span>;<br><span class="hljs-comment">-- 每页显示3条,查询第三页</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student LIMIT <span class="hljs-number">6</span>,<span class="hljs-number">3</span>;<br><span class="hljs-comment">-- 起始索引=(当前页码-1)*每页显示的条数</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 练习</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> excel(<br> id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> KEYauto_increment, <span class="hljs-comment">-- id</span><br> channelno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>), <span class="hljs-comment">-- 设备编号</span><br> count <span class="hljs-type">INT</span>,<span class="hljs-comment">-- 人体数</span><br> devicename <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<span class="hljs-comment">-- 摄像头名称(区域地点)</span><br> reflective <span class="hljs-type">int</span>, <span class="hljs-comment">-- 反光衣状态</span><br> safetyhat <span class="hljs-type">int</span>, <span class="hljs-comment">-- 安全帽状态</span><br> signavatar <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>), <span class="hljs-comment">-- 抓拍照片(细节)</span><br> signbigavatar <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>), <span class="hljs-comment">-- 抓拍照片(全景)</span><br> signtime datetime, <span class="hljs-comment">-- 抓拍时间</span><br> smoking <span class="hljs-type">int</span> <span class="hljs-comment">-- 抽烟状态</span><br> );<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(id) <span class="hljs-keyword">from</span> excel <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> signtime; <span class="hljs-comment">-- 根据时间分组(相同的就会在一组),然后条件限制为max(id),取出id大的,就完成了去重</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> excel <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(id) <span class="hljs-keyword">from</span> excel <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> signtime ); <span class="hljs-comment">-- 再根据id向主表里查询,id是唯一的,时间重复的已经去除了</span><br></code></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220818144340362.png" alt="image-20220818144340362"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">添加约束<br><span class="hljs-comment">-- 创建表时</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>列名 数据类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    ...<br>)<br><span class="hljs-comment">-- 建完表后添加</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 modify 字段名 数据类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><br>删除约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 modify 字段名 数据类型;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> KEY auto_increment,<span class="hljs-comment">-- id 主键约束 非空且唯一且 自增长 auto_increment(自增长)</span><br>ename <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<span class="hljs-comment">-- 名称 非空约束+唯一约束 非空且唯一</span><br>joindate <span class="hljs-type">DATE</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">NULL</span>,<span class="hljs-comment">-- 日期 非空约束</span><br>salary <span class="hljs-keyword">double</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<span class="hljs-comment">-- 工资 非空约束</span><br>bonus <span class="hljs-keyword">double</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> <span class="hljs-comment">-- 奖金 默认约束 不填为0</span><br>) <br></code></pre></td></tr></table></figure><ul><li>外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">添加约束<br><span class="hljs-comment">-- 创建表时</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>列名 数据类型,<br>...<br><span class="hljs-keyword">constraint</span> 外键名称 <span class="hljs-keyword">foreign</span> key 外键列名 <span class="hljs-keyword">references</span> 主表(主表列名)<br>);<br><span class="hljs-comment">-- 建完表后添加</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> 外键名称 <span class="hljs-keyword">foreign</span> key 外键字段名称 <span class="hljs-keyword">references</span> 主表名称(主表列名称);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">删除约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> key 外键名称;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 部门表(主表先创建)</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> key auto_increment,<br>dep_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>addr <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br><span class="hljs-comment">-- 员工表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> key auto_increment,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>), <span class="hljs-comment">-- 姓名</span><br>age <span class="hljs-type">int</span>, <span class="hljs-comment">-- 年龄</span><br>dep_id <span class="hljs-type">int</span>, <span class="hljs-comment">-- 所属部门</span><br><span class="hljs-comment">-- 添加外键 dep_id 关联 dept表 id (主键 )</span><br><span class="hljs-keyword">CONSTRAINT</span> fk_emp_dept <span class="hljs-keyword">FOREIGN</span> key(dep_id) <span class="hljs-keyword">REFERENCES</span> dept(id)<br>);<br></code></pre></td></tr></table></figure><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h3><ul><li>一对多</li></ul><p>实现方式:在多的一方建立外键,指向一的一方的主键</p><ul><li>多对多</li></ul><p> 实现方式:建立第三张中间表,中间表至少包含两个外键,分别关联两方主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 多对多</span><br><span class="hljs-comment">-- 订单表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_order ( id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY auto_increment, payment <span class="hljs-keyword">DOUBLE</span> ( <span class="hljs-number">10</span>, <span class="hljs-number">2</span> ), payment_type TINYINT, STATUS TINYINT );<br><span class="hljs-comment">-- 商品表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_goods ( id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY auto_increment, title <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>), price <span class="hljs-keyword">double</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) );<br><span class="hljs-comment">-- 订单商品中间表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_order_goods ( id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY auto_increment, order_id <span class="hljs-type">int</span>, goods_id <span class="hljs-type">int</span>,count <span class="hljs-type">int</span> );<br><span class="hljs-comment">-- 添加外键</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_order_goods <span class="hljs-keyword">add</span> <span class="hljs-keyword">CONSTRAINT</span> fk_order_id <span class="hljs-keyword">FOREIGN</span> KEY(order_id) <span class="hljs-keyword">REFERENCES</span> tb_order(id);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_order_goods <span class="hljs-keyword">add</span> <span class="hljs-keyword">CONSTRAINT</span> fk_goods_id <span class="hljs-keyword">FOREIGN</span> KEY(goods_id) <span class="hljs-keyword">REFERENCES</span> tb_goods(id);<br></code></pre></td></tr></table></figure><ul><li>一对一</li></ul><p>实现方式:在任意一方加入外键,并且设置外键为唯一(unique)                </p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ul><li>内连接: 查询AB交集数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 隐式内连接</span><br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span>,表<span class="hljs-number">2.</span>.. <span class="hljs-keyword">where</span> 条件;<br><span class="hljs-comment">-- 显式内连接</span><br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span>[<span class="hljs-keyword">inner</span>] <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 条件;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 隐式内连接</span><br><span class="hljs-comment">-- 查询emp 和 dept 的数据 emp.id = dept.id </span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp,dept <span class="hljs-keyword">WHERE</span> emp.id <span class="hljs-operator">=</span> dept.id;<br><span class="hljs-comment">-- 查询 emp 表的name,age, dept 表的dep_name</span><br><span class="hljs-keyword">select</span> emp.name,emp.age,dept.dep_name <span class="hljs-keyword">from</span> emp,dept <span class="hljs-keyword">where</span> emp.id <span class="hljs-operator">=</span> dept.id;<br><span class="hljs-comment">-- 给表 起别名</span><br><span class="hljs-keyword">select</span> t1.name,t1.age,t2.dep_name <span class="hljs-keyword">from</span> emp t1,dept t2 <span class="hljs-keyword">where</span> t1.id <span class="hljs-operator">=</span> t2.id;<br><br><span class="hljs-comment">-- 显式内连接</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">on</span> emp.id <span class="hljs-operator">=</span> dept.id; <span class="hljs-comment">-- inner 可省略</span><br></code></pre></td></tr></table></figure><ul><li><p>外连接</p><ul><li>左外连接:相当于查询A表所有数据和交集部分数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">left</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 条件;<br><span class="hljs-comment">-- 左外连接 emp 表所有数据和对应的部门信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">on</span> emp.dep_id <span class="hljs-operator">=</span> dept.id;<br></code></pre></td></tr></table></figure><ul><li>右外连接:相当于查询B表所有数据和交集部分数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">right</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 条件;<br><span class="hljs-comment">-- 右外连接 dept 表所有数据和对应的人员信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">on</span> emp.dep_id <span class="hljs-operator">=</span> dept.id;<br></code></pre></td></tr></table></figure></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>查询中嵌套查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 单行单列 作为条件值, 使用 = != &gt; &lt; 等进行条件判断</span><br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表 <span class="hljs-keyword">where</span> 字段名 <span class="hljs-operator">=</span> (子查询);<br>    <span class="hljs-comment">-- 查询年龄大于张三的</span><br>    <span class="hljs-keyword">SELECT</span> age <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> &quot;张三&quot;; <span class="hljs-comment">-- 查出张三年龄</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">SELECT</span> age <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> &quot;张三&quot;); <span class="hljs-comment">-- 根据张三年龄来判断</span><br><span class="hljs-comment">-- 多行单列 作为条件值,使用 in等关键字进行条件判读</span><br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表 <span class="hljs-keyword">where</span> 字段名 <span class="hljs-keyword">in</span> (字查询);<br>    <span class="hljs-comment">-- 查询 销售部和研发部所有的员工</span><br>    <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">WHERE</span> dep_name <span class="hljs-operator">=</span> &quot;销售部&quot; <span class="hljs-keyword">or</span> dep_name <span class="hljs-operator">=</span> &quot;研发部&quot;; <span class="hljs-comment">-- 查找dept表部门</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> dep_id <span class="hljs-keyword">in</span> ( <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept ); <span class="hljs-comment">-- 根据部门在emp 里查找 dep_id 相同的</span><br><span class="hljs-comment">-- 多行多列 作为虚拟表</span><br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> (子查询) <span class="hljs-keyword">where</span> 条件;<br><br></code></pre></td></tr></table></figure><h3 id="多表查询-案例"><a href="#多表查询-案例" class="headerlink" title="多表查询 案例"></a>多表查询 案例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 多表查询 案例</span><br><span class="hljs-comment">-- 部门表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, <span class="hljs-comment">-- 部门id</span><br>dname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) ,<span class="hljs-comment">-- 部门名称</span><br>loc <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)  <span class="hljs-comment">-- 部门所在地</span><br>);<br><span class="hljs-comment">-- 职务表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> job(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> key,<br>jname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>description <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>);<br><span class="hljs-comment">-- 员工表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp (<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> key, <span class="hljs-comment">-- 员工id</span><br>ename <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>), <span class="hljs-comment">-- 员工姓名</span><br>job_id <span class="hljs-type">int</span>, <span class="hljs-comment">-- 职务id </span><br>mgr <span class="hljs-type">int</span> , <span class="hljs-comment">-- 上级领导</span><br>joindate <span class="hljs-type">date</span> , <span class="hljs-comment">-- 入职信息</span><br>salary <span class="hljs-type">decimal</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>), <span class="hljs-comment">-- 工资</span><br>bonus <span class="hljs-type">decimal</span> (<span class="hljs-number">7</span>,<span class="hljs-number">2</span>), <span class="hljs-comment">-- 奖金</span><br>dept_id <span class="hljs-type">int</span> , <span class="hljs-comment">-- 所在部门编号</span><br><span class="hljs-comment">-- 创建外键</span><br><span class="hljs-keyword">constraint</span> emp_jobid_ref_job_id_fk <span class="hljs-keyword">FOREIGN</span> key (job_id) <span class="hljs-keyword">references</span> job(id), <span class="hljs-comment">-- 员工表的job_id 对应职务表的id</span><br><span class="hljs-keyword">CONSTRAINT</span> emp_deptid_ref_dept_id_fk <span class="hljs-keyword">foreign</span> key(dept_id) <span class="hljs-keyword">REFERENCES</span> dept(id) <span class="hljs-comment">-- 员工表dept_id 对应部门表的id</span><br>);<br><span class="hljs-comment">-- 工资等级表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> salarygrade(<br>grade <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> key, <span class="hljs-comment">-- 级别</span><br>losalary <span class="hljs-type">int</span>, <span class="hljs-comment">-- 最低工资</span><br>hisalary <span class="hljs-type">int</span> <span class="hljs-comment">-- 最高工资</span><br>);<br><br><br><span class="hljs-comment">-- 添加内容</span><br><span class="hljs-comment">-- 添加四个部门</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(id,dname,loc) <span class="hljs-keyword">values</span> <br>(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;教研部&#x27;</span>,<span class="hljs-string">&#x27;北京&#x27;</span>),<br>(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;学工部&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>),<br>(<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;销售部&#x27;</span>,<span class="hljs-string">&#x27;广州&#x27;</span>),<br>(<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;财务部&#x27;</span>,<span class="hljs-string">&#x27;深圳&#x27;</span>);<br><span class="hljs-comment">-- 添加四个职务</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> job (id,jname,description) <span class="hljs-keyword">values</span><br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;董事长&#x27;</span>,<span class="hljs-string">&#x27;管理整个公司&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;经理&#x27;</span>,<span class="hljs-string">&#x27;管理整个部门&#x27;</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;销售员&#x27;</span>,<span class="hljs-string">&#x27;向客人推销产品&#x27;</span>),<br>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;文员&#x27;</span>,<span class="hljs-string">&#x27;使用办公软件&#x27;</span>);<br><span class="hljs-comment">-- 添加员工</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) <span class="hljs-keyword">values</span><br>(<span class="hljs-number">1001</span>,<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;2000-12-17&#x27;</span>,<span class="hljs-string">&#x27;8000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>(<span class="hljs-number">1002</span>,<span class="hljs-string">&#x27;卢俊义&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;2001-02-20&#x27;</span>,<span class="hljs-string">&#x27;16000.00&#x27;</span>,<span class="hljs-string">&#x27;3000.00&#x27;</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1003</span>,<span class="hljs-string">&#x27;林冲&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;2001-02-22&#x27;</span>,<span class="hljs-string">&#x27;12500.00&#x27;</span>,<span class="hljs-string">&#x27;5000.00&#x27;</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;唐僧&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1009</span>,<span class="hljs-string">&#x27;2001-04-02&#x27;</span>,<span class="hljs-string">&#x27;29750.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>(<span class="hljs-number">1005</span>,<span class="hljs-string">&#x27;李逵&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;2001-09-28&#x27;</span>,<span class="hljs-string">&#x27;12500.00&#x27;</span>,<span class="hljs-string">&#x27;14000.00&#x27;</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;宋江&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1009</span>,<span class="hljs-string">&#x27;2001-05-01&#x27;</span>,<span class="hljs-string">&#x27;28500.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1007</span>,<span class="hljs-string">&#x27;刘备&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1009</span>,<span class="hljs-string">&#x27;2001-09-01&#x27;</span>,<span class="hljs-string">&#x27;24500.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">10</span>),<br>(<span class="hljs-number">1008</span>,<span class="hljs-string">&#x27;猪八戌&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;2007-04-19&#x27;</span>,<span class="hljs-string">&#x27;30000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>(<span class="hljs-number">1009</span>,<span class="hljs-string">&#x27;罗贯中&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;2001-11-17&#x27;</span>,<span class="hljs-string">&#x27;50000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">10</span>),<br>(<span class="hljs-number">1010</span>,<span class="hljs-string">&#x27;吴用&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;2001-09-08&#x27;</span>,<span class="hljs-string">&#x27;15000.00&#x27;</span>,<span class="hljs-string">&#x27;0.00&#x27;</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1011</span>,<span class="hljs-string">&#x27;沙僧&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;2007-05-23&#x27;</span>,<span class="hljs-string">&#x27;11000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>(<span class="hljs-number">1012</span>,<span class="hljs-string">&#x27;李逵&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1006</span>,<span class="hljs-string">&#x27;2001-12-03&#x27;</span>,<span class="hljs-string">&#x27;9500.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">30</span>),<br>(<span class="hljs-number">1013</span>,<span class="hljs-string">&#x27;小白龙&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;2001-12-03&#x27;</span>,<span class="hljs-string">&#x27;30000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>(<span class="hljs-number">1014</span>,<span class="hljs-string">&#x27;关羽&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1007</span>,<span class="hljs-string">&#x27;2002-01-23&#x27;</span>,<span class="hljs-string">&#x27;13000.00&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">10</span>);<br><span class="hljs-comment">-- 添加五个工资等级</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salarygrade(grade,losalary,hisalary) <span class="hljs-keyword">values</span><br>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">10000</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-number">10010</span>,<span class="hljs-number">12000</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-number">12010</span>,<span class="hljs-number">20000</span>),<br>(<span class="hljs-number">4</span>,<span class="hljs-number">20010</span>,<span class="hljs-number">30000</span>),<br>(<span class="hljs-number">5</span>,<span class="hljs-number">30010</span>,<span class="hljs-number">99990</span>);<br><br><span class="hljs-comment">-- 查询所有员工的信息,查员工编号,姓名,工资,职务名称,职务描述</span><br><span class="hljs-comment">-- 隐式内连接</span><br><span class="hljs-keyword">select</span> emp.id,emp.ename,emp.salary,job.jname,job.description <span class="hljs-keyword">from</span> emp,job <span class="hljs-keyword">where</span> emp.job_id <span class="hljs-operator">=</span> job.id;<br><span class="hljs-comment">-- 显式内连接</span><br><span class="hljs-keyword">select</span> emp.id,emp.ename,emp.salary,job.jname,job.description <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> job <span class="hljs-keyword">ON</span> emp.job_id <span class="hljs-operator">=</span> job.id;<br><br><span class="hljs-comment">-- 查询员工编号,姓名,工资,职务名称,职务描述,部门名称,部门位置</span><br><span class="hljs-comment">-- 隐式内连接</span><br><span class="hljs-keyword">select</span> emp.id,emp.ename,emp.salary,job.jname,job.description,dept.dname,dept.loc <span class="hljs-keyword">from</span> emp,job,dept <span class="hljs-keyword">where</span> emp.job_id <span class="hljs-operator">=</span> job.id <span class="hljs-keyword">AND</span> emp.dept_id <span class="hljs-operator">=</span> dept.id;<br><span class="hljs-comment">-- 显式内连接</span><br><span class="hljs-keyword">select</span> emp.id,emp.ename,emp.salary,job.jname,job.description,dept.dname,dept.loc <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> job <span class="hljs-keyword">ON</span> emp.job_id <span class="hljs-operator">=</span> job.id <span class="hljs-keyword">Inner</span> <span class="hljs-keyword">JOIN</span> dept <span class="hljs-keyword">ON</span> emp.dept_id <span class="hljs-operator">=</span> dept.id;<br><br><span class="hljs-comment">-- 查询员工姓名,工资,工资等级</span><br><span class="hljs-keyword">select</span> emp.ename,emp.salary,t1.grade <span class="hljs-keyword">from</span> emp,salarygrade t1 <span class="hljs-keyword">where</span> emp.salary <span class="hljs-operator">&gt;=</span> t1.losalary <span class="hljs-keyword">and</span> emp.salary <span class="hljs-operator">&lt;=</span> t1.hisalary;<br><br><span class="hljs-comment">-- 查询员工姓名,工资,职务名称,职务描述,部门名称,部门位置,工资等级</span><br><span class="hljs-comment">-- 隐式内连接</span><br><span class="hljs-keyword">SELECT</span> emp.ename,emp.salary,job.jname,job.description,dept.dname,dept.loc,t1.grade <span class="hljs-keyword">from</span> emp,job,dept,salarygrade t1 <span class="hljs-keyword">where</span> emp.job_id <span class="hljs-operator">=</span> job.id <span class="hljs-keyword">AND</span> emp.dept_id <span class="hljs-operator">=</span> dept.id <span class="hljs-keyword">and</span> (emp.salary <span class="hljs-operator">&gt;=</span> t1.losalary <span class="hljs-keyword">and</span> emp.salary <span class="hljs-operator">&lt;=</span> t1.hisalary);<br><span class="hljs-comment">-- 显式内连接</span><br><span class="hljs-keyword">SELECT</span> emp.ename,emp.salary,job.jname,job.description,dept.dname,dept.loc,t1.grade <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> job <span class="hljs-keyword">ON</span> emp.job_id <span class="hljs-operator">=</span> job.id <span class="hljs-keyword">Inner</span> <span class="hljs-keyword">JOIN</span> dept <span class="hljs-keyword">ON</span> emp.dept_id <span class="hljs-operator">=</span> dept.id <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> salarygrade t1 <span class="hljs-keyword">ON</span> emp.salary <span class="hljs-keyword">BETWEEN</span> losalary <span class="hljs-keyword">and</span> hisalary;<br><br><span class="hljs-comment">-- 查询部门编号,部门名称,部门位置,部门人数</span><br><span class="hljs-keyword">SELECT</span> dept_id,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_id;<br><span class="hljs-keyword">SELECT</span> dept.id,dept.dname,dept.loc,t1.count <span class="hljs-keyword">from</span> dept,(<span class="hljs-keyword">SELECT</span> dept_id,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) count <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_id) t1 <span class="hljs-keyword">WHERE</span> dept.id <span class="hljs-operator">=</span> t1.dept_id;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>数据库的事务(Transaction)是一种机制、一个操作序列，包含了一组数据库操作命令</li><li>事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么同时成功，要么同时失败</li><li>事务是一个不可分割的工作逻辑单元</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span> 事务<br><span class="hljs-comment">-- 创建账户表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br> id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> key auto_increment,<br> name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br> money <span class="hljs-keyword">double</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)<br>);<br><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(name,money) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">1000</span>),(<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">1000</span>);<br><br><span class="hljs-keyword">UPDATE</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;<br><br><span class="hljs-comment">-- 转账操作</span><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-comment">-- 1. 查询李四余额</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> account <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> &quot;李四&quot;;<br><span class="hljs-comment">-- 2. 李四金额 -500</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">500</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> &quot;李四&quot;;<br><span class="hljs-comment">-- 3. 张三金额 +500</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">500</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> &quot;张三&quot;;<br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 回滚事务</span><br><span class="hljs-keyword">ROLLBACK</span>;<br></code></pre></td></tr></table></figure><h3 id="事务四大特征"><a href="#事务四大特征" class="headerlink" title="事务四大特征"></a>事务四大特征</h3><ul><li>原子性(Atomicity):事务是不可分割的最小操作单位，要么同时成功，要么同时失败</li><li>一致性(Consistency):事务完成时，必须使所有的数据都保持一致状态</li><li>隔离性(Isolation):多个事务之间，操作的可见性</li><li>持久性(Durability):事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h4 id="MySQL事务默认自动提交"><a href="#MySQL事务默认自动提交" class="headerlink" title="MySQL事务默认自动提交"></a>MySQL事务默认自动提交</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询事务的默认提交方式</span><br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@autocommit</span>;<br><span class="hljs-comment">-- 1 自动提交  0 手动提交</span><br><span class="hljs-comment">-- 修改事务提交方式</span><br><span class="hljs-keyword">set</span> @<span class="hljs-variable">@autocommit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><ul><li>JDBC就是使用java语言操作关系型数据库的一套API</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>java web</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Forge使用</title>
    <link href="/2022/07/11/forge/"/>
    <url>/2022/07/11/forge/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.postman.com/">Postman</a>下载</li><li><a href="https://devtechchina.github.io/ForgeHelp/#/3">collection和environment</a>下载(选择国内活动资料库)</li><li><a href="https://forge.autodesk.com/">forge</a>登录并创建应用(网址随意,<a href="https://www.baidu.com/">https://www.baidu.com</a>)<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657457731231-d0e85229-09fd-41e3-ac0e-c0acbf3bc932.png" alt="img"><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657457756389-2a830e14-eeb4-4d9c-a55e-28806bac25e0.png" alt="img"></li><li>打开postman,导入collection和environment(连续两次导入)!<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657457923533-1d1dae37-d582-41cb-9748-c24204bd2214.png" alt="img"></li><li>更改环境变量<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657458084657-5101b028-5f14-43fc-9ca1-d0d69753d77b.png" alt="img"></li><li>找到在forge创建应用时的id<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657458143117-eafc1542-668d-4f09-9b92-adacb0b92b69.png" alt="img"></li><li>将其对应粘贴进环境变量(记得保存)<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657458262079-6f6c3927-2e24-4f08-bdc7-f2606192b51b.png" alt="img"></li><li>获取token<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657458344242-adb01da3-c1a1-4ed1-9e34-edcfef287692.png" alt="img"></li><li>获取bucket(这里可能提示已经存在,更改bucketkey后面的序号,直到成功)<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657458404312-b8a21fdb-789c-4bea-ab8d-2af6648feba1.png" alt="img"></li><li>确认bucket是否创建成功(get出的bucketkey和创建的相同就成功)<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657458628345-30d38285-7f77-4ccd-bd94-914bc92e2890.png" alt="img"></li><li>上传模型<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657458825875-841a4548-1472-4c18-af3b-f91bb1a2b33f.png" alt="img"></li><li>查看模型是否上传成功<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657459151811-3f508232-d088-4848-a583-8a30b6df7ff5.png" alt="img"></li><li>模型urn<a href="https://www.base64encode.com/">Base64格式转换</a><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657459346234-3acfb7a9-e7c8-400a-a5c6-986dd5d94967.png" alt="img"></li><li>复制结果更改环境变量<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657459392671-df780f73-786a-4c48-aaf1-f5bf7a0a3b2d.png" alt="img"></li><li>发送请求!<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657459451249-db054149-2db9-47a2-bac4-2da72b7b1e4c.png" alt="img"></li><li>查看模型是否转换完成<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657459493682-bcf3bde3-022c-498d-81a7-abf682cc7d57.png" alt="img"></li><li>更改代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Autodesk Forge: 3D Viewer App Sample<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;cache-control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;max-age=0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;cache-control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;expires&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;expires&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Tue, 01 Jan 1980 1:00:00 GMT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;pragma&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- Third Party package --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Autodesk Forge Viewer files (IMPORTANT) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/style.min.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/viewer3D.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/** Just simple CSS styling to make this page a little nicer **/</span></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- The Viewer will be instantiated here --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MyViewerDiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Custom script --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> viewer;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> options = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">env</span>: <span class="hljs-string">&#x27;AutodeskProduction&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">api</span>: <span class="hljs-string">&#x27;derivativeV2&#x27;</span>, <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> for models uploaded to EMEA change this option to &#x27;derivativeV2_EU&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-attr">accessToken</span>: <span class="hljs-string">&#x27;eyJhbGciOiJSUzI1NiIsImtpZCI6IlU3c0dGRldUTzlBekNhSzBqZURRM2dQZXBURVdWN2VhIn0.eyJzY29wZSI6WyJkYXRhOnJlYWQiLCJkYXRhOndyaXRlIiwiYnVja2V0OmNyZWF0ZSIsImJ1Y2tldDpyZWFkIl0sImNsaWVudF9pZCI6IjBZNWNSNEFNYjROdmxnMW5Pb25mR2NUN0FEWDhQejRpIiwiYXVkIjoiaHR0cHM6Ly9hdXRvZGVzay5jb20vYXVkL2Fqd3RleHA2MCIsImp0aSI6Ijh3NGMwemsxVXdWYlJWT3VXTXg3NDhOOEZlVUNCcTR3QzNscWJ2NHdLOXR4dDhEcDJPc2xWQU1VZUtPWGJKOTciLCJleHAiOjE2NTc0NTg3OTl9.RNOPdKbiLAJOEmHb5CfUqj0NZTpRaFnruiVX2F03HKqmfm99dRMdvz8u-PhythLy6KJCs87SLOVr48Gkvvzzi2X8_uiu5ZH7rN3dq-yQVrWKU4Jp5P-sQ32HpmgKKiVYdu8tcYDSu5VmuB7a0SY6jX0i2H8vT7DrRBKIpnBEGmqAbya5NKqd0HUkStzvvg1yRjENzVxHz6oRL2nitrvIdYSacn7h_-JmxBZJ9eMkE2VAU_xCTYU2ces0750Je0uV_VQDw1d8WM3qVKliSjJ72m5J3b43Cjbbh2p6Li0A1HaM5RR0Eje8pd_xCCWEvEBnLqVOVOpFV5Uojc-UXoQYAw&#x27;</span></span><br><span class="language-javascript">        &#125;;<span class="hljs-comment">//getForgeToken</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> documentId = <span class="hljs-string">&#x27;urn:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6eGlhb2RvbmctcGVyc2lzdGVudC1idWNrZXQtdGVzdDIzL2FnZ3JlZ2F0ZS0xLnJ2dA&#x27;</span>;<span class="hljs-comment">// + getUrlParameter(&#x27;urn&#x27;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// Run this when the page is loaded</span></span><br><span class="language-javascript">        <span class="hljs-title class_">Autodesk</span>.<span class="hljs-property">Viewing</span>.<span class="hljs-title class_">Initializer</span>(options, <span class="hljs-keyword">function</span> <span class="hljs-title function_">onInitialized</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// Find the element where the 3d viewer will live.    </span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> htmlElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;MyViewerDiv&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (htmlElement) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// Create and start the viewer in that element    </span></span><br><span class="language-javascript">                viewer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Autodesk</span>.<span class="hljs-property">Viewing</span>.<span class="hljs-title class_">GuiViewer3D</span>(htmlElement);</span><br><span class="language-javascript">                viewer.<span class="hljs-title function_">start</span>();</span><br><span class="language-javascript">                <span class="hljs-comment">// Load the document into the viewer.</span></span><br><span class="language-javascript">                <span class="hljs-title class_">Autodesk</span>.<span class="hljs-property">Viewing</span>.<span class="hljs-property">Document</span>.<span class="hljs-title function_">load</span>(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">        * Autodesk.Viewing.Document.load() success callback.</span></span><br><span class="hljs-comment"><span class="language-javascript">        * Proceeds with model initialization.</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">onDocumentLoadSuccess</span>(<span class="hljs-params">doc</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// Load the default viewable geometry into the viewer.</span></span><br><span class="language-javascript">            <span class="hljs-comment">// Using the doc, we have access to the root BubbleNode,</span></span><br><span class="language-javascript">            <span class="hljs-comment">// which references the root node of a graph that wraps each object from the Manifest JSON.</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> viewable = doc.<span class="hljs-title function_">getRoot</span>().<span class="hljs-title function_">getDefaultGeometry</span>();</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (viewable) &#123;</span><br><span class="language-javascript">                viewer.<span class="hljs-title function_">loadDocumentNode</span>(doc, viewable).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Viewable Loaded!&#x27;</span>);</span><br><span class="language-javascript">                &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Viewable failed to load.&#x27;</span>);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">              )</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">        * Autodesk.Viewing.Document.load() failure callback.</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">onDocumentLoadFailure</span>(<span class="hljs-params">viewerErrorCode</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;onDocumentLoadFailure() - errorCode: &#x27;</span> + viewerErrorCode);</span><br><span class="language-javascript">            <span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;#MyViewerDiv&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&lt;p&gt;Translation in progress... Please try refreshing the page.&lt;/p&gt;&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// Get Query string from URL,</span></span><br><span class="language-javascript">        <span class="hljs-comment">// we will use this to get the value of &#x27;urn&#x27; from URL</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUrlParameter</span>(<span class="hljs-params">name</span>) &#123;</span><br><span class="language-javascript">            name = name.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[[]/</span>, <span class="hljs-string">&#x27;\\[&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[\]]/</span>, <span class="hljs-string">&#x27;\\]&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;[\\?&amp;]&#x27;</span> + name + <span class="hljs-string">&#x27;=([^&amp;#]*)&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> results = regex.<span class="hljs-title function_">exec</span>(location.<span class="hljs-property">search</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> results === <span class="hljs-literal">null</span> ? <span class="hljs-string">&#x27;&#x27;</span> : <span class="hljs-built_in">decodeURIComponent</span>(results[<span class="hljs-number">1</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\+/g</span>, <span class="hljs-string">&#x27; &#x27;</span>));</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// Get public access token for read only,</span></span><br><span class="language-javascript">        <span class="hljs-comment">// using ajax to access route /api/forge/oauth/public in the background</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getForgeToken</span>(<span class="hljs-params">callback</span>) &#123;</span><br><span class="language-javascript">            jQuery.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/forge/oauth/public&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">callback</span>(res.<span class="hljs-property">access_token</span>, res.<span class="hljs-property">expires_in</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>复制urn替换代码<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657459681252-2382afa2-62f8-4a0e-986a-c8dcfc31d0af.png" alt="img"></li><li>复制token替换代码<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657459730565-c5970e1d-d635-4614-b641-836561548eb9.png" alt="img"></li><li>完成打开html文件</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Forge</tag>
      
      <tag>Revit</tag>
      
      <tag>模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Haas edu k1 温湿度代码解析</title>
    <link href="/2022/07/08/Haas%20edu%20k1%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/07/08/Haas%20edu%20k1%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<ul><li>温湿度读取;屏幕显示;灯控制 代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@File       :    main.py</span><br><span class="hljs-string">@Description:    温湿度上云</span><br><span class="hljs-string">@Author     :    ethan.lcz</span><br><span class="hljs-string">@version    :    1.0</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> aliyunIoT <span class="hljs-keyword">import</span> Device      <span class="hljs-comment"># aliyunIoT组件是连接阿里云物联网平台的组件</span><br><span class="hljs-keyword">import</span> netmgr <span class="hljs-keyword">as</span> nm               <span class="hljs-comment"># Wi-Fi功能所在库</span><br><span class="hljs-keyword">import</span> utime                      <span class="hljs-comment"># 延时API所在组件</span><br><span class="hljs-keyword">from</span> driver <span class="hljs-keyword">import</span> I2C            <span class="hljs-comment"># I2C总线驱动库</span><br><span class="hljs-keyword">from</span> driver <span class="hljs-keyword">import</span> GPIO           <span class="hljs-comment"># ESP32和使用GPIO控制LED</span><br><span class="hljs-keyword">from</span> haaseduk1 <span class="hljs-keyword">import</span> HAASEDUK1   <span class="hljs-comment"># 引入haaseduk1库，目标用于区分K1版本</span><br><span class="hljs-keyword">import</span> ujson                      <span class="hljs-comment"># json字串解析库</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> cht8305 <span class="hljs-keyword">import</span> CHT8305<br><span class="hljs-keyword">import</span> sh1106                     <span class="hljs-comment"># SH1106 OLED驱动库</span><br><span class="hljs-keyword">from</span> driver <span class="hljs-keyword">import</span> SPI              <span class="hljs-comment"># 引入SPI总线库</span><br><span class="hljs-keyword">import</span> framebuf            <span class="hljs-comment"># framebuf基类，用于设置字体库</span><br><br><br><span class="hljs-comment"># 物联网平台连接标志位</span><br>iot_connected = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 物联网设备实例</span><br>device = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 三元组信息*</span><br>productKey = <span class="hljs-string">&quot;productKey&quot;</span><br>deviceName = <span class="hljs-string">&quot;deviceName&quot;</span><br>deviceSecret = <span class="hljs-string">&quot;deviceSecret&quot;</span><br><br><span class="hljs-comment"># Wi-Fi SSID和Password设置*</span><br>wifiSsid = <span class="hljs-string">&quot;@Ruijie-s1760&quot;</span><br>wifiPassword = <span class="hljs-string">&quot;abc12345&quot;</span><br><br><span class="hljs-comment"># 空调和加湿器状态变量</span><br>blue = <span class="hljs-number">0</span><br>green = <span class="hljs-number">0</span><br>blue_value = <span class="hljs-number">0</span><br>green_value = <span class="hljs-number">0</span><br>red = <span class="hljs-number">0</span><br>red_value = <span class="hljs-number">0</span><br><br>humitureDev = <span class="hljs-number">0</span><br>board = HAASEDUK1()                  <span class="hljs-comment"># 新建HAASEDUK1对象</span><br>hwID = board.getHWID()               <span class="hljs-comment"># 获取开发板ID</span><br>i2cObj = I2C()<br><br><span class="hljs-keyword">if</span> (hwID == <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">from</span> cht8305 <span class="hljs-keyword">import</span> CHT8305      <span class="hljs-comment"># HaaS EDU K1C上的温湿度传感器采用的是CHT8305</span><br>    i2cObj.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;cht8305&quot;</span>)           <span class="hljs-comment"># 按照board.json中名为&quot;cht8305&quot;的设备节点的配置参数（主设备I2C端口号，从设备地址，总线频率等）初始化I2C类型设备对象</span><br>    humitureDev = CHT8305(i2cObj)   <span class="hljs-comment"># 初始化CHT8305传感器</span><br>    <span class="hljs-comment"># print(&quot;cht8305 inited!&quot;)</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">from</span> si7006 <span class="hljs-keyword">import</span> SI7006        <span class="hljs-comment"># HaaS EDU K1上的温湿度传感器采用的是SI7006</span><br>    i2cObj.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;si7006&quot;</span>)            <span class="hljs-comment"># 按照board.json中名为&quot;si7006&quot;的设备节点的配置参数（主设备I2C端口号，从设备地址，总线频率等）初始化I2C类型设备对象</span><br>    humitureDev = SI7006(i2cObj)   <span class="hljs-comment"># 初始化SI7006传感器</span><br>    version = humitureDev.getVer()  <span class="hljs-comment"># 获取SI7006的版本信息</span><br>    chipID = humitureDev.getID()    <span class="hljs-comment"># 获取SI7006 ID信息</span><br>    <span class="hljs-comment"># print(&quot;si7006 version:%d, chipID:%d&quot; , version, chipID)</span><br><br><br><span class="hljs-comment"># 等待Wi-Fi成功连接到路由器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_wifi_status</span>():<br>   nm.init()<br>   nm.disconnect()<br>   wifi_connected = nm.getStatus()<br>   <span class="hljs-comment"># 打印日志 WiFi名</span><br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;start to connect &quot;</span> , wifiSsid)    <br>   <br>   <span class="hljs-comment"># 连接到指定的路由器（路由器名称为wifiSsid, 密码为：wifiPassword）</span><br>   nm.connect(wifiSsid, wifiPassword)       <br>   <br>   <span class="hljs-comment"># 这里打印日志,WiFi连接状态</span><br>   <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>      <span class="hljs-keyword">if</span> wifi_connected == <span class="hljs-number">5</span>:               <span class="hljs-comment"># nm.getStatus()返回5代表连线成功</span><br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">else</span>:<br>        wifi_connected = nm.getStatus() <span class="hljs-comment"># 获取Wi-Fi连接路由器的状态信息</span><br>        utime.sleep(<span class="hljs-number">0.5</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wi-Fi connected&quot;</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;DeviceIP:&#x27;</span> + nm.getInfo()[<span class="hljs-string">&#x27;ip&#x27;</span>])  <span class="hljs-comment"># 打印Wi-Fi的IP地址信息</span><br><br><span class="hljs-comment"># 通过温湿度传感器读取温湿度信息</span><br><span class="hljs-comment"># 这里就是返回读取的温湿度</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_temp_humi</span>():<br>    <span class="hljs-keyword">global</span> humitureDev<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    # 如果需要同时获取温湿度信息，可以呼叫getTempHumidity，实例代码如下:</span><br><span class="hljs-string">    humniture = humitureDev.getTempHumidity()          # 获取温湿度传感器测量到的温湿度值</span><br><span class="hljs-string">    temperature = humniture[0]                          # get_temp_humidity返回的字典中的第一个值为温度值</span><br><span class="hljs-string">    humidity = humniture[1]                             # get_temp_humidity返回的字典中的第二个值为相对湿度值</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    temperature = humitureDev.getTemperature()         <span class="hljs-comment"># 获取温度测量结果</span><br>    <span class="hljs-comment"># print(&quot;The temperature is: %.1f&quot; % temperature)</span><br><br>    humidity = humitureDev.getHumidity()               <span class="hljs-comment"># 获取相对湿度测量结果</span><br>    <span class="hljs-comment"># print(&quot;The humidity is: %d&quot; % humidity)</span><br><br>    <span class="hljs-keyword">return</span> temperature, humidity                        <span class="hljs-comment"># 返回读取到的温度值和相对湿度值</span><br><br><br><span class="hljs-comment"># 设置props 事件接收函数（当云平台向设备下发属性时）</span><br><span class="hljs-comment"># 这里是 云平台下发指令 的时候进行执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_props</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">global</span> blue, green, blue_value, green_value, red, red_value<br>    payload = ujson.loads(request[<span class="hljs-string">&#x27;params&#x27;</span>]) <span class="hljs-comment">#根据下发的指令 这里得到的是一串数据&#123;&#x27;blue&#x27;: 0, &#x27;red&#x27;: 0, &#x27;green&#x27;: 0&#125;</span><br>    <span class="hljs-comment"># 获取dict状态字段 注意要验证键存在 否则会抛出异常</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;blue&quot;</span> <span class="hljs-keyword">in</span> payload.keys():<br>        blue_value = payload[<span class="hljs-string">&quot;blue&quot;</span>] <span class="hljs-comment"># 根据数据对应字段得到字段对应值,布尔类型</span><br>        <span class="hljs-comment">#这里就是 打印灯状态的日志 ,下面一样</span><br>        <span class="hljs-keyword">if</span> (blue_value):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;蓝灯开&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;蓝灯关&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;green&quot;</span> <span class="hljs-keyword">in</span> payload.keys():<br>        green_value = payload[<span class="hljs-string">&quot;green&quot;</span>]<br>        <span class="hljs-keyword">if</span> (green_value):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;绿灯开&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;绿灯关&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;red&quot;</span> <span class="hljs-keyword">in</span> payload.keys():<br>        red_value = payload[<span class="hljs-string">&quot;red&quot;</span>]<br>        <span class="hljs-keyword">if</span> (red_value):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;红灯开&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;红灯关&quot;</span>)<br>    <span class="hljs-comment"># 这里是 控制灯开关 的地方,将对应的value值写入,就可以开关</span><br>    blue.write(blue_value)<br>    green.write(green_value)<br>    red.write(red_value)<br>    <span class="hljs-comment"># 这里将更改后的状态同步上报到云平台,因为灯开关后,云平台状态还要改变</span><br>    <span class="hljs-comment"># 这一段是将状态更改后的数值 变成&#123;&#x27;blue&#x27;: 0, &#x27;red&#x27;: 0, &#x27;green&#x27;: 0&#125;样式传回</span><br>    prop = ujson.dumps(&#123;<br>        <span class="hljs-string">&#x27;blue&#x27;</span>: blue_value,<br>        <span class="hljs-string">&#x27;green&#x27;</span>: green_value,<br>        <span class="hljs-string">&#x27;red&#x27;</span> : red_value,<br>    &#125;)<br>    upload_data = &#123;<span class="hljs-string">&#x27;params&#x27;</span>: prop&#125;<span class="hljs-comment"># 这里也是样式,变成&#123;&#x27;params&#x27;: &#x27;&#123;&quot;blue&quot;: 0, &quot;green&quot;: 0, &quot;red&quot;: 0&#125;&#x27;&#125;</span><br>    <span class="hljs-comment"># 上报属性到云端</span><br>    device.postProps(upload_data) <span class="hljs-comment">#这里才是将更改后的数据传回平台</span><br><br><span class="hljs-comment"># 物联网平台连接成功的回调函数</span><br><span class="hljs-comment"># 这里是物联网连接成功后,改变对应标志位,就是代表连接成功的一个标志</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_connect</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">global</span> iot_connected<br>    iot_connected = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 连接物联网平台</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_lk</span>(<span class="hljs-params">productKey, deviceName, deviceSecret</span>):<br>    <span class="hljs-keyword">global</span> device, iot_connected<br>    key_info = &#123;<br>        <span class="hljs-string">&#x27;region&#x27;</span>: <span class="hljs-string">&#x27;cn-shanghai&#x27;</span>,<br>        <span class="hljs-string">&#x27;productKey&#x27;</span>: productKey,<br>        <span class="hljs-string">&#x27;deviceName&#x27;</span>: deviceName,<br>        <span class="hljs-string">&#x27;deviceSecret&#x27;</span>: deviceSecret,<br>        <span class="hljs-string">&#x27;keepaliveSec&#x27;</span>: <span class="hljs-number">60</span><br>    &#125;<br>    <span class="hljs-comment"># 将三元组信息设置到iot组件中</span><br>    device = Device()<br><br>    <span class="hljs-comment"># 设定连接到物联网平台的回调函数，如果连接物联网平台成功，则调用on_connect函数</span><br>    <span class="hljs-comment"># 连接成功就调用上面的标志位方法</span><br>    device.on(Device.ON_CONNECT, on_connect)<br><br>    <span class="hljs-comment"># 配置收到云端属性控制指令的回调函数，如果 收到物联网平台发送的属性控制消息，则调用on_props函数</span><br>    device.on(Device.ON_PROPS, on_props)<br><br>    <span class="hljs-comment"># 启动连接阿里云物联网平台过程</span><br>    device.connect(key_info)<br><br>    <span class="hljs-comment"># 等待设备成功连接到物联网平台</span><br>    <span class="hljs-comment"># 根据上面的标志位,打印日志</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>        <span class="hljs-keyword">if</span> iot_connected:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;物联网平台连接成功&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sleep for 1 s&#x27;</span>)<br>            utime.sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 连接平台的时候执行OLED屏幕初始化</span><br>    oledInit() <span class="hljs-comment"># 屏幕初始化方法</span><br><br><span class="hljs-comment"># 上传温度信息和湿度信息到物联网平台</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_temperature_and_Humidity</span>():<br>    <span class="hljs-keyword">global</span> device<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data = get_temp_humi() <span class="hljs-comment">#这里运行温湿度方法,得到两个数值,传给data数组</span><br>        <br>        <span class="hljs-comment"># 显示部分</span><br>        <span class="hljs-comment"># 这里是将数据取两位小数,为了显示</span><br>        temp_str = <span class="hljs-string">&quot;T:%.2f&quot;</span> % data[<span class="hljs-number">0</span>]<br>        humi_str = <span class="hljs-string">&quot;H:%.2f%%&quot;</span> % data[<span class="hljs-number">1</span>]<br>        <span class="hljs-comment">#这里是 调用显示方法 ,将数据显示</span><br>        oledShowText(temp_str, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">12</span>)<br>        oledShowText(humi_str, <span class="hljs-number">3</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">False</span>, <span class="hljs-number">12</span>) <br>        <span class="hljs-comment"># 生成上报到物联网平台的属性值字串</span><br>        <span class="hljs-comment"># 跟上面灯的一样,根据数据拼出json格式数据</span><br>        prop = ujson.dumps(&#123;<br>            <span class="hljs-string">&#x27;CurrentTemperature&#x27;</span>: <span class="hljs-built_in">round</span>(data[<span class="hljs-number">0</span>],<span class="hljs-number">2</span>), <span class="hljs-comment"># 保留两位</span><br>            <span class="hljs-string">&#x27;CurrentHumidity&#x27;</span>: <span class="hljs-built_in">round</span>(data[<span class="hljs-number">1</span>],<span class="hljs-number">2</span>)<br>            &#125;)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;uploading data: &#x27;</span>, prop) <span class="hljs-comment"># 这里打印日志,uploading data:  &#123;&quot;CurrentTemperature&quot;: 46.52832, &quot;CurrentHumidity&quot;: 16.55283&#125;</span><br>        upload_data = &#123;<span class="hljs-string">&#x27;params&#x27;</span>: prop&#125;  <span class="hljs-comment"># 一样 拼凑出最终格式的json数据</span><br>        <span class="hljs-comment"># 上传温度和湿度信息到物联网平台</span><br>        device.postProps(upload_data)   <span class="hljs-comment"># 将数据上传</span><br>        <br>        <br>        <span class="hljs-comment">#间隔2s运行一次</span><br>        utime.sleep(<span class="hljs-number">2</span>)<br><br><br><span class="hljs-comment"># OLED初始化</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">oledInit</span>():<br>    <span class="hljs-keyword">global</span> oled<br><br>    <span class="hljs-comment"># 字库文件存放于项目目录 font, 注意若用到了中英文字库则都需要放置</span><br>    framebuf.set_font_path(framebuf.FONT_ASC12_8, <span class="hljs-string">&#x27;/data/font/ASC12_8&#x27;</span>)<br>    framebuf.set_font_path(framebuf.FONT_ASC16_8, <span class="hljs-string">&#x27;/data/font/ASC16_8&#x27;</span>)<br>    framebuf.set_font_path(framebuf.FONT_ASC24_12, <span class="hljs-string">&#x27;/data/font/ASC24_12&#x27;</span>)<br>    framebuf.set_font_path(framebuf.FONT_ASC32_16, <span class="hljs-string">&#x27;/data/font/ASC32_16&#x27;</span>)<br><br>    oled_spi = SPI()<br>    oled_spi.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;oled_spi&quot;</span>)<br><br>    oled_res = GPIO()<br>    oled_res.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;oled_res&quot;</span>)<br><br>    oled_dc = GPIO()<br>    oled_dc.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;oled_dc&quot;</span>)<br><br>    <span class="hljs-comment">#oled像素132*64</span><br>    oled = sh1106.SH1106_SPI(<span class="hljs-number">132</span>, <span class="hljs-number">64</span>, oled_spi, oled_dc, oled_res)<br><span class="hljs-comment"># OLED显示</span><br><span class="hljs-comment"># text:显示的文本</span><br><span class="hljs-comment"># x:水平坐标 y:垂直坐标</span><br><span class="hljs-comment"># color:颜色</span><br><span class="hljs-comment"># clear: True-清屏显示 False-不清屏显示</span><br><span class="hljs-comment"># sz:字体大小</span><br><span class="hljs-comment"># 屏幕显示方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">oledShowText</span>(<span class="hljs-params">text, x, y, color, clear, sz</span>):<br>    <span class="hljs-keyword">global</span> oled<br>    <span class="hljs-keyword">if</span> clear:<br>        oled.fill(<span class="hljs-number">0</span>) <span class="hljs-comment"># 清屏</span><br>    oled.text(text, x, y, color, size = sz)<br>    oled.show()<br><br><br><span class="hljs-comment"># 初始运行main方法</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 硬件初始化</span><br>    <span class="hljs-comment"># 初始化 GPIO</span><br>    blue = GPIO()<br>    green = GPIO()<br>    red = GPIO()<br><br>    green.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;led_g&#x27;</span>) <span class="hljs-comment"># 使用board.json中led_g节点定义的GPIO，对应HaaS EDU K1上的绿灯</span><br>    blue.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;led_b&#x27;</span>)  <span class="hljs-comment"># 使用board.json中led_b节点定义的GPIO，对应HaaS EDU K1上的蓝灯</span><br>    red.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;led_r&#x27;</span>)   <span class="hljs-comment"># 使用board.json中led_r节点定义的GPIO，对应HaaS EDU K1上的红灯</span><br>    <span class="hljs-comment"># 请替换物联网平台申请到的产品和设备信息,可以参考文章:https://blog.csdn.net/HaaSTech/article/details/114360517</span><br>    <span class="hljs-comment"># global productKey, deviceName, deviceSecret ,on_request, on_play</span><br>    get_wifi_status()   <span class="hljs-comment"># 运行WiFi连接</span><br>    connect_lk(productKey, deviceName, deviceSecret) <span class="hljs-comment"># 运行连接到物联网方法,传入三元组</span><br>    upload_temperature_and_Humidity() <span class="hljs-comment"># 运行上传温湿度信息到物联网平台</span><br><br>humitureDev.close() <span class="hljs-comment"># 传感器关闭</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>物联网</tag>
      
      <tag>Haas EDU K1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里open api使用方法</title>
    <link href="/2022/07/08/%E9%98%BF%E9%87%8COPEN%20API/"/>
    <url>/2022/07/08/%E9%98%BF%E9%87%8COPEN%20API/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://next.api.aliyun.com/api/Iot/2018-01-20/QueryDevicePropertyStatus">获取属性</a>和<a href="https://next.api.aliyun.com/api/Iot/2018-01-20/SetDeviceProperty">下发指令</a></li><li><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657283822788-2a76faf4-d0ff-47f0-a6de-e31a4a8c746a.png" alt="img"></li><li>选择c#,下载工程<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657197838541-e151b082-2c18-4c8f-a7cd-6784e1efd70f.png" alt="image.png"></li><li>打开unity,新建脚本</li><li>将完整工程解压,将sample.cs代码复制到脚本文件,<a href="https://usercenter.console.aliyun.com/#/manage/ak">ACCESS_KEY_ID 以及 ACCESS_KEY_SECRET</a>获取,<a href="https://iot.console.aliyun.com/lk/vpc/instance/detail_s">IotInstanceId</a>获取</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Newtonsoft.Json.Linq;<br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Text.RegularExpressions;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><br><span class="hljs-keyword">using</span> Tea;<br><span class="hljs-keyword">using</span> Tea.Utils;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Sample</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> IotInstanceId;<span class="hljs-comment">//实例id</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> ProductKey;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> DeviceName;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> accessKeyId;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> accessKeySecret;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AlibabaCloud.SDK.Iot20180120.<span class="hljs-function">Client <span class="hljs-title">CreateClient</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> accessKeyId, <span class="hljs-built_in">string</span> accessKeySecret</span>)</span><br>    &#123;<br>        AlibabaCloud.OpenApiClient.Models.Config config = <span class="hljs-keyword">new</span> AlibabaCloud.OpenApiClient.Models.Config<br>        &#123;<br>            <span class="hljs-comment">// 您的 AccessKey ID</span><br>            AccessKeyId = accessKeyId,<br>            <span class="hljs-comment">// 您的 AccessKey Secret</span><br>            AccessKeySecret = accessKeySecret,<br>        &#125;;<br>        <span class="hljs-comment">// 访问的域名</span><br>        config.Endpoint = <span class="hljs-string">&quot;iot.cn-shanghai.aliyuncs.com&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AlibabaCloud.SDK.Iot20180120.Client(config);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> IotInstanceId, <span class="hljs-built_in">string</span> ProductKey, <span class="hljs-built_in">string</span> DeviceName, <span class="hljs-built_in">string</span> accessKeyId, <span class="hljs-built_in">string</span> accessKeySecret</span>)</span><br>    &#123;<br>        AlibabaCloud.SDK.Iot20180120.Client client = CreateClient(accessKeyId, accessKeySecret);<br>        AlibabaCloud.SDK.Iot20180120.Models.QueryDevicePropertyStatusRequest queryDevicePropertyStatusRequest = <span class="hljs-keyword">new</span> AlibabaCloud.SDK.Iot20180120.Models.QueryDevicePropertyStatusRequest<br>        &#123;<br>            IotInstanceId = IotInstanceId,<br>            ProductKey = ProductKey,<br>            DeviceName = DeviceName,<br>        &#125;;<br>        AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = <span class="hljs-keyword">new</span> AlibabaCloud.TeaUtil.Models.RuntimeOptions();<br>        AlibabaCloud.SDK.Iot20180120.Models.QueryDevicePropertyStatusResponse resp = client.QueryDevicePropertyStatusWithOptions(queryDevicePropertyStatusRequest, runtime);<br>        <span class="hljs-comment">//AlibabaCloud.TeaConsole.Client.Log(AlibabaCloud.TeaUtil.Common.ToJSONString(resp.ToMap()));</span><br>        <span class="hljs-keyword">return</span> AlibabaCloud.TeaUtil.Common.ToJSONString(resp.ToMap());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        StartCoroutine(temAndHum());<br>    &#125;<br>    <span class="hljs-function">IEnumerator <span class="hljs-title">temAndHum</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>        &#123;<br>            JObject obj = JObject.Parse(Main(IotInstanceId, ProductKey, DeviceName, accessKeyId, accessKeySecret));<br>            <span class="hljs-built_in">string</span> humidity = (<span class="hljs-built_in">string</span>)obj[<span class="hljs-string">&quot;body&quot;</span>][<span class="hljs-string">&quot;Data&quot;</span>][<span class="hljs-string">&quot;List&quot;</span>][<span class="hljs-string">&quot;PropertyStatusInfo&quot;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&quot;Value&quot;</span>];<br>            <span class="hljs-built_in">string</span> temperature = (<span class="hljs-built_in">string</span>)obj[<span class="hljs-string">&quot;body&quot;</span>][<span class="hljs-string">&quot;Data&quot;</span>][<span class="hljs-string">&quot;List&quot;</span>][<span class="hljs-string">&quot;PropertyStatusInfo&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;Value&quot;</span>];<br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>/正则表达式,把除了数值部分的都变成&quot;&quot;空,Regex.Replace</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>/然后转变成double类型double.Parse</span><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>/在进行保留两位小数Math.Round</span><br>            <span class="hljs-comment">//Debug.Log(newStr);</span><br>            <span class="hljs-comment">//Debug.Log(Main(IotInstanceId, ProductKey, DeviceName, accessKeyId, accessKeySecret));</span><br>            <span class="hljs-built_in">double</span> newHum = Math.Round(<span class="hljs-built_in">double</span>.Parse(Regex.Replace(humidity, <span class="hljs-string">@&quot;[^\d.\d]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)), <span class="hljs-number">2</span>);<br>            <span class="hljs-built_in">double</span> newTem = Math.Round(<span class="hljs-built_in">double</span>.Parse(Regex.Replace(temperature, <span class="hljs-string">@&quot;[^\d.\d]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)), <span class="hljs-number">2</span>);<br>            Debug.Log(newHum);<br>            Debug.Log(newTem);<br>            <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">WaitForSeconds</span>(<span class="hljs-params"><span class="hljs-number">5</span></span>)</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python">using System;<br>using System.Collections;<br>using System.Collections.<span class="hljs-type">Generic</span>;<br>using System.IO;<br>using System.Threading.Tasks;<br><br>using Tea;<br>using Tea.Utils;<br>using UnityEngine;<br><br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Switch</span> : MonoBehaviour<br>&#123;<br>    public string IotInstanceId;//实例<span class="hljs-built_in">id</span><br>    public string ProductKey;<br>    public string DeviceName;<br>    public string accessKeyId;<br>    public string accessKeySecret;<br>    public <span class="hljs-built_in">bool</span> sw;<br>    <br>    public static AlibabaCloud.SDK.Iot20180120.Client CreateClient(string accessKeyId, string accessKeySecret)<br>    &#123;<br>        AlibabaCloud.OpenApiClient.Models.Config config = new AlibabaCloud.OpenApiClient.Models.Config<br>        &#123;<br>            // 您的 AccessKey ID<br>            AccessKeyId = accessKeyId,<br>            // 您的 AccessKey Secret<br>            AccessKeySecret = accessKeySecret,<br>        &#125;;<br>        // 访问的域名<br>        config.Endpoint = <span class="hljs-string">&quot;iot.cn-shanghai.aliyuncs.com&quot;</span>;<br>        <span class="hljs-keyword">return</span> new AlibabaCloud.SDK.Iot20180120.Client(config);<br>    &#125;<br><br>    public static void Main(<span class="hljs-built_in">bool</span> sw, string IotInstanceId, string ProductKey, string DeviceName, string accessKeyId, string accessKeySecret)<br>    &#123;<br>        string temp;<br>        <span class="hljs-keyword">if</span> (sw)<br>        &#123;<br>            temp = <span class="hljs-string">&quot;&#123;\&quot;red\&quot;:1,\&quot;green\&quot;:1,\&quot;blue\&quot;:1&#125;&quot;</span>; //开<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            temp = <span class="hljs-string">&quot;&#123;\&quot;red\&quot;:0,\&quot;green\&quot;:0,\&quot;blue\&quot;:0&#125;&quot;</span>; //关<br>        &#125;<br><br>        AlibabaCloud.SDK.Iot20180120.Client client = CreateClient(accessKeyId, accessKeySecret);<br>        AlibabaCloud.SDK.Iot20180120.Models.SetDevicePropertyRequest setDevicePropertyRequest = new AlibabaCloud.SDK.Iot20180120.Models.SetDevicePropertyRequest<br>        &#123;<br>            Items = temp,<br>            IotInstanceId = IotInstanceId,<br>            ProductKey = ProductKey,<br>            DeviceName = DeviceName,<br>        &#125;;<br>        AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();<br>        AlibabaCloud.SDK.Iot20180120.Models.SetDevicePropertyResponse resp = client.SetDevicePropertyWithOptions(setDevicePropertyRequest, runtime);<br>        AlibabaCloud.TeaConsole.Client.Log(AlibabaCloud.TeaUtil.Common.ToJSONString(resp.ToMap()));<br>    &#125;<br>    private void Start()<br>    &#123;<br>        <br>        StartCoroutine(lightSw());<br>    &#125;<br>    IEnumerator lightSw()<br>    &#123;<br>        <span class="hljs-keyword">while</span> (true)<br>        &#123;<br>            Main(sw, IotInstanceId, ProductKey, DeviceName, accessKeyId, accessKeySecret);<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> new WaitForSeconds(<span class="hljs-number">0.5</span>f);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="6"><li><a href="https://github.com/GlitchEnzo/NuGetForUnity/releases">NuGetForUnity</a>下载,打开unity安装</li><li><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1657198880062-c88f0c97-4396-42c9-99aa-e14b237a35ac.png" alt="img"></li><li>搜索 Open api c#所需sdk,&#x2F;AlibabaCloud.SDK.Iot20180120&#x2F;进行安装,有报错所需的cdk,搜索安装即可</li></ol><p><img src="C:/Users/23236/AppData/Roaming/Typora/typora-user-images/image-20220802220821773.png" alt="image-20220802220821773"></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>物联网</tag>
      
      <tag>c#</tag>
      
      <tag>api</tag>
      
      <tag>unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记_进阶</title>
    <link href="/2022/07/04/Java%E7%AC%94%E8%AE%B0_%E8%BF%9B%E9%98%B6/"/>
    <url>/2022/07/04/Java%E7%AC%94%E8%AE%B0_%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaSE进阶"><a href="#JavaSE进阶" class="headerlink" title="JavaSE进阶"></a>JavaSE进阶</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="static-修饰成员变量"><a href="#static-修饰成员变量" class="headerlink" title="static 修饰成员变量"></a>static 修饰成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//static 修饰的静态成员变量,可被共享</span><br>    <span class="hljs-comment">//public 公开的,共享</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">onlineNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//不需new对象,可以直接类名.变量名调用</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticFieldDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(User.onlineNumber);<span class="hljs-comment">//可被直接调用,类名.变量名</span><br>       <span class="hljs-comment">//不推荐👇</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">I</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        System.out.println(I.onlineNumber);<span class="hljs-comment">//也可被对象名.变量名调用(不推荐),可直接类名调用</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625124627484.png" alt="image-20220625124627484" style="zoom: 67%;" /><h3 id="static-修饰成员方法"><a href="#static-修饰成员方法" class="headerlink" title="static 修饰成员方法"></a>static 修饰成员方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-comment">//实例成员变量</span><br>    <span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-comment">//静态成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span> age1, <span class="hljs-type">int</span> age2)</span> &#123;<br>        <span class="hljs-comment">//name = &quot;123&quot;;静态成员方法,不可直接访问变量,可以新建对象调用,👇</span><br>        <span class="hljs-comment">//Student student = new Student();</span><br>        <span class="hljs-comment">//student.name = &quot;123&quot;;</span><br>        <span class="hljs-keyword">return</span> age1 &gt; age2 ? age1 : age2;<br>    &#125;<br><span class="hljs-comment">//实例方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br><span class="hljs-comment">//运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//类名.静态成员方法</span><br>        System.out.println(Student.getMax(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>));<br>        <span class="hljs-comment">//同一个类中,访问静态成员方法,类名可以省略不写,上下写法结果一样</span><br>        System.out.println(getMax(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>));<br><br>        <span class="hljs-comment">//study()//报错,实例方法只能从new对象调用</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        i.name = <span class="hljs-string">&quot;000&quot;</span>;<br>        i.study();<span class="hljs-comment">//正确写法,对象.方法名</span><br><br>        <span class="hljs-comment">//对象.静态方法</span><br>        System.out.println(i.getMax(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>));<span class="hljs-comment">//可以从对象访问静态方法,不推荐</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-成员的方法的分类和访问是什么样的"><a href="#1-成员的方法的分类和访问是什么样的" class="headerlink" title="1.成员的方法的分类和访问是什么样的?"></a>1.成员的方法的分类和访问是什么样的?</h4><ul><li><h5 id="静态成员方法-有-static修饰-属于类和对象共享"><a href="#静态成员方法-有-static修饰-属于类和对象共享" class="headerlink" title="静态成员方法(有 static修饰,属于类和对象共享)"></a>静态成员方法(有 static修饰,属于类和对象<font color='red'>共享</font>)</h5><ul><li><h5 id="访问格式"><a href="#访问格式" class="headerlink" title="访问格式:"></a>访问格式:</h5></li></ul><blockquote><p>类名.静态成员方法</p><p>对象.静态成员方法(不推荐)</p></blockquote></li><li><h5 id="实例成员方法-无static修饰-属于对象"><a href="#实例成员方法-无static修饰-属于对象" class="headerlink" title="实例成员方法(无static修饰,属于对象)"></a>实例成员方法(无static修饰,属于对象)</h5><ul><li><h5 id="访问格式-1"><a href="#访问格式-1" class="headerlink" title="访问格式:"></a>访问格式:</h5></li></ul><blockquote><p>对象.实例成员方法</p></blockquote></li></ul><h4 id="2-使用场景分别是什么样的"><a href="#2-使用场景分别是什么样的" class="headerlink" title="2.使用场景分别是什么样的?"></a>2.使用场景分别是什么样的?</h4><ul><li><h5 id="表示对象自己的行为的-且方法中需要直接访问实例成员-则该方法必须申明成实例方法"><a href="#表示对象自己的行为的-且方法中需要直接访问实例成员-则该方法必须申明成实例方法" class="headerlink" title="表示对象自己的行为的,且方法中需要直接访问实例成员,则该方法必须申明成实例方法."></a>表示对象自己的行为的,且方法中需要直接访问实例成员,则该方法必须申明成<font color='red'>实例方法</font>.</h5></li><li><h5 id="如果该方法是以执行一个通用功能为目的-或者需要方便访问-则可以申明成静态方法"><a href="#如果该方法是以执行一个通用功能为目的-或者需要方便访问-则可以申明成静态方法" class="headerlink" title="如果该方法是以执行一个通用功能为目的,或者需要方便访问,则可以申明成静态方法."></a>如果该方法是以执行一个<font color='red'>通用功能为目的</font>,或者需要方便访问,则可以申明成<font color='red'>静态方法</font>.</h5></li></ul><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><h5 id="静态方法只能访问静态成员-不可以直接访问实例成员-需要新建对象调用"><a href="#静态方法只能访问静态成员-不可以直接访问实例成员-需要新建对象调用" class="headerlink" title="静态方法只能访问静态成员,不可以直接访问实例成员,需要新建对象调用"></a>静态方法只能访问静态成员,不可以直接访问实例成员,需要新建对象调用</h5></li><li><h5 id="实例方法可以访问静态的成员-也可以访问实例成员-因为实例方法只能新建对象调用-所以访问实例成员是默认为当前对象了-已经被包含"><a href="#实例方法可以访问静态的成员-也可以访问实例成员-因为实例方法只能新建对象调用-所以访问实例成员是默认为当前对象了-已经被包含" class="headerlink" title="实例方法可以访问静态的成员,也可以访问实例成员,因为实例方法只能新建对象调用,所以访问实例成员是默认为当前对象了,已经被包含"></a>实例方法可以访问静态的成员,也可以访问实例成员,因为<font color='red'>实例方法只能新建对象调用,所以访问实例成员是默认为当前对象</font>了,已经被包含</h5></li><li><h5 id="静态方法中不可以出现this关键字-this代表当前对象-静态调用无需创建对象"><a href="#静态方法中不可以出现this关键字-this代表当前对象-静态调用无需创建对象" class="headerlink" title="静态方法中不可以出现this关键字(this代表当前对象,静态调用无需创建对象)"></a>静态方法中不可以出现this关键字(this代表当前对象,静态调用无需创建对象)</h5></li></ul><h4 id="总结-静态无需创建对象就可以调用-类名-静态方法-x2F-变量-实例则需要先创建对象再由对象进行调用"><a href="#总结-静态无需创建对象就可以调用-类名-静态方法-x2F-变量-实例则需要先创建对象再由对象进行调用" class="headerlink" title="总结:静态无需创建对象就可以调用,类名.静态方法&#x2F;变量,实例则需要先创建对象再由对象进行调用"></a><font color='red'>总结:静态无需创建对象就可以调用,类名.静态方法&#x2F;变量,实例则需要先创建对象再由对象进行调用</font></h4><h3 id="static-工具类"><a href="#static-工具类" class="headerlink" title="static 工具类"></a>static 工具类</h3><ul><li><h5 id="定义及优点"><a href="#定义及优点" class="headerlink" title="定义及优点"></a>定义及优点</h5><ul><li><h5 id="内部都是一些静态方法-每个方法完成一个功能"><a href="#内部都是一些静态方法-每个方法完成一个功能" class="headerlink" title="内部都是一些静态方法,每个方法完成一个功能"></a>内部都是一些静态方法,每个方法完成一个功能</h5></li><li><h5 id="一次编写-处处可用-提高易用性"><a href="#一次编写-处处可用-提高易用性" class="headerlink" title="一次编写,处处可用,提高易用性."></a>一次编写,处处可用,提高易用性.</h5></li></ul></li><li><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><ul><li><h5 id="工具类的构造器私有化"><a href="#工具类的构造器私有化" class="headerlink" title="工具类的构造器私有化"></a>工具类的构造器<font color='red'>私有化</font></h5></li></ul></li><li><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><ul><li>验证码工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">kongUtil</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">kongUtil</span><span class="hljs-params">()</span>&#123;&#125;<span class="hljs-comment">//工具类都是静态方法,直接用类名即可,因此,工具类无需创建方法,因此将工具类的构造器私有</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">creatrVerifyCode</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-comment">//验证码</span><br>    <span class="hljs-comment">//定义变量记住验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br>    <span class="hljs-comment">//定义随机数</span><br>    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-comment">//生成5位验证码</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> r.nextInt(data.length());<span class="hljs-comment">//定义随机数范围为字符长度</span><br>        code += data.charAt(index);<span class="hljs-comment">//取出随机数对应字符累加</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> code;<br>&#125;<span class="hljs-comment">//使用时直接/kongUtil.creatrVerifyCode(5)/五位验证码</span><br></code></pre></td></tr></table></figure><ul><li>数组工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ArrayUtil</span><span class="hljs-params">()</span> &#123;<br>    &#125;<span class="hljs-comment">//私有工具类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-comment">//校验</span><br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//返回内容</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            result += (i == arr.length - <span class="hljs-number">1</span> ? arr[i] : arr[i] + <span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        result += <span class="hljs-string">&quot;]&quot;</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<span class="hljs-comment">//输出数组的值</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="static-代码块"><a href="#static-代码块" class="headerlink" title="static 代码块"></a>static 代码块</h3><ul><li>静态代码块<ul><li>格式:static{}</li><li>特点:需要通过static关键字修饰,随着类的加载而加载,并且自动触发,只执行一次</li><li>使用场景:在类加载的时候做一些静态数据初始化的操作,以便后续使用</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-comment">//会先输出&quot;静态代码块&quot;//新建对象也会执行,但多次新建对象只会执行一次</span><br></code></pre></td></tr></table></figure><ul><li>静态代码块案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticText3</span> &#123;<br>    <span class="hljs-comment">/** 扑克牌</span><br><span class="hljs-comment">     * 定义静态集合,只加载一次.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;String&gt; cards = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">/**静态代码块</span><br><span class="hljs-comment">     * 在程序运行main前,将54张牌放入</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//定义数组存储点数(类型确定,个数确定)</span><br>        String[] sizes = &#123;<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;10&quot;</span>,<span class="hljs-string">&quot;J&quot;</span>,<span class="hljs-string">&quot;Q&quot;</span>,<span class="hljs-string">&quot;K&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>&#125;;<br>        String[] colors = &#123;<span class="hljs-string">&quot;♥&quot;</span>,<span class="hljs-string">&quot;♠&quot;</span>,<span class="hljs-string">&quot;♦&quot;</span>,<span class="hljs-string">&quot;♣&quot;</span>&#125;;<br>        <span class="hljs-comment">//遍历点数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sizes.length; i++) &#123;<br>            <span class="hljs-comment">//遍历花色</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; colors.length; j++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">card</span> <span class="hljs-operator">=</span> colors[j]+sizes[i];<br>                cards.add(card);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//加入大小王</span><br>                cards.add(<span class="hljs-string">&quot;小王&quot;</span>);<br>                cards.add(<span class="hljs-string">&quot;大王&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(cards);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>构造代码块(用的少)<ul><li>格式:{}</li><li>特点:每次创建对象,调用构造器时,都会执行该代码块中的代码,并且在构造器执行前执行</li><li>使用场景:初始化实例资源</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>        System.out.println(<span class="hljs-string">&quot;构造代码块被执行&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">StaticDemo1</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;无参数构造器被执行&quot;</span>);<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StaticDemo1</span> <span class="hljs-variable">staticDemo1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticDemo1</span>();<br>    &#125;<span class="hljs-comment">//新建对象时会先输出构造代码块再执行构造器</span><br></code></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li><h5 id="饿汉单例模式"><a href="#饿汉单例模式" class="headerlink" title="饿汉单例模式"></a>饿汉单例模式</h5></li></ul><blockquote><p>提前创建好对象,使用时直接拿</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 饿汉单例模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleinstance</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 饿汉单例模式是在获取对象前,对象已经提前准备好一个</span><br><span class="hljs-comment">     * 对象只能是一个,所以定义静态成员变量 使用时直接(类名.创建的对象名)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleinstance</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleinstance</span>();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器私有化,将其隐藏不能创建对象.只能调用一个我们创建的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleinstance</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>&#125;<span class="hljs-comment">//调用时直接(Singleinstance 变量名 = Singleinstance.instance)//静态成员变量可以直接调用</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="懒汉单例模式"><a href="#懒汉单例模式" class="headerlink" title="懒汉单例模式"></a>懒汉单例模式</h5></li></ul><blockquote><p>在真正需要该对象的时候,才去创建一个对象(延迟加载对象)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleinstance2</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2.定义静态成员变量储存一个对象</span><br><span class="hljs-comment">     * 直加载一次,只有一份</span><br><span class="hljs-comment">     * 注意:私有化变量,避免直接取到空</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleinstance2 instance;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 3.提供静态方法,对外返回对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleinstance2 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//初始为空,第一次调用,则创建对象返回</span><br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleinstance2</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<span class="hljs-comment">//后续再进行调用,不会创建,直接返回第一次创建得的地址</span><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1.构造器私有化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleinstance2</span><span class="hljs-params">()</span>&#123;<br>    &#125;<span class="hljs-comment">//调用对象直接(Singleinstance2 a = Singleinstance2.getInstance())</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承-excents"><a href="#继承-excents" class="headerlink" title="继承 excents"></a>继承 excents</h2><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624223548987.png" alt="image-20220624223548987" style="zoom:50%;" /><ul><li>父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-comment">//定义父类方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>子类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类继承父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        s.run();<span class="hljs-comment">//创建子类对象,可以直接调用方法.</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><font color='cornflowerblue'>特点</font></h3><ul><li><h5 id="子类可以继承父类的属性和行为-但是不能继承父类的构造器"><a href="#子类可以继承父类的属性和行为-但是不能继承父类的构造器" class="headerlink" title="子类可以继承父类的属性和行为,但是不能继承父类的构造器"></a>子类可以继承父类的属性和行为,但是不能继承父类的构造器</h5></li><li><h5 id="java是单继承模式-一个类只能继承一个直接父类"><a href="#java是单继承模式-一个类只能继承一个直接父类" class="headerlink" title="java是单继承模式:一个类只能继承一个直接父类"></a>java是单继承模式:一个类只能继承一个直接父类</h5></li><li><h5 id="java不支持多继承-但是支持多层继承-子类可以继承父类的父类等-有相同名称的会就近继承父类"><a href="#java不支持多继承-但是支持多层继承-子类可以继承父类的父类等-有相同名称的会就近继承父类" class="headerlink" title="java不支持多继承,但是支持多层继承(子类可以继承父类的父类等,有相同名称的会就近继承父类)"></a>java不支持多继承,但是支持多层继承(子类可以继承父类的父类等,<font color='red'>有相同名称的会就近继承父类</font>)</h5></li><li><h5 id="java中所有的类都是Object类的子类-要么直接继承Object-要么默认继承-要么间接继承-Object祖宗类"><a href="#java中所有的类都是Object类的子类-要么直接继承Object-要么默认继承-要么间接继承-Object祖宗类" class="headerlink" title="java中所有的类都是Object类的子类,要么直接继承Object,要么默认继承,要么间接继承,(Object祖宗类)"></a>java中所有的类都是Object类的子类,要么直接继承Object,要么默认继承,要么间接继承,(Object祖宗类)</h5></li></ul><h5 id="在子类方法中访问成员-成员变量-成员方方法-满足-就近原则"><a href="#在子类方法中访问成员-成员变量-成员方方法-满足-就近原则" class="headerlink" title="在子类方法中访问成员(成员变量,成员方方法)满足:就近原则"></a>在子类方法中访问成员(成员变量,成员方方法)满足:<font color='red'>就近原则</font></h5><h5 id="若子父类中-出现重名的成员-会优先使用子类-若要在子类中使用父类-可以通过super关键字-super-父类成员变量-x2F-方法"><a href="#若子父类中-出现重名的成员-会优先使用子类-若要在子类中使用父类-可以通过super关键字-super-父类成员变量-x2F-方法" class="headerlink" title="若子父类中,出现重名的成员.会优先使用子类,若要在子类中使用父类,可以通过super关键字(super.父类成员变量&#x2F;方法)"></a>若子父类中,出现重名的成员.会优先使用子类,若要在<font color='red'>子类中使用父类,可以通过super关键字(super.父类成员变量&#x2F;方法)</font></h5><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a><font color='cornflowerblue'>方法重写</font></h3><ul><li>@Overridr(重写注解)</li><li>注意事项<ul><li>方法重写的名称与形参列表必须与被重写的方法一模一样</li><li>私有方法不能被重写</li><li>子类重写方法时,访问权限必须大于等于父类</li><li>子类不能重写父类的静态方法,重写会报错</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">newold</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">newold</span>();<br>i.newold();<span class="hljs-comment">//输出123 456</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">newold</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">old</span> &#123;<br>    <span class="hljs-comment">//子类方法重写</span><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//重写校验注解,提高程序可读性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">old1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>.old1();<span class="hljs-comment">//调用父类方法</span><br>        System.out.println(<span class="hljs-string">&quot;456&quot;</span>);<br>    &#125;<br>        &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">old</span>&#123;<br>    <span class="hljs-comment">//父类方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">old1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="子类继承父类后-构造器的特点"><a href="#子类继承父类后-构造器的特点" class="headerlink" title="子类继承父类后 构造器的特点"></a><font color='cornflowerblue'>子类继承父类后 构造器的特点</font></h3><ul><li>子类中所有构造器默认都会先访问父类无参的构造器,再执行自己</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-comment">//默认有super();,调用父类无参构造器</span><br>        System.out.println(<span class="hljs-string">&quot;子类无参数构造器被调用&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>         <span class="hljs-comment">//默认有super();,调用父类无参构造器</span><br>        System.out.println(<span class="hljs-string">&quot;子类有参数构造器被调用&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//父类无参数构造器</span><br>        System.out.println(<span class="hljs-string">&quot;父类无参数被调用&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//运行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//无参数被调用</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//父类无参,子类有参数被调用</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="子类构造器访父类有参数构造器"><a href="#子类构造器访父类有参数构造器" class="headerlink" title="子类构造器访父类有参数构造器"></a><font color='cornflowerblue'>子类构造器访父类有参数构造器</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<span class="hljs-comment">//新建有参数构造器</span><br>        <span class="hljs-built_in">super</span>(name,age);<span class="hljs-comment">//参数给父类有参数构造器</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-comment">//父类参数构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> age;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<span class="hljs-built_in">this</span>.age = age;&#125;<br>&#125;<br><span class="hljs-comment">//运行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;名称&quot;</span>,<span class="hljs-number">12</span>);<br>        System.out.println(t1.getName()+ <span class="hljs-string">&quot;+&quot;</span>+  t1.getAge() );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>this(),调用本类其他构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String schoolName;<br><span class="hljs-comment">//若学生不填写学校,默认这个对象的学校是黑马</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-comment">//借用本类兄弟构造器</span><br>        <span class="hljs-built_in">this</span>(name,<span class="hljs-string">&quot;黑马程序员&quot;</span>);<br>    &#125;<span class="hljs-comment">//有参数构造器  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, String schoolName)</span> &#123; <br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.schoolName = schoolName;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;&#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSchoolName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> schoolName;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSchoolName</span><span class="hljs-params">(String schoolName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.schoolName = schoolName;&#125;<br>&#125;<span class="hljs-comment">//运行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//只填写姓名,默认把学校补上</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;姓名:&quot;</span> + i.getName() + <span class="hljs-string">&quot;   学校:&quot;</span> + i.getSchoolName());<span class="hljs-comment">//默认加上学校</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-string">&quot;清华大学&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;姓名:&quot;</span> + ii.getName() + <span class="hljs-string">&quot;   学校:&quot;</span> + ii.getSchoolName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625123737885.png" alt="image-20220625123737885"></p><blockquote><p>子类用this调用本类其他构造器时,其他构造器已经默认调用父类无参构造器&#x2F;super()&#x2F;了,所以二者不共存</p></blockquote><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.kong.d1_package.zibao.Student;<span class="hljs-comment">//导入的包</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//相同包下的类可以直接访问//类名.变量名</span><br>        System.out.println(User.onlineNumber);<br>        <span class="hljs-comment">//不同包下的类,必须先导包才能访问</span><br>        System.out.println(Student.a);<br>        <span class="hljs-comment">//如果这个类中使用不同包下相同的类名,此时默认只能导入一个类的包,另一个要使用全名访问.</span><br>        System.out.println(com.kong.d1_package.zibao2.Student.a);<span class="hljs-comment">//使用全名</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><ul><li>权限修饰符:是用来控制一个成员能够被访问的范围。</li><li>可以修饰成员变量，方法，构造器，内部类，不同权限修饰符修饰的成员能够被访问的范围将受到限制。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-comment">//私有的private:只能本类中访问</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">privateMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;private&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//缺省的,不填写:只能本类中,同包下其他类访问(包访问权限)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Method</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;缺省&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//protected:本类,同包的其他类,其他包的子类</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">protectedMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;protected&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//public:本类,同包的其他类,其他包的子类,其他包的无关类中.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">publicMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;public&quot;</span>);<br>    &#125;<br><span class="hljs-comment">//本类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<span class="hljs-comment">//本类下都可访问</span><br>        <span class="hljs-type">Fu</span> <span class="hljs-variable">fu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fu</span>();<br>        fu.privateMethod();<br>        fu.Method();<br>        fu.protectedMethod();<br>        fu.publicMethod();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//同一个包下的不同类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Fu</span> <span class="hljs-variable">fu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fu</span>();<br>        <span class="hljs-comment">//只有private私有的不可访问</span><br>        fu.Method();<br>        fu.protectedMethod();<br>        fu.publicMethod();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//其他包的无关类(未继承)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Fu</span> <span class="hljs-variable">fu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fu</span>();<br>        <span class="hljs-comment">//只能访问公开的</span><br>        fu.publicMethod();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//其他包的子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Fu</span> <span class="hljs-variable">fu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fu</span>();<br>        fu.publicMethod();<span class="hljs-comment">//创建父类对象访问</span><br>        <span class="hljs-comment">//fu.protectedMethod();报错</span><br>        <span class="hljs-type">Zi</span> <span class="hljs-variable">zi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zi</span>();<br>        zi.protectedMethod();<span class="hljs-comment">//只能新建子类对象访问</span><br>        zi.publicMethod();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625125129827.png" alt="image-20220625125129827" style="zoom: 67%;" /><ul><li>成员变量一般私有</li><li>方法一般公开</li><li>如果希望该类成员只希望本类访问,使用private修饰</li><li>如果该成员只希望本类,同一个包下的其他类和子类访问,使用protected修饰.</li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li>关键字是最终的意思,可以修饰(类,方法,变量)</li><li>修饰类:表明该类是最终类,不能被继承</li><li>修饰方法:表明该方法是最终方法,不能被改写</li><li>修饰变量:表明该变量第一次赋值后,不能再次被赋值(有且仅能被赋值一次)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1 final修饰  类,不能被继承</span><br><span class="hljs-comment">//class Dog extends Animal&#123;//报错不能继承</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<span class="hljs-comment">//final修饰父类</span><br>&#125;<br><span class="hljs-comment">//2 final修饰  方法,方法不能被重写</span><br><span class="hljs-comment">//class Student extends People&#123;</span><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public void eat()&#123; //报错,不能被重写</span><br><span class="hljs-comment">//        System.out.println(&quot;456&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<span class="hljs-comment">//父类方法</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//3 final修饰  局部变量</span><br><span class="hljs-comment">//        final int a = 1;</span><br><span class="hljs-comment">//        a = 2;//不能被更改</span><br><span class="hljs-comment">//2 final 修饰静态成员变量</span><br><span class="hljs-comment">//        schoolName = &quot;123&quot;;不能被更改</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">double</span> z)</span> &#123;<br><span class="hljs-comment">//        z = 0.99;//不能被赋值相当于第二次赋值</span><br>    &#125;<br><span class="hljs-comment">//4 final 修饰  静态成员变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">schoolName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;安职&quot;</span>;<span class="hljs-comment">//创建即赋值</span><br><span class="hljs-comment">//5 final修饰  实例成员变量(几乎不用),创建每个对象,名字都不变</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;合铁大&quot;</span>;<span class="hljs-comment">//创建即赋值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项</p><ul><li>final修饰的变量是基本类型,变量存储的数据值不能发生改变</li><li>final修饰的变量是引用类型,变量存储的地址值不能发生改变,但是地址指向的对象内容是可以发生变化的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">fangfa</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">fangfa</span>(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-comment">//创建对象</span><br><span class="hljs-comment">//       aa = null; 报错,对象不能第二次修改,地址不能变化</span><br>        aa.setName(<span class="hljs-string">&quot;456&quot;</span>);<span class="hljs-comment">//可以修改地址指向的对象内容</span><br>        System.out.println(aa.getName());<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li><h5 id="常量是使用了public-static-final修饰的成员变量，必须有初始化值，而且执行的过程中其值不能被改变。"><a href="#常量是使用了public-static-final修饰的成员变量，必须有初始化值，而且执行的过程中其值不能被改变。" class="headerlink" title="常量是使用了public static final修饰的成员变量，必须有初始化值，而且执行的过程中其值不能被改变。"></a>常量是使用了public static final修饰的成员变量，必须有初始化值，而且执行的过程中其值不能被改变。</h5></li><li><h5 id="常量的作用和好处-可以用于做系统的配置信息，方便程序的维护，同时也能提高可读性。"><a href="#常量的作用和好处-可以用于做系统的配置信息，方便程序的维护，同时也能提高可读性。" class="headerlink" title="常量的作用和好处:可以用于做系统的配置信息，方便程序的维护，同时也能提高可读性。"></a>常量的作用和好处:可以用于做系统的配置信息，方便程序的维护，同时也能提高可读性。</h5></li><li><h5 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//常量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCHOOL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;安徽职业技术学院&quot;</span>;<span class="hljs-comment">//变量名大写多个单词下划线连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-comment">//变量名大写多个单词下划线连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PASS_WORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<span class="hljs-comment">//变量名大写多个单词下划线连接</span><br></code></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li><p>格式</p><p>修饰符 enum 枚举名称 {</p><p>​第一行都是罗列枚举类实例的名称</p><p>}</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//枚举</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span>  <span class="hljs-title class_">EnumDemo2</span> &#123;<br>    <span class="hljs-comment">//第一行必须罗列枚举类的对象名称,建议大写</span><br>    SPRING,SUMMER,AUTUMN,WINTER;<br>&#125;<br><span class="hljs-comment">//调用枚举</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Enum</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(EnumDemo2 enumDemo2)</span>&#123;<span class="hljs-comment">//创建调用枚举的方法</span><br>        <span class="hljs-keyword">switch</span> (enumDemo2)&#123;<br>            <span class="hljs-keyword">case</span> AUTUMN:<br>                System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SPRING:<br>                System.out.println(<span class="hljs-string">&quot;2&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SUMMER:<br>                System.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> WINTER:<br>                System.out.println(<span class="hljs-string">&quot;4&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">a</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Enum.Student(EnumDemo2.SPRING);<span class="hljs-comment">//调用上面的方法,传入参数SPRING,输出2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>枚举类都是继承了枚举类型:java.lang.Enum</li><li>枚举都是最终类，不可以被继承。</li><li>构造器的构造器都是私有的，枚举对外不能创建对象。</li><li>枚举类的第一行默认都是罗列枚举对象的名称的。枚举类相当于是多例模式。</li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>抽象类和抽象方法<ul><li>都是用abstract修饰;抽象方法只有方法签名,不能写方法体</li><li>一个类中定义了抽象方法,这个类必须声明成抽象类</li></ul></li><li>抽象类的基本作用<ul><li>作为父类,被继承,要求子类必须完成</li></ul></li><li>继承抽象类注意事项<ul><li>一个类如果继承了抽象类,那么这个类必须重写完抽象类的全部方法,否则这个类也必须定义成抽象类.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象类和抽象方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">//抽象方法:有abstract修饰,不能声明方法体</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;必须重写抽象方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="特征和注意事项"><a href="#特征和注意事项" class="headerlink" title="特征和注意事项"></a>特征和注意事项</h3><ul><li><h5 id="类有的成员（成员变量、方法、构造器）抽象类都具备"><a href="#类有的成员（成员变量、方法、构造器）抽象类都具备" class="headerlink" title="类有的成员（成员变量、方法、构造器）抽象类都具备"></a>类有的成员（成员变量、方法、构造器）抽象类都具备</h5></li><li><h5 id="抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类"><a href="#抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类" class="headerlink" title="抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类"></a>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</h5></li><li><h5 id="一个类继承了抽象类必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类"><a href="#一个类继承了抽象类必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类" class="headerlink" title="一个类继承了抽象类必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类"></a>一个类继承了抽象类必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类</h5></li><li><h5 id="不能用abstract修饰变量、代码块、构造器"><a href="#不能用abstract修饰变量、代码块、构造器" class="headerlink" title="不能用abstract修饰变量、代码块、构造器"></a>不能用abstract修饰变量、代码块、构造器</h5></li><li><h5 id="最重要的特征-得到了抽象方法，失去了创建对象的能力（有得有失"><a href="#最重要的特征-得到了抽象方法，失去了创建对象的能力（有得有失" class="headerlink" title="最重要的特征:得到了抽象方法，失去了创建对象的能力（有得有失)"></a>最重要的特征:得到了抽象方法，<font color='red'>失去了创建对象的能力</font>（有得有失)</h5></li></ul><h3 id="final和abstract"><a href="#final和abstract" class="headerlink" title="final和abstract"></a>final和abstract</h3><ul><li><h5 id="互斥关系"><a href="#互斥关系" class="headerlink" title="互斥关系"></a>互斥关系</h5></li><li><h5 id="abstract定义的抽象类作为模板让子类继承-final定义的类不能继承"><a href="#abstract定义的抽象类作为模板让子类继承-final定义的类不能继承" class="headerlink" title="abstract定义的抽象类作为模板让子类继承,final定义的类不能继承"></a>abstract定义的抽象类作为模板让子类继承,final定义的类不能继承</h5></li><li><h5 id="抽象方法定义通用功能让子类重写-final定义的方法子类不能重写"><a href="#抽象方法定义通用功能让子类重写-final定义的方法子类不能重写" class="headerlink" title="抽象方法定义通用功能让子类重写,final定义的方法子类不能重写"></a>抽象方法定义通用功能让子类重写,final定义的方法子类不能重写</h5></li></ul><h2 id="模板方法模式-可以多个子类继承一个父类"><a href="#模板方法模式-可以多个子类继承一个父类" class="headerlink" title="模板方法模式(可以多个子类继承一个父类)"></a>模板方法模式(可以多个子类继承一个父类)</h2><p>作文题目和结尾一样,中间不同,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<span class="hljs-comment">//加上abstract</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开头和结尾定义模板方法</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">writeMain</span><span class="hljs-params">()</span>;<span class="hljs-comment">//抽象方法,强制子类调用//正文部分</span><br>    <span class="hljs-comment">//定义方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//加上final防止子类重写</span><br>        System.out.println(<span class="hljs-string">&quot;作文题目&quot;</span>);<br>        <span class="hljs-comment">//正文(每个子类都需要写,但不同)</span><br>        <span class="hljs-comment">//定义成抽象方法,交给子类完成</span><br>        System.out.println(writeMain());<span class="hljs-comment">//输出正文部分</span><br>        System.out.println(<span class="hljs-string">&quot;作文结尾&quot;</span>);<br>    &#125;<br>  <br>&#125;<br><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentChild</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">writeMain</span><span class="hljs-params">()</span> &#123;;<span class="hljs-comment">//调用父类抽象方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;正文部分&quot;</span>;<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//子类2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentMiddle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">writeMain</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;中学生作文正文&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StudentChild</span> <span class="hljs-variable">studentChild</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentChild</span>();<span class="hljs-comment">//子类</span><br>        studentChild.write();<br><br>        <span class="hljs-type">StudentMiddle</span> <span class="hljs-variable">studentMiddle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentMiddle</span>();<span class="hljs-comment">//子类2</span><br>        studentMiddle.write();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="提高代码复用性"><a href="#提高代码复用性" class="headerlink" title="提高代码复用性"></a>提高代码复用性</h5></li><li><h5 id="模板方法已经定义了通用结构，模板方法不能确定的部分定义成抽象方法，交给子类实现，因此，使用者只需要关心自己需要实现的功能即可"><a href="#模板方法已经定义了通用结构，模板方法不能确定的部分定义成抽象方法，交给子类实现，因此，使用者只需要关心自己需要实现的功能即可" class="headerlink" title="模板方法已经定义了通用结构，模板方法不能确定的部分定义成抽象方法，交给子类实现，因此，使用者只需要关心自己需要实现的功能即可."></a>模板方法已经定义了通用结构，模板方法不能确定的部分定义成抽象方法，交给子类实现，因此，使用者只需要关心自己需要实现的功能即可.</h5></li></ul><h2 id="接口-一个实现类使用多个接口"><a href="#接口-一个实现类使用多个接口" class="headerlink" title="接口(一个实现类使用多个接口)"></a>接口(一个实现类使用多个接口)</h2><ul><li><h5 id="接口用来被类实线-implements-的-实现接口的类称为实现类-实现类可以理解成所谓的子类"><a href="#接口用来被类实线-implements-的-实现接口的类称为实现类-实现类可以理解成所谓的子类" class="headerlink" title="接口用来被类实线(implements)的,实现接口的类称为实现类.实现类可以理解成所谓的子类."></a>接口用来被类实线(implements)的,实现接口的类称为<font color='red'>实现类</font>.实现类可以理解成所谓的子类.</h5></li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625125849357.png" alt="image-20220625125849357" style="zoom: 50%;" /><ul><li><h5 id="从上面可以看出-接口可以被类单实现-也可以被多实现"><a href="#从上面可以看出-接口可以被类单实现-也可以被多实现" class="headerlink" title="从上面可以看出,接口可以被类单实现,也可以被多实现."></a>从上面可以看出,<font color='red'>接口可以被类单实现,也可以被多实现</font>.</h5></li></ul><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><h5 id="一个类实现接口-必须重写完全部接口的全部抽象方法-否则这个类需要定义成抽象类"><a href="#一个类实现接口-必须重写完全部接口的全部抽象方法-否则这个类需要定义成抽象类" class="headerlink" title="一个类实现接口,必须重写完全部接口的全部抽象方法,否则这个类需要定义成抽象类."></a>一个类实现接口,必须重写完全部接口的全部抽象方法,否则这个类需要定义成抽象类.</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 声明一个接口:体现一种规范,规范一定是公开的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterfaceDemo</span> &#123;<span class="hljs-comment">//加interface标识接口</span><br>    <span class="hljs-comment">//接口中的成分特点:JDK 8之前接口只能有抽象方法和常量.</span><br>    <span class="hljs-comment">// 1.常量</span><br>    <span class="hljs-comment">//接口体现规范思想,规范默认公开,所以代码层面,public static final可以省略不写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;王小明&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">NAME2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小明&quot;</span>;<br>    <span class="hljs-comment">// 2.抽象方法</span><br>    <span class="hljs-comment">//同理//接口体现规范思想,规范默认公开,所以代码层面,public abstract可以省略不写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<span class="hljs-comment">//不写不会报错</span><br>&#125;<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义接口1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义接口2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SportMan</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现类//implements//可以实现多个接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SportMan</span>,People&#123;<span class="hljs-comment">//调用两个接口</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String eat;<br>    <span class="hljs-keyword">private</span> String play;<br><span class="hljs-comment">//定义参数化构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Man</span><span class="hljs-params">(String name, String eat, String play)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.eat = eat;<br>        <span class="hljs-built_in">this</span>.play = play;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPlay</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> play;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPlay</span><span class="hljs-params">(String play)</span> &#123;<br>        <span class="hljs-built_in">this</span>.play = play;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> eat;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEat</span><span class="hljs-params">(String eat)</span> &#123;<br>        <span class="hljs-built_in">this</span>.eat = eat;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><span class="hljs-comment">//使用接口</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;跑步&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;喜欢吃&quot;</span> + getEat());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;喜欢玩&quot;</span>+getPlay());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//新建实现类对象</span><br>        <span class="hljs-type">Man</span> <span class="hljs-variable">man</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>(<span class="hljs-string">&quot;王小明&quot;</span>,<span class="hljs-string">&quot;炸鸡&quot;</span>,<span class="hljs-string">&quot;电脑&quot;</span>);<span class="hljs-comment">//参数化构造器</span><br>        <span class="hljs-comment">//调用方法</span><br>        man.eat();<br>        man.run();<br>        man.play();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出</span><br>王小明喜欢吃炸鸡<br>王小明跑步<br>王小明喜欢玩电脑<br></code></pre></td></tr></table></figure><ul><li><h5 id="类和类-单继承"><a href="#类和类-单继承" class="headerlink" title="类和类:单继承"></a>类和类:单继承</h5></li><li><h5 id="类和接口-多实现"><a href="#类和接口-多实现" class="headerlink" title="类和接口:多实现"></a>类和接口:多实现</h5></li><li><h5 id="接口和接口-多继承-一个接口可以同时继承多个接口"><a href="#接口和接口-多继承-一个接口可以同时继承多个接口" class="headerlink" title="接口和接口:多继承,一个接口可以同时继承多个接口"></a>接口和接口:多继承,一个接口可以同时继承多个接口</h5></li></ul><h3 id="接口多继承"><a href="#接口多继承" class="headerlink" title="接口多继承"></a>接口多继承</h3><ul><li>规范合并,整合多个接口为同一个接口,便于子类实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Law</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rule</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>接口同时继承多个接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口3</span><br><span class="hljs-comment">//接口同时 继承 多个接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SportMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Law</span>,People&#123;<span class="hljs-comment">//接口3同时继承接口2和接口1</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">competition</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现类</span><br><span class="hljs-comment">//只需实现接口3,(接口3继承1,2接口)等同于同时实现接口1,2,3.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasketballMan</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SportMan</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rule</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">competition</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Jdk8新增方法"><a href="#Jdk8新增方法" class="headerlink" title="Jdk8新增方法"></a>Jdk8新增方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SportManInter</span> &#123;<br>    <span class="hljs-comment">/**jdk8开始</span><br><span class="hljs-comment">     * 1 默认方法(实例方法)</span><br><span class="hljs-comment">    --必须default修饰,默认用public</span><br><span class="hljs-comment">     默认方法,接口不能创建对象,这个方法只能过继给实现类,由实现类的对象调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;跑得快&quot;</span>);<br>        <span class="hljs-comment">//方法内部调用私有方法</span><br>        go();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2 静态方法</span><br><span class="hljs-comment">     * 必须使用static修饰,默认用public修饰</span><br><span class="hljs-comment">     * 接口的静态方法必须接口名自己调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inAddr</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;java&quot;</span>);<br><span class="hljs-comment">//        go(); 接口无法调用私有方法,静态调用实例只能新建对象从对象调用,但接口无法创建对象</span><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 3 私有方法(实例方法)</span><br><span class="hljs-comment">     * jdk1.9开始支持</span><br><span class="hljs-comment">     * 必须在接口内部才能访问,外部无法访问</span><br><span class="hljs-comment">     * 私有</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始跑&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PingpongMan</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SportManInter</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//接口的默认方法(实例方法)</span><br>        <span class="hljs-type">PingpongMan</span> <span class="hljs-variable">pingpongMan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PingpongMan</span>();<br>        pingpongMan.run();<br>        <span class="hljs-comment">//接口的静态方法</span><br>        SportManInter.inAddr();<br><span class="hljs-comment">//        PingpongMan.inAddr(); 只能接口调用,实现类无法调用</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="3种方法都默认被public修饰"><a href="#3种方法都默认被public修饰" class="headerlink" title="3种方法都默认被public修饰"></a>3种方法都默认被public修饰</h5></li><li><h5 id="主要是在java源码中使用"><a href="#主要是在java源码中使用" class="headerlink" title="主要是在java源码中使用"></a>主要是在java源码中使用</h5></li></ul><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><h5 id="接口不能创建对象"><a href="#接口不能创建对象" class="headerlink" title="接口不能创建对象"></a>接口不能创建对象</h5></li><li><h5 id="一个类实现多个接口，多个接口中有同样的静态方法不冲突"><a href="#一个类实现多个接口，多个接口中有同样的静态方法不冲突" class="headerlink" title="一个类实现多个接口，多个接口中有同样的静态方法不冲突"></a>一个类实现多个接口，多个接口中有同样的静态方法不冲突</h5><ul><li><h5 id="因为接口的静态方法只能接口自己调用-实现类无法调用"><a href="#因为接口的静态方法只能接口自己调用-实现类无法调用" class="headerlink" title="因为接口的静态方法只能接口自己调用,实现类无法调用"></a>因为接口的静态方法只能接口<font color='red'>自己调用</font>,实现类无法调用</h5></li></ul></li><li><h5 id="一个类继承了父类，同时又实现了接口，父类中和接口中有同名方法，默认用父类的"><a href="#一个类继承了父类，同时又实现了接口，父类中和接口中有同名方法，默认用父类的" class="headerlink" title="一个类继承了父类，同时又实现了接口，父类中和接口中有同名方法，默认用父类的"></a>一个类继承了父类，同时又实现了接口，父类中和接口中有同名方法，默认用父类的</h5></li><li><h5 id="一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可"><a href="#一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可" class="headerlink" title="一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可"></a>一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可</h5></li><li><h5 id="一个接口继承多个接口，是没有问题的，如果多个接口中存在规范冲突则不能多继承"><a href="#一个接口继承多个接口，是没有问题的，如果多个接口中存在规范冲突则不能多继承" class="headerlink" title="一个接口继承多个接口，是没有问题的，如果多个接口中存在规范冲突则不能多继承"></a>一个接口继承多个接口，是没有问题的，如果多个接口中存在规范冲突则不能多继承</h5></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li><h5 id="同类型的对象-执行同一个行为-会表现出不同的特征"><a href="#同类型的对象-执行同一个行为-会表现出不同的特征" class="headerlink" title="同类型的对象,执行同一个行为,会表现出不同的特征."></a>同类型的对象,执行同一个行为,会表现出不同的特征.</h5></li></ul><h5 id="多态的常见形式"><a href="#多态的常见形式" class="headerlink" title="多态的常见形式"></a>多态的常见形式</h5><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625130004513.png" alt="image-20220625130004513" style="zoom:50%;" /><h5 id="多态中成员访问特点"><a href="#多态中成员访问特点" class="headerlink" title="多态中成员访问特点"></a>多态中成员访问特点</h5><ul><li><h5 id="方法调用-编译看左边-运行看右边"><a href="#方法调用-编译看左边-运行看右边" class="headerlink" title="方法调用:编译看左边,运行看右边"></a>方法调用:编译看左边,运行看右边</h5></li><li><h5 id="变量调用-编译看左边-运行也看左边-多态注重行为多态"><a href="#变量调用-编译看左边-运行也看左边-多态注重行为多态" class="headerlink" title="变量调用:编译看左边,运行也看左边(多态注重行为多态)"></a>变量调用:编译看左边,运行也看左边(多态注重行为多态)</h5></li></ul><h5 id="多态的前提"><a href="#多态的前提" class="headerlink" title="多态的前提"></a>多态的前提</h5><ul><li><h5 id="有继承-x2F-实现关系-有父类引用指向子类对象-有方法重写"><a href="#有继承-x2F-实现关系-有父类引用指向子类对象-有方法重写" class="headerlink" title="有继承&#x2F;实现关系;有父类引用指向子类对象;有方法重写."></a>有继承&#x2F;实现关系;有父类引用指向子类对象;有方法重写.</h5></li></ul><p>继承的多态形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;父类&quot;</span>;<span class="hljs-comment">//定义name为父类</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<span class="hljs-comment">//抽象类方法run</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<span class="hljs-comment">//子类继承父类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;子类&quot;</span>;<span class="hljs-comment">//定义name为子类</span><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//抽象类方法,强制改写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;抽象类盖改写&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//单独定义子类方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dog</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多态</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//正常写法</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//定义子类对象</span><br>        dog.run();<span class="hljs-comment">//111子类继承父类改写方法(抽象类)</span><br>        dog.dog();<span class="hljs-comment">//(子类方法)</span><br>        System.out.println(dog.name);<span class="hljs-comment">//输出子类name</span><br>        <span class="hljs-comment">//多态写法</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//定义父类类型的子类对象</span><br>        animal.run();<span class="hljs-comment">//111这时运行的还是子类的改写方法(抽象类)</span><br><span class="hljs-comment">//        animal.dog();无法使用子类方法</span><br>        System.out.println(animal.name);<span class="hljs-comment">//输出的为父类name</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口的多态形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;接口&quot;</span>;<span class="hljs-comment">//定义接口常量,定义即赋值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;实现类&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;实现类&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<span class="hljs-comment">//多态形式新建</span><br>        a.A();<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        System.out.println(b.name);<span class="hljs-comment">//B中的变量只能新建B类型对象输出</span><br>        System.out.println(A.name);<span class="hljs-comment">//A中只能存在常量,所以直接A.常量名</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多态的优势"><a href="#多态的优势" class="headerlink" title="多态的优势"></a>多态的优势</h3><ul><li><h5 id="在多态形式下-右边对象实现解耦合-便于扩展和维护"><a href="#在多态形式下-右边对象实现解耦合-便于扩展和维护" class="headerlink" title="在多态形式下,右边对象实现解耦合,便于扩展和维护"></a>在多态形式下,右边对象实现解耦合,便于扩展和维护</h5></li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625130050256.png" alt="image-20220625130050256" style="zoom:50%;" /><ul><li><h5 id="定义方法的时候-使用父类型作为参数-该方法就可以接收父类的一切子类对象-体现出多态的扩展性与便利"><a href="#定义方法的时候-使用父类型作为参数-该方法就可以接收父类的一切子类对象-体现出多态的扩展性与便利" class="headerlink" title="定义方法的时候,使用父类型作为参数,该方法就可以接收父类的一切子类对象,体现出多态的扩展性与便利."></a>定义方法的时候,使用父类型作为参数,该方法就可以接收父类的一切子类对象,体现出多态的扩展性与便利.</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<span class="hljs-comment">//子类继承父类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;狗&quot;</span>;<br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//抽象类方法,强制改写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗跑的快&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tortoise</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;乌龟&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;乌龟跑的慢&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多态</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//多态写法</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        go(animal);<span class="hljs-comment">//调用方法//dog的地址 → animal → go方法的animal//由此调用</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tortoise</span>();<br>        go(animal2);<br>    &#125;<br>    <span class="hljs-comment">//定义方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">(Animal animal)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>        animal.run();<span class="hljs-comment">//接入最初的dog/tortoise的地址//所以输出的是各自的run方法</span><br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="产生的问题"><a href="#产生的问题" class="headerlink" title="产生的问题"></a>产生的问题</h5><ul><li><h5 id="多态下不能使用子类独有功能"><a href="#多态下不能使用子类独有功能" class="headerlink" title="多态下不能使用子类独有功能"></a>多态下不能使用子类独有功能</h5></li></ul><h3 id="多态类型转换"><a href="#多态类型转换" class="headerlink" title="多态类型转换"></a>多态类型转换</h3><ul><li><h5 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自动类型转换</span><br>       <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//子对象赋值给父类类型的变量指向</span><br>       animal.run();<br></code></pre></td></tr></table></figure><ul><li><h5 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//强制类型转换</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tortoise</span>();<br>        animal1.run();<br><span class="hljs-comment">//        animal1.layEggs();//无法调用子类的方法</span><br>        <span class="hljs-type">Tortoise</span> <span class="hljs-variable">tortoise</span> <span class="hljs-operator">=</span> (Tortoise) animal1;<span class="hljs-comment">//将乌龟动物类型对象转换成乌龟类型</span><br>        tortoise.layEggs();<span class="hljs-comment">//可以输出乌龟子类方法</span><br><br><span class="hljs-comment">//        Dog dog = (Dog) animal1;//将乌龟的动物对象转成狗类//编写不会报错,但运行会报错,因为乌龟不能转换成狗</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="强制转换判断"><a href="#强制转换判断" class="headerlink" title="强制转换判断"></a>强制转换判断</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//所以在转换之前进行判断(变量名 instanceof 真实类型)可以返回true</span><br><span class="hljs-comment">//加判断 如果成功就进行转换</span><br><span class="hljs-keyword">if</span>(animal <span class="hljs-keyword">instanceof</span>  Dog)&#123;<span class="hljs-comment">//判断animal是不dog类型</span><br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) animal;<span class="hljs-comment">//是则强转</span><br>    dog.lookDoor();<span class="hljs-comment">//输出dog子类的方法 看门</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Tortoise)&#123;<span class="hljs-comment">//判断是不是tortoise类型</span><br>    <span class="hljs-type">Tortoise</span> <span class="hljs-variable">tortoise1</span> <span class="hljs-operator">=</span> (Tortoise) animal;<span class="hljs-comment">//强转乌龟类型</span><br>    tortoise.layEggs();<span class="hljs-comment">//输出乌龟子类方法下蛋</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解决问题及注意事项"><a href="#解决问题及注意事项" class="headerlink" title="解决问题及注意事项"></a>解决问题及注意事项</h4><ul><li><h5 id="可以转换成真正的子类类型-从而调用子独有功能"><a href="#可以转换成真正的子类类型-从而调用子独有功能" class="headerlink" title="可以转换成真正的子类类型,从而调用子独有功能"></a>可以转换成真正的子类类型,从而调用子独有功能</h5></li><li><h5 id="有继承关系-x2F-实现的2个类型就可以进行强制转换-编译无问题"><a href="#有继承关系-x2F-实现的2个类型就可以进行强制转换-编译无问题" class="headerlink" title="有继承关系&#x2F;实现的2个类型就可以进行强制转换,编译无问题"></a>有继承关系&#x2F;实现的2个类型就可以进行强制转换,编译无问题</h5></li><li><h5 id="运行时-如果发现强制转换后的类型不是对象真实类型则报错"><a href="#运行时-如果发现强制转换后的类型不是对象真实类型则报错" class="headerlink" title="运行时,如果发现强制转换后的类型不是对象真实类型则报错"></a>运行时,如果发现强制转换后的类型不是对象真实类型则报错</h5></li><li><h5 id="类型转换异常运行提示ClassCastException"><a href="#类型转换异常运行提示ClassCastException" class="headerlink" title="类型转换异常运行提示ClassCastException"></a>类型转换异常运行提示ClassCastException</h5></li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625130131971.png" alt="image-20220625130131971" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB</span> &#123;<br>    <span class="hljs-comment">//定义接入,拔出</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unconnected</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义键盘实现类接入USB接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Keyboard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Keyboard</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">//定义独有功能方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyDown</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;进行输入&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;已连接&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unconnected</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;已成功拔出&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义鼠标实现类接入USB接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mouse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Mouse</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><span class="hljs-comment">//子类独有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dbClick</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;点击了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;已连接&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unconnected</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;已成功拔出&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义电脑对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> &#123;<br><span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Computer</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;开机成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供安装USB设备的入口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">installUSB</span><span class="hljs-params">(USB usb)</span> &#123;<br>        <span class="hljs-comment">//多态</span><br>        usb.connect();<br>        <span class="hljs-comment">//判断强转</span><br>        <span class="hljs-keyword">if</span> (usb <span class="hljs-keyword">instanceof</span> Keyboard) &#123;<br>            <span class="hljs-type">Keyboard</span> <span class="hljs-variable">keyboard</span> <span class="hljs-operator">=</span> (Keyboard) usb;<br>            keyboard.keyDown();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (usb <span class="hljs-keyword">instanceof</span> Mouse) &#123;<br>            <span class="hljs-type">Mouse</span> <span class="hljs-variable">mouse</span> <span class="hljs-operator">=</span> (Mouse) usb;<br>            ((Mouse) usb).dbClick();<br>        &#125;<br>        usb.unconnected();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>(<span class="hljs-string">&quot;小新Pro16&quot;</span>);<br>        computer.run();<br>        <span class="hljs-comment">//多态</span><br>        <span class="hljs-type">USB</span> <span class="hljs-variable">usb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Keyboard</span>(<span class="hljs-string">&quot;键盘&quot;</span>);<br>        computer.installUSB(usb);<span class="hljs-comment">//转换类型后在运行输出</span><br>        <span class="hljs-type">USB</span> <span class="hljs-variable">usb1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mouse</span>(<span class="hljs-string">&quot;鼠标&quot;</span>);<br>        computer.installUSB(usb1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>内部类就是定义在一个类里面的类,里面的类可以理解成(寄生),外部类可以理解成(宿主)</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625130309393.png" alt="image-20220625130309393" style="zoom:50%;" /><h4 id="内部类使用场景、作用"><a href="#内部类使用场景、作用" class="headerlink" title="内部类使用场景、作用"></a>内部类使用场景、作用</h4><ul><li><h5 id="当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构可以选择使用内部类来设计"><a href="#当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构可以选择使用内部类来设计" class="headerlink" title="当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构可以选择使用内部类来设计"></a>当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构可以选择使用内部类来设计</h5></li><li><h5 id="内部类通常可以方便访问外部类的成员，包括私有的成员"><a href="#内部类通常可以方便访问外部类的成员，包括私有的成员" class="headerlink" title="内部类通常可以方便访问外部类的成员，包括私有的成员"></a>内部类通常可以方便访问外部类的成员，包括私有的成员</h5></li><li><h5 id="内部类提供了更好的封装性，内部类本身就可以用private-protectecd等修饰，封装性可以做更多控制"><a href="#内部类提供了更好的封装性，内部类本身就可以用private-protectecd等修饰，封装性可以做更多控制" class="headerlink" title="内部类提供了更好的封装性，内部类本身就可以用private protectecd等修饰，封装性可以做更多控制"></a>内部类提供了更好的封装性，内部类本身就可以用private protectecd等修饰，封装性可以做更多控制</h5></li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><h5 id="静态内部类-了解"><a href="#静态内部类-了解" class="headerlink" title="静态内部类(了解)"></a>静态内部类(了解)</h5><ul><li>有static修饰,属于外部类本身</li><li>特点和使用与普通类完全一样,类有的成分它都有,只是位置在别人里面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//外部类名.内部类名 对象名 = new 外部类名.内部构造器;</span><br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.Inner();<br></code></pre></td></tr></table></figure><ul><li>静态内部类可以直接访问外部类的静态成员</li><li>不可以直接访问外部类的实例成员</li></ul></li><li><h5 id="成员内部类-了解"><a href="#成员内部类-了解" class="headerlink" title="成员内部类(了解)"></a>成员内部类(了解)</h5><ul><li>无static修饰,属于外部类的对象</li><li>JDK16之前,成员内部不能定义静态成员,JDK16之后也可以定义静态成员</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-comment">//成员内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">外部类名.内部类名 对象名 = <span class="hljs-keyword">new</span> 外部构造器().new 内部构造器();<br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br></code></pre></td></tr></table></figure><ul><li>成员内部类可以直接访问外部类静态成员</li><li>成员内部类可以直接访问外部类的实例成员(因为成员内部类属于外部类对象  )</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">heartbeat</span> <span class="hljs-operator">=</span> <span class="hljs-number">150</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Heart</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">heartbeat</span> <span class="hljs-operator">=</span> <span class="hljs-number">110</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">heartbeat</span> <span class="hljs-operator">=</span> <span class="hljs-number">78</span>;<br>            System.out.println(heartbeat);<span class="hljs-comment">//78</span><br>            System.out.println(<span class="hljs-built_in">this</span>.heartbeat);<span class="hljs-comment">//110</span><br>            System.out.println(People.<span class="hljs-built_in">this</span>.heartbeat);<span class="hljs-comment">//150//成员内部类中访问外部对象 格式:外部类名.this</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="局部内部类-鸡肋语法"><a href="#局部内部类-鸡肋语法" class="headerlink" title="局部内部类(鸡肋语法)"></a>局部内部类(鸡肋语法)</h5><ul><li>局部内部类放在方法、代码块、构造器等执行体中</li><li>局部内部类的类文件名为:外部类$N内部类.class</li></ul></li><li><h5 id="匿名内部类-重点"><a href="#匿名内部类-重点" class="headerlink" title="匿名内部类(重点)"></a><font color='red'>匿名内部类(重点)</font></h5><ul><li>本质上是一个没有名字的局部内部类,定义在方法中、代码块中等</li><li>作用:方便创建子类对象,最终目的为了简化代码编写</li></ul><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 类|抽象类名|接口名()&#123;<br>    重写方法;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//之前方法 定义子类继承并改写方法</span><br><span class="hljs-comment">//class Tiger extends Animal &#123;</span><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public void run() &#123;</span><br><span class="hljs-comment">//        System.out.println(&quot;老虎跑的快&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//之前方法 多态新建对象并运行方法</span><br><span class="hljs-comment">//        Animal animal = new Tiger();</span><br><span class="hljs-comment">//        animal.run();</span><br>        <span class="hljs-comment">//现在方法 直接新建父类对象并改写方法(匿名内部类)</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;老虎跑的快&quot;</span>);<br>            &#125;<br>        &#125;;<span class="hljs-comment">//分号</span><br>        animal.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul><li><h5 id="匿名内部类是一个没有名字的内部类"><a href="#匿名内部类是一个没有名字的内部类" class="headerlink" title="匿名内部类是一个没有名字的内部类"></a>匿名内部类是一个没有名字的内部类</h5></li><li><h5 id="匿名内部类写出来就会产生一个匿名内部类的对象"><a href="#匿名内部类写出来就会产生一个匿名内部类的对象" class="headerlink" title="匿名内部类写出来就会产生一个匿名内部类的对象"></a>匿名内部类写出来就会产生一个匿名内部类的对象</h5></li><li><h5 id="匿名内部类的对象类型相当于是当前new的那个类型的子类类型"><a href="#匿名内部类的对象类型相当于是当前new的那个类型的子类类型" class="headerlink" title="匿名内部类的对象类型相当于是当前new的那个类型的子类类型"></a>匿名内部类的对象类型相当于是当前new的那个类型的子类类型</h5></li></ul><h5 id="案例-接口的匿名内部类"><a href="#案例-接口的匿名内部类" class="headerlink" title="案例(接口的匿名内部类)"></a>案例(<font color='red'>接口</font>的匿名内部类)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Swimming</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 匿名内部类的使用形式(语法)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//之前写法//匿名内部类</span><br>        <span class="hljs-type">Swimming</span> <span class="hljs-variable">swimming</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swimming</span>() &#123;<span class="hljs-comment">//接口不能实例化,实际是创建了一个接口的实现类,系统创建(Test2$1)的名称,只使用一次</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;学生游泳&quot;</span>);<br>            &#125;<br>        &#125;;<br>        go(swimming);<br>        System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>        <span class="hljs-comment">//简化代码</span><br>        go(() -&gt; System.out.println(<span class="hljs-string">&quot;老师游泳&quot;</span>));<span class="hljs-comment">//方法里的类型-&gt;输出的</span><br>    &#125;<br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 老师,学生,运动员可以一起参加游泳比赛</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">(Swimming swimming)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始.....&quot;</span>);<br>        swimming.swim();<br>        System.out.println(<span class="hljs-string">&quot;结束.....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">(<span class="hljs-type">int</span> ge)</span>;<span class="hljs-comment">//定义年龄方法</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//匿名局部类</span><br>        <span class="hljs-type">People</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">(<span class="hljs-type">int</span> ge)</span> &#123;<br>                System.out.println(ge);<br>                <span class="hljs-keyword">return</span> ge;<br>            &#125;<br>        &#125;;<br>        Teacher.Age(people);<br>        <span class="hljs-comment">//以上可简写为</span><br>        Teacher.Age(ge -&gt; &#123;System.out.println(ge);<span class="hljs-keyword">return</span> ge;&#125; );<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Age</span><span class="hljs-params">(People people )</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小明&quot;</span> + people.age(<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;岁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h5 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h5><ul><li><h5 id="默认是打印当前对象的地址"><a href="#默认是打印当前对象的地址" class="headerlink" title="默认是打印当前对象的地址"></a>默认是打印当前对象的地址</h5></li><li><h5 id="让子类重写-以便返回子类对象的内容"><a href="#让子类重写-以便返回子类对象的内容" class="headerlink" title="让子类重写,以便返回子类对象的内容"></a>让子类重写,以便返回子类对象的内容</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<span class="hljs-comment">//默认继承object</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">char</span> sex, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(<span class="hljs-type">char</span> sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><span class="hljs-comment">//对toString进行改写</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sex=&quot;</span> + sex +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//object类中toString方法的使用//快捷键toSting改写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王小明&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">22</span>);<br><span class="hljs-comment">//        String s = student.toString();</span><br><span class="hljs-comment">//        System.out.println(s);</span><br>        <span class="hljs-comment">//toString 返回当前对象地址//  改写后输出改写内容如 Student&#123;name=&#x27;王小明&#x27;,sex=男,age=22&#125;</span><br>        System.out.println(student.toString());<br>        <span class="hljs-comment">//默认可以不写toString,直接输出变量//同上</span><br>        System.out.println(student);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h5><ul><li>默认与另一个对象比较地址</li><li>子类重写,比较两个子类对象内容是否一样</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接上 </span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 重写equals</span><br><span class="hljs-comment">     * 内容一样就认为相等</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public boolean equals(Object o) &#123;</span><br><span class="hljs-comment">//        //1 判断o是不是学生类型</span><br><span class="hljs-comment">//        if (o instanceof Student) &#123;//判断o是不是Student类型</span><br><span class="hljs-comment">//            Student s = (Student) o;//是则转成Student</span><br><span class="hljs-comment">//            //2 判断内容是否一样</span><br><span class="hljs-comment">////            if(this.name.equals(s.name)&amp;&amp;this.age==s.age&amp;&amp;this.sex==s.sex)&#123;</span><br><span class="hljs-comment">// 字符串本身已经重写了equals,直接比较内容</span><br><span class="hljs-comment">////                return true;</span><br><span class="hljs-comment">////            &#125;else&#123;</span><br><span class="hljs-comment">////                return false;</span><br><span class="hljs-comment">////            &#125;</span><br><span class="hljs-comment">//            //可以直接return条件</span><br><span class="hljs-comment">//            return this.name.equals(s.name) &amp;&amp; this.age == s.age &amp;&amp; this.sex == s.sex;</span><br><span class="hljs-comment">//        &#125; else &#123;</span><br><span class="hljs-comment">//            return false;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-comment">//直接生成</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-comment">//1 判断是不是同一个对象比较,是返回true</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//2 传入空对象直接返回false||判断当前类型和比较类型是否相同</span><br>        <span class="hljs-comment">// (getClass返回真实类型,省略了this),不相同返回false</span><br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//3 o为学生类型并且不为空</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<span class="hljs-comment">//将o转为学生类型</span><br>        <span class="hljs-type">return</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span>= student.sex &amp;&amp; age == student.age &amp;&amp; Objects.equals(name, student.name);<span class="hljs-comment">//这里equals调用的是对象本身的equals,因为是字符型,字符型equals已经被改写过</span><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Object中equals的使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小胡&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小胡&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-comment">//equals 默认比较两个对象的地址是否相同//改写后比较对象的值是否相同</span><br>        System.out.println(student.equals(student1));<br>        <span class="hljs-comment">//比较地址</span><br>        System.out.println(student == student1);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><ul><li><h5 id="Objects是Object的子类-从JDK1-7开始有"><a href="#Objects是Object的子类-从JDK1-7开始有" class="headerlink" title="Objects是Object的子类,从JDK1.7开始有"></a>Objects是Object的子类,从JDK1.7开始有</h5></li></ul><h5 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Objects.equals<br><span class="hljs-comment">//源码</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object a, Object b)</span> &#123;<br>    <span class="hljs-comment">//先判断a和b地址一样直接true (||前面条件正确,后面的直接不进行判断) </span><br>    <span class="hljs-comment">//地址不同,判断a不为空,因为后面调用a的equals方法,不为空则调用a对象的equals方法,都一样则true</span><br>     <span class="hljs-keyword">return</span> (a == b) || (a != <span class="hljs-literal">null</span> &amp;&amp; a.equals(b));<br> &#125;<br></code></pre></td></tr></table></figure><h5 id="isNull"><a href="#isNull" class="headerlink" title="isNull"></a>isNull</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(Objects.isNull(student));<span class="hljs-comment">//判断是否为空</span><br><span class="hljs-comment">//等同于</span><br>System.out.println(student == <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><ul><li>是一个可变字符串类,可以看成是一个对象容器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * StringBuilder操作字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBUilderDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        stringBuilder.append(<span class="hljs-string">&quot;小明&quot;</span>);<br>        stringBuilder.append(<span class="hljs-number">123</span>);<br>        stringBuilder.append(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        stringBuilder.append(<span class="hljs-number">2.2</span>);<br>        System.out.println(stringBuilder);<br>        <span class="hljs-comment">//输出 小明123a2.2</span><br><br>        <span class="hljs-comment">//支持链式编程</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        System.out.println(stringBuilder1.append(<span class="hljs-number">1</span>).append(<span class="hljs-number">2</span>).append(<span class="hljs-string">&quot;中国cha&quot;</span>));<br>        <span class="hljs-comment">//反转</span><br>        stringBuilder1.reverse().append(<span class="hljs-number">111</span>);<br>        <span class="hljs-comment">//输出 ahc国中21111</span><br>        System.out.println(stringBuilder1);<br>        <span class="hljs-comment">//length</span><br>        System.out.println(stringBuilder1.length());<br>        <span class="hljs-comment">//输出字符长度 10</span><br><br>        <span class="hljs-comment">//StringBuilder只是拼接字符串的手段</span><br>        <span class="hljs-comment">//最终结果还是恢复成String类型</span><br><br>        <span class="hljs-comment">//恢复成String</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> stringBuilder1.toString();<br>        check(s);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(String s)</span> &#123;<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么拼接、反转字符串建议使用StringBuilder</p><ul><li><p>String:内容是不可变的,拼接字符串性能差</p></li><li><p>StringBuilder:内容可变,拼接字符串性能好,代码优雅</p></li><li><p>定义字符串使用String</p></li><li><p>拼接修改等操作字符串使用StringBuilder</p></li></ul><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p>需求</p><ul><li>设计一个方法用于输出任意整型数组的内容,要求输出成如下格式</li></ul><blockquote><p>“该数组内容为:[11,22,33,44,55]”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1 定义方法接收任意整型数组,返回数组内容格式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        stringBuilder.append(arr[i]).append(i == arr.length - <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;,&quot;</span>);<span class="hljs-comment">//StringBuilder会自动累加字符</span><br>        <span class="hljs-comment">// 判断是不是最后一位,不是加&quot;,&quot;,是则不添加</span><br>    &#125;<br>    stringBuilder.append(<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> stringBuilder.toString();<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;;<br>     System.out.println(toString(arr));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Math-工具类"><a href="#Math-工具类" class="headerlink" title="Math(工具类)"></a>Math(工具类)</h3><ul><li><p>包含执行基本数字运算的方法,Math没有提供公开的构造器.</p></li><li><p>看类的成员是否都是静态,是,则通过类名就可以直接调用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1 取绝对值:返回正数</span><br>System.out.println(Math.abs(-<span class="hljs-number">12.1</span>));<span class="hljs-comment">//12.1</span><br>System.out.println(Math.abs(-<span class="hljs-number">12</span>));<span class="hljs-comment">//12</span><br><span class="hljs-comment">//2 向上取整</span><br>System.out.println(Math.ceil(<span class="hljs-number">3.3</span>));<span class="hljs-comment">//4.0</span><br>System.out.println(Math.ceil(<span class="hljs-number">3</span>));<span class="hljs-comment">//3.0</span><br><span class="hljs-comment">//3 向下取整</span><br>System.out.println(Math.floor(<span class="hljs-number">4.999</span>));<span class="hljs-comment">//4.0</span><br>System.out.println(Math.floor(<span class="hljs-number">4.0</span>));<span class="hljs-comment">//4.0</span><br><span class="hljs-comment">//4 求指数次方</span><br>System.out.println(Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<span class="hljs-comment">//2^3=8.0</span><br><span class="hljs-comment">//5 四舍五入</span><br>System.out.println(Math.round(<span class="hljs-number">4.5</span>));<span class="hljs-comment">//5</span><br>System.out.println(Math.round(<span class="hljs-number">4.49</span>));<span class="hljs-comment">//4</span><br><span class="hljs-comment">//6 随机数 [0,1)</span><br>System.out.println(Math.random());<span class="hljs-comment">//0-1(包含0不包含1)</span><br><br><span class="hljs-comment">//3-9之间的随机数</span><br><span class="hljs-comment">//(0-1)*6+3</span><br>System.out.println((<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">7</span> + <span class="hljs-number">3</span>));<span class="hljs-comment">//不包含右边所以7才能取到6</span><br></code></pre></td></tr></table></figure><h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//1 程序终止</span><br><span class="hljs-comment">//System.out.println(&quot;程序开始&quot;);</span><br><span class="hljs-comment">//System.exit(0);//JVM终止(0正常终止 1异常终止)//程序不会再往下运行</span><br><span class="hljs-comment">//2 获取1970-1-1 00:00:00 到此时的总毫秒值(时间毫秒值)</span><br><span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(time);<br><span class="hljs-comment">//进行时间计算:性能分析</span><br><span class="hljs-comment">//计算循环所用时间</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>    System.out.println(i);<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-variable">endtime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(endtime);<br>System.out.println((endtime - time)/<span class="hljs-number">1000.0</span>+<span class="hljs-string">&quot;s&quot;</span>);<br><span class="hljs-comment">//3 数组拷贝(了解)</span><br><span class="hljs-comment">//源码</span><br><span class="hljs-comment">//arraycopy(Object src(被拷贝的数组),  int  srcPos(从那个索引位置开始),</span><br><span class="hljs-comment">//Object dest(复制的目标数组), int destPos(粘贴索引位置),</span><br><span class="hljs-comment">//int length(拷贝元素的个数));</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>,<span class="hljs-number">70</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">6</span>];<span class="hljs-comment">//[0,0,0,0,0,0]==&gt; [0,0,40,50,60,0]</span><br>System.arraycopy(arr,<span class="hljs-number">3</span>,arr2,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>System.out.println(Arrays.toString(arr2));<span class="hljs-comment">//遍历数组输出</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><ul><li>解决浮点型运算精度失真的问题</li></ul><blockquote><p>例如 0.09+0.01&#x3D;0.0999999999</p></blockquote><p>方法</p><ul><li>创建对象BigDecimal封装浮点型数据(最好的方法是调用方法)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BidDecimal <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">double</span> val)</span>;<span class="hljs-comment">//包装浮点数成为BigDecimal对象</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br>        System.out.println(c);<br><span class="hljs-comment">//包装浮点型数据成为大数据对象</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(a);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(b);<br>        <span class="hljs-comment">//加</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> a1.add(b1);<br>        <span class="hljs-comment">//减</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> a1.subtract(b1);<br>        <span class="hljs-comment">//乘</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> a1.multiply(b1);<br>        <span class="hljs-comment">//除        </span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> a1.divide(b1);<br>        <span class="hljs-comment">//目的:转换成double</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> c1.doubleValue();<br>        System.out.println(rs);<br>        <span class="hljs-comment">//注意:BigDecimal一定要精度运算</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">a11</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">10.0</span>);<span class="hljs-comment">//源码是先将数值转换成字符</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b11</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">3.0</span>);<br><span class="hljs-comment">//BigDecimal c11 = a11.divide(b11);//会报错 崩溃,10/3本身除不尽</span><br>        <span class="hljs-comment">//c11/b11 参数1除数 参数2保留位数 参数3舍入模式</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c11</span> <span class="hljs-operator">=</span> a11.divide(b11,<span class="hljs-number">2</span>, RoundingMode.HALF_UP);<span class="hljs-comment">//保留两位,四舍五入</span><br></code></pre></td></tr></table></figure><h3 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h3><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><ul><li>当前所在系统的此刻日期时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Date类处理时间,获取时间信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1 创建Date类对象:代表当前系统时间</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(d);<br>        <span class="hljs-comment">//2 时间毫秒值(1970)</span><br>        System.out.println(d.getTime());<span class="hljs-comment">//同下</span><br>        System.out.println(System.currentTimeMillis());<br><br>        <span class="hljs-comment">//计算当前时间往后走1小时121秒的时间</span><br>        <span class="hljs-comment">//1 获取当前时间并输出</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(date);<br>        <span class="hljs-comment">//2 得到当前时间毫秒值</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        time += (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> + <span class="hljs-number">121</span>) * <span class="hljs-number">1000</span>;<br>        <span class="hljs-comment">//3 将毫秒值直接注入date有参构造器,输出对应日期对象</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>        System.out.println(date1);<br>        <span class="hljs-comment">//或者将Date的getTime改写成time,输出时间(等同于上)</span><br>        d.setTime(time);<br>        System.out.println(d);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h4><ul><li>对Date对象或时间毫秒值格式化成自己喜欢的时间格式</li><li>也可以把字符串的时间形式解析成日期对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//时间对象重新格式化 format</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleDateFormatDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1 日期对象</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(date);<br>        <span class="hljs-comment">//2 格式化日期对象</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss EEE a&quot;</span>);<br>        <span class="hljs-comment">//3 开始格式化日期对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sdf.format(date);<br>        System.out.println(rs);<br>        <span class="hljs-comment">//可以直接格式化时间毫秒值</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> sdf.format(ms);<br>        System.out.println(s);<br>        <span class="hljs-comment">//输出2022年04月12日 17:18:18 周二 下午</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//解析字符串时间 parse</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleDateFormateDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-comment">//2021年08月06日 11:11:11往后2天14小时49分06秒后的时间是多少</span><br>        <span class="hljs-comment">//1 创建字符串时间</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dateStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2021年08月06日 11:11:11&quot;</span>;<br>        <span class="hljs-comment">//2 字符串解析成日期对象//形式必须与被解析时间的形式完全一样否则会报错</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(dateStr);<span class="hljs-comment">//转换成时间日期对象//这里会提醒报错,alt回车确定//抛出异常</span><br>        <span class="hljs-comment">//3 往后走两天……</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> d.getTime()+(<span class="hljs-number">2L</span>*<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span> + <span class="hljs-number">14</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span> + <span class="hljs-number">49</span>*<span class="hljs-number">60</span> + <span class="hljs-number">6</span>)*<span class="hljs-number">1000</span>;<br>        <span class="hljs-comment">//默认以int计算,防止超出 所以加L,以long计算</span><br>        <span class="hljs-comment">//4 格式化时间毫秒值</span><br>        System.out.println(sdf.format(time));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><p>需求:</p><p>秒杀开始时间 2020年11月11日0:0:0</p><p>结束时间         2020年11月11日0:10:0</p><ul><li>小贾下单付款时间为:2020年11月11日 0:03:47</li><li>小皮下单付款时间为:2020年11月11日0:10:11</li><li>用代码说明两位同学有没有参加上秒杀活动?</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleDateFormatTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-comment">//1 开始和结束时间</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2020年11月11日 00:00:00&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2020年11月11日 00:10:00&quot;</span>;<br>        <span class="hljs-comment">//2 小贾 小皮</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">xiaojia</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2020年11月11日 00:03:47&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">xiaopi</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2020年11月11日 00:10:11&quot;</span>;<br>        <span class="hljs-comment">//3 解析时间</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> sdf.parse(startTime);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> sdf.parse(endTime);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> sdf.parse(xiaojia);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d4</span> <span class="hljs-operator">=</span> sdf.parse(xiaopi);<br>        <span class="hljs-comment">//判断 after(之后) before(之前)</span><br>        <span class="hljs-keyword">if</span>(d3.after(d1)&amp;&amp;d3.before(d2))&#123;<br>            System.out.println(<span class="hljs-string">&quot;小贾成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;小贾失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (d4.after(d1)&amp;&amp;d4.before(d2))&#123;<br>            System.out.println(<span class="hljs-string">&quot;小皮成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;小皮失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><ul><li>代表系统此刻日期对应的日历形象</li><li>是一个抽象类,不能直接创建对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1 拿到系统此刻日历对象</span><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">cal</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        System.out.println(cal);<br>        <span class="hljs-comment">//2 获取日历信息:public int get(int field):获取日期中的某个字段信息</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> cal.get(Calendar.YEAR);<span class="hljs-comment">//获取年份</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> cal.get(Calendar.MONTH) + <span class="hljs-number">1</span>;<span class="hljs-comment">//获取年份(月份+1)</span><br>        System.out.println(month);<br>        System.out.println(year);<br>        <span class="hljs-comment">//3 修改日历的某个字段信息:public void set (int field,int value)</span><br>cal.set(Calendar.HOUR, <span class="hljs-number">12</span>);<span class="hljs-comment">//(被修改参数,修改值)</span><br>System.out.println(cal);<br>        <span class="hljs-comment">//4 为某个字段增加/减少指定的值:public void add(int field,int amount)</span><br>        cal.add(Calendar.DAY_OF_YEAR,<span class="hljs-number">1</span>);<br>        cal.add(Calendar.MINUTE,<span class="hljs-number">20</span>);<br>        System.out.println(cal);<br>        <span class="hljs-comment">//5 拿到此刻日期对象//更改后的:public final Date getTime()</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> cal.getTime();<br>        System.out.println(d);<span class="hljs-comment">//Thu Apr 14 13:07:16 CST 2022</span><br>        <span class="hljs-comment">//6 获取时间毫秒值:public long getTimeInMillis()</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> cal.getTimeInMillis();<br>        System.out.println(time);<span class="hljs-comment">//更改后的</span><br><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="JDK8新增日期类"><a href="#JDK8新增日期类" class="headerlink" title="JDK8新增日期类"></a>JDK8新增日期类</h3><h4 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1 获取当前日期</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">nowDate</span> <span class="hljs-operator">=</span> LocalDate.now();<br>System.out.println(nowDate);<span class="hljs-comment">//2022-04-13</span><br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> nowDate.getYear();<span class="hljs-comment">//年</span><br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> nowDate.getMonthValue();<span class="hljs-comment">//月</span><br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> nowDate.getDayOfMonth();<span class="hljs-comment">//日</span><br><span class="hljs-type">int</span> <span class="hljs-variable">dayOfYear</span> <span class="hljs-operator">=</span> nowDate.getDayOfYear();<span class="hljs-comment">//当年第几天</span><br><br>System.out.println(nowDate.getDayOfWeek());<span class="hljs-comment">//周几(英文)</span><br>System.out.println(nowDate.getDayOfWeek().getValue());<span class="hljs-comment">//getValue返回数值/周几</span><br><br>System.out.println(nowDate.getMonth());<span class="hljs-comment">//月份(英文)</span><br>System.out.println(nowDate.getMonth().getValue());<span class="hljs-comment">//数值</span><br><span class="hljs-comment">//指定时间 LocalDate.of</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">1999</span>, <span class="hljs-number">7</span>,<span class="hljs-number">23</span>);<br>System.out.println(localDate);<br></code></pre></td></tr></table></figure><h4 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1 获取当前时间对象 LocalTime.now()</span><br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">nowTime</span> <span class="hljs-operator">=</span> LocalTime.now();<br>System.out.println(nowTime);<span class="hljs-comment">//14:02:01.280529300</span><br><span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> nowTime.getHour();<span class="hljs-comment">//小时</span><br><span class="hljs-type">int</span> <span class="hljs-variable">minute</span> <span class="hljs-operator">=</span> nowTime.getMinute();<span class="hljs-comment">//分钟</span><br><span class="hljs-type">int</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> nowTime.getSecond();<span class="hljs-comment">//秒</span><br><span class="hljs-type">int</span> <span class="hljs-variable">nano</span> <span class="hljs-operator">=</span> nowTime.getNano();<span class="hljs-comment">//纳秒</span><br><span class="hljs-comment">//指定时间</span><br><span class="hljs-comment">//LocalTime.of</span><br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime</span> <span class="hljs-operator">=</span> LocalTime.of(<span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>, <span class="hljs-number">22</span>);<span class="hljs-comment">//时 分 秒 纳秒</span><br></code></pre></td></tr></table></figure><h4 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取当前日期时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(localDateTime);<span class="hljs-comment">//2022-04-13T15:22:08.258873800</span><br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> localDateTime.getYear();<span class="hljs-comment">//年</span><br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> localDateTime.getMonthValue();<span class="hljs-comment">//月</span><br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> localDateTime.getDayOfMonth();<span class="hljs-comment">//日</span><br><span class="hljs-type">int</span> <span class="hljs-variable">dayOfYear</span> <span class="hljs-operator">=</span> localDateTime.getDayOfYear();<span class="hljs-comment">//当年第几天</span><br><span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> localDateTime.getHour();<span class="hljs-comment">//小时</span><br><span class="hljs-type">int</span> <span class="hljs-variable">minute</span> <span class="hljs-operator">=</span> localDateTime.getMinute();<span class="hljs-comment">//分钟</span><br><span class="hljs-type">int</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> localDateTime.getSecond();<span class="hljs-comment">//秒</span><br><span class="hljs-type">int</span> <span class="hljs-variable">nano</span> <span class="hljs-operator">=</span> localDateTime.getNano();<span class="hljs-comment">//纳秒</span><br>System.out.println(year);<br>System.out.println(month);<br>System.out.println(day);<br>System.out.println(dayOfYear);<br>System.out.println(hour);<br>System.out.println(minute);<br>System.out.println(second);<br>System.out.println(nano);<br><span class="hljs-comment">//指定时间 年月日时分秒纳秒</span><br>LocalDateTime.of(<span class="hljs-number">1999</span>,<span class="hljs-number">7</span>,<span class="hljs-number">23</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>);<br><span class="hljs-comment">//转换成日期对象或者时间对象</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> localDateTime.toLocalDate();<br>System.out.println(localDate);<br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime</span> <span class="hljs-operator">=</span> localDateTime.toLocalTime();<br>System.out.println(localTime);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//时间运算</span><br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime</span> <span class="hljs-operator">=</span> LocalTime.now();<br>System.out.println(localTime);<br><span class="hljs-comment">//时间减</span><br>System.out.println(localTime.minusHours(<span class="hljs-number">1</span>));<span class="hljs-comment">//减1小时</span><br>System.out.println(localTime.minusMinutes(<span class="hljs-number">1</span>));<span class="hljs-comment">//减1分钟</span><br>System.out.println(localTime.minusSeconds(<span class="hljs-number">1</span>));<span class="hljs-comment">//减1秒</span><br>System.out.println(localTime.minusNanos(<span class="hljs-number">1</span>));<span class="hljs-comment">//减1纳秒</span><br><span class="hljs-comment">//时间加</span><br>System.out.println(localTime.plusHours(<span class="hljs-number">1</span>));<span class="hljs-comment">//加1小时</span><br>System.out.println(localTime.plusMinutes(<span class="hljs-number">1</span>));<span class="hljs-comment">//加1分钟</span><br>System.out.println(localTime.plusSeconds(<span class="hljs-number">1</span>));<span class="hljs-comment">//加1秒</span><br>System.out.println(localTime.plusNanos(<span class="hljs-number">1</span>));<span class="hljs-comment">//加1纳秒</span><br><span class="hljs-comment">//不可变对象,修改只会生成新的对象</span><br>System.out.println(localTime);<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">isDate</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2020</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>);<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">nowDate</span> <span class="hljs-operator">=</span> LocalDate.now();<br><span class="hljs-comment">//判断日期是否相同</span><br>System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + isDate + <span class="hljs-string">&quot;么?,&quot;</span> + (isDate.equals(nowDate) ? <span class="hljs-string">&quot;是&quot;</span> : <span class="hljs-string">&quot;不是&quot;</span>));<br><span class="hljs-comment">//日期比较</span><br>System.out.println(isDate.isBefore(nowDate) ? <span class="hljs-string">&quot;是&quot;</span> : <span class="hljs-string">&quot;否&quot;</span>);<span class="hljs-comment">//isDate是否在nowDate之前</span><br>System.out.println(isDate.isAfter(nowDate) ? <span class="hljs-string">&quot;是&quot;</span> : <span class="hljs-string">&quot;否&quot;</span>);<span class="hljs-comment">//isDate是否在nowDate之后</span><br><span class="hljs-comment">//判断生日(月日)</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">birDate</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">1999</span>,<span class="hljs-number">7</span>,<span class="hljs-number">23</span>);<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">nowDate1</span> <span class="hljs-operator">=</span> LocalDate.now();<br><span class="hljs-comment">//指定月份日期</span><br><span class="hljs-type">MonthDay</span> <span class="hljs-variable">birMd</span> <span class="hljs-operator">=</span> MonthDay.of(birDate.getMonthValue(),birDate.getDayOfMonth());<span class="hljs-comment">//带入birDate的月份和日期</span><br><span class="hljs-type">MonthDay</span> <span class="hljs-variable">birMd1</span> <span class="hljs-operator">=</span> MonthDay.from(birDate);<span class="hljs-comment">//或者用from  直接将birDate转换成MonthDay</span><br><span class="hljs-comment">//获取今天的月日</span><br><span class="hljs-type">MonthDay</span> <span class="hljs-variable">nowMd</span> <span class="hljs-operator">=</span> MonthDay.from(nowDate1);<br><span class="hljs-comment">//两者进行比对</span><br>System.out.println(<span class="hljs-string">&quot;今天是我的生日么?&quot;</span> + (birMd.equals(nowMd) ? <span class="hljs-string">&quot;是&quot;</span> : <span class="hljs-string">&quot;不是&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="instant时间戳"><a href="#instant时间戳" class="headerlink" title="instant时间戳"></a>instant时间戳</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1 得到Istant时间戳对象</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(instant);<span class="hljs-comment">//2022-04-13T14:11:07.703797100Z(世界标准时间)</span><br><span class="hljs-comment">//2 系统此刻的时间戳</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant1</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(instant1.atZone(ZoneId.systemDefault()));<span class="hljs-comment">//更改为系统时区</span><br><span class="hljs-comment">//3 如何返回Date对象</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(instant);<span class="hljs-comment">//转成Date对象</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant2</span> <span class="hljs-operator">=</span> date.toInstant();<span class="hljs-comment">//Date转换回Instant</span><br></code></pre></td></tr></table></figure><h4 id="DateTimeFormatter-时间日期格式化"><a href="#DateTimeFormatter-时间日期格式化" class="headerlink" title="DateTimeFormatter(时间日期格式化)"></a>DateTimeFormatter(时间日期格式化)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 本地日期</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-comment">// 解析/格式化器 .ofPattern</span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dtf</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss EEE a&quot;</span>);<br><span class="hljs-comment">//格式化时间 .format</span><br><span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> dtf.format(localDateTime);<span class="hljs-comment">//2022-04-13 22:28:58 周三 下午</span><br><span class="hljs-type">String</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> localDateTime.format(dtf);<span class="hljs-comment">//等同于上面,可以调换</span><br>System.out.println(time+<span class="hljs-string">&quot;\n&quot;</span>+time1);<br><span class="hljs-comment">//解析字符串时间</span><br><span class="hljs-type">String</span> <span class="hljs-variable">dayTime</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2010年04月05日 11:11:11&quot;</span>;<br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dtf1</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<span class="hljs-comment">//定义时间格式</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.parse(dayTime ,dtf1);<span class="hljs-comment">//这里LocalDateTime代表字符必须包含日期时间</span><br><span class="hljs-comment">//去除Time就可以去除时间</span><br>System.out.println(ldt);<span class="hljs-comment">//2010-04-05T11:11:11</span><br></code></pre></td></tr></table></figure><h4 id="Period-日期间隔"><a href="#Period-日期间隔" class="headerlink" title="Period(日期间隔)"></a>Period(日期间隔)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当前日期</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">nowDate</span> <span class="hljs-operator">=</span> LocalDate.now();<br>System.out.println(nowDate);<span class="hljs-comment">//2022-04-13</span><br><span class="hljs-comment">//要计算的时间</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">birDate</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">1999</span>, <span class="hljs-number">7</span>, <span class="hljs-number">23</span>);<br>System.out.println(birDate);<span class="hljs-comment">//1999-07-23</span><br><span class="hljs-comment">//间隔时间</span><br><span class="hljs-type">Period</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> Period.between(birDate, nowDate);<span class="hljs-comment">//第二个参数减第一个</span><br>System.out.println(period.getDays());<span class="hljs-comment">//间隔天数 21(只计算月数或者天数间隔)</span><br>System.out.println(period.getYears());<span class="hljs-comment">//间隔年数 22</span><br>System.out.println(period.getMonths());<span class="hljs-comment">//间隔月数 8</span><br></code></pre></td></tr></table></figure><h4 id="Duration-时间间隔"><a href="#Duration-时间间隔" class="headerlink" title="Duration(时间间隔)"></a>Duration(时间间隔)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当前时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> LocalDateTime.now();<span class="hljs-comment">//2022-04-13T23:07:15.695188600</span><br>System.out.println(today);<br><span class="hljs-comment">//要计算的时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">birDate</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">1999</span>,<span class="hljs-number">7</span>,<span class="hljs-number">23</span>,<span class="hljs-number">12</span>,<span class="hljs-number">21</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12111</span>);<br>System.out.println(birDate);<span class="hljs-comment">//1999-07-23T12:21:12.000012111</span><br><span class="hljs-comment">//间隔</span><br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(birDate,today);<span class="hljs-comment">//第二个减去第一个</span><br>System.out.println(duration.toDays());<span class="hljs-comment">//间隔天数//8300</span><br>System.out.println(duration.toHours());<span class="hljs-comment">//间隔小时</span><br>System.out.println(duration.toMinutes());<span class="hljs-comment">//间隔分钟</span><br>System.out.println(duration.toSeconds());<span class="hljs-comment">//间隔秒数</span><br>System.out.println(duration.toNanos());<span class="hljs-comment">//间隔纳秒数</span><br></code></pre></td></tr></table></figure><h4 id="ChronoUnit"><a href="#ChronoUnit" class="headerlink" title="ChronoUnit"></a>ChronoUnit</h4><ul><li>用于在单个时间单位内测量一段时间,可以用于比较所有的时间单位</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//本地时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(today);<span class="hljs-comment">//2022-04-13T23:24:45.540903700</span><br><span class="hljs-comment">//计算时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">birDate</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">1999</span>,<span class="hljs-number">7</span>,<span class="hljs-number">23</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">1222</span>);<br>System.out.println(birDate);<span class="hljs-comment">//1999-07-23T12:12:12.000001222</span><br><span class="hljs-comment">//间隔</span><br>System.out.println(ChronoUnit.YEARS.between(birDate, today));<span class="hljs-comment">//相差年份 22</span><br>System.out.println(ChronoUnit.MONTHS.between(birDate, today));<span class="hljs-comment">//相差月份(实际月份) 272</span><br>System.out.println(ChronoUnit.DAYS.between(birDate, today));<span class="hljs-comment">//相差天数 8300</span><br>System.out.println(ChronoUnit.HOURS.between(birDate, today));<span class="hljs-comment">//相差小时 199211</span><br>System.out.println(ChronoUnit.MINUTES.between(birDate, today));<span class="hljs-comment">//相差分钟数</span><br>System.out.println(ChronoUnit.SECONDS.between(birDate, today));<span class="hljs-comment">//相差秒数</span><br>System.out.println(ChronoUnit.MILLIS.between(birDate, today));<span class="hljs-comment">//相差毫秒</span><br>System.out.println(ChronoUnit.MICROS.between(birDate, today));<span class="hljs-comment">//相差微秒</span><br>System.out.println(ChronoUnit.NANOS.between(birDate, today));<span class="hljs-comment">//相差纳秒</span><br>System.out.println(ChronoUnit.HALF_DAYS.between(birDate, today));<span class="hljs-comment">//相差半天数</span><br>System.out.println(ChronoUnit.DECADES.between(birDate, today));<span class="hljs-comment">//相差十年数</span><br>System.out.println(ChronoUnit.CENTURIES.between(birDate, today));<span class="hljs-comment">//相差百年数</span><br>System.out.println(ChronoUnit.MILLENNIA.between(birDate, today));<span class="hljs-comment">//相差千年数</span><br>System.out.println(ChronoUnit.ERAS.between(birDate, today));<span class="hljs-comment">//相差纪元数</span><br></code></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><ul><li>8中基本数据类型的引用类型</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625130633043.png" alt="image-20220625130633043" style="zoom:50%;" /><ul><li>为了实现一切皆对象</li><li>集合和泛型也只能支持包装类型</li></ul><h5 id="特有功能"><a href="#特有功能" class="headerlink" title="特有功能"></a>特有功能</h5><ul><li>包装类默认值可以为null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//包装类变量默认null</span><br><span class="hljs-type">Byte</span> <span class="hljs-variable">by</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><ul><li>包装类可以把基本类型数据转换成字符串形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//转换成字符串</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">ts</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> ts.toString();<br><span class="hljs-type">String</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> Integer.toString(<span class="hljs-number">2</span>);<span class="hljs-comment">//也可以直接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> ts+<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//也可以直接加空变成字符串</span><br>System.out.println(rs + <span class="hljs-number">1</span>);<span class="hljs-comment">//1001</span><br></code></pre></td></tr></table></figure><ul><li>字符类型转换成真实数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字符转成真实数据类型</span><br><span class="hljs-type">int</span>  <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;11&quot;</span>);<span class="hljs-comment">//转换为基本数据类型</span><br>System.out.println(d+<span class="hljs-number">1</span>);<span class="hljs-comment">//转换整数 12</span><br><span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Double.parseDouble(<span class="hljs-string">&quot;1.1&quot;</span>);<br>System.out.println(c+<span class="hljs-number">1</span>);<span class="hljs-comment">//转换浮点数 2.1</span><br><span class="hljs-comment">//通用</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-string">&quot;11&quot;</span>);<span class="hljs-comment">//转换为包装类,用int去接,转换的值可以继续调用方法</span><br><span class="hljs-type">double</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> Double.valueOf(<span class="hljs-string">&quot;1.1&quot;</span>);<span class="hljs-comment">//同上</span><br>System.out.println(i + <span class="hljs-number">1</span>);<span class="hljs-comment">//12</span><br>System.out.println(i1 + <span class="hljs-number">1</span>);<span class="hljs-comment">//2.1</span><br></code></pre></td></tr></table></figure><h2 id="正则表达式-matches"><a href="#正则表达式-matches" class="headerlink" title="正则表达式(.matches)"></a>正则表达式(.matches)</h2><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625130722593.png" alt="image-20220625130722593"></p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625130750454.png" alt="image-20220625130750454"></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625130823086.png" alt="image-20220625130823086" style="zoom: 67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//校验QQ号 必须全数字 6-20位</span><br>    System.out.println(checkQQ(<span class="hljs-string">&quot;2323623353&quot;</span>) ? <span class="hljs-string">&quot;是&quot;</span> : <span class="hljs-string">&quot;不是&quot;</span>);<br><br>&#125; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkQQ</span><span class="hljs-params">(String qq)</span> &#123;<br>    <span class="hljs-comment">//1 判断是否为空</span><br>    <span class="hljs-keyword">if</span> (qq == <span class="hljs-literal">null</span> || qq.length() &lt; <span class="hljs-number">6</span> || qq.length() &gt; <span class="hljs-number">20</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//2 判断是否为数字 遍历</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; qq.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ar</span> <span class="hljs-operator">=</span> qq.charAt(i);<br>        <span class="hljs-comment">//判断是否为数字</span><br>        <span class="hljs-keyword">if</span> (ar &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ar &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//都满足</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//使用正则表达式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkqq1</span><span class="hljs-params">(String qq)</span> &#123;<br>    <span class="hljs-keyword">return</span> qq != <span class="hljs-literal">null</span> &amp;&amp; qq.matches(<span class="hljs-string">&quot;\\d&#123;6,20&#125;&quot;</span>);<span class="hljs-comment">//\d代表数字&quot;\&quot;是转义字符</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//public boolean matches (String regex):判断是否与正则表达式匹配,匹配返回true</span><br>    <span class="hljs-comment">//只能是 a b c</span><br>    System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;[abc]&quot;</span>));<span class="hljs-comment">//true</span><br>    System.out.println(<span class="hljs-string">&quot;z&quot;</span>.matches(<span class="hljs-string">&quot;[abc]&quot;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-comment">//不能是 a b c</span><br>    System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;[^abc]&quot;</span>));<span class="hljs-comment">//false</span><br>    System.out.println(<span class="hljs-string">&quot;z&quot;</span>.matches(<span class="hljs-string">&quot;[^abc]&quot;</span>));<span class="hljs-comment">//true</span><br><br>    System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>));<span class="hljs-comment">//false/是否是数字</span><br>    System.out.println(<span class="hljs-string">&quot;2&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>));<span class="hljs-comment">//true</span><br>    System.out.println(<span class="hljs-string">&quot;222&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>));<span class="hljs-comment">//false/只能匹配一位</span><br>    System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>));<span class="hljs-comment">//true/匹配英文,数字,下划线</span><br>    System.out.println(<span class="hljs-string">&quot;1&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>));<span class="hljs-comment">//true/匹配英文,数字,下划线</span><br>    System.out.println(<span class="hljs-string">&quot;11&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>));<span class="hljs-comment">//false</span><br>    System.out.println(<span class="hljs-string">&quot;你&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>));<span class="hljs-comment">//false</span><br>    <span class="hljs-comment">//校验密码/必须是数字 字母 下划线 至少6位</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">mm</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;623353&quot;</span>;<br>    System.out.println(mm.matches(<span class="hljs-string">&quot;\\w&#123;6,&#125;&quot;</span>));<br>    <span class="hljs-comment">//验证码 必须是数字和英文 必须4位</span><br>    System.out.println(mm.matches(<span class="hljs-string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="hljs-comment">//数字英文</span><br>    System.out.println(mm.matches(<span class="hljs-string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="hljs-comment">//数字英文下划线再排除下划线</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">//校验 手机号 邮箱 电话号</span><br>        <span class="hljs-comment">//checkPhone(in);</span><br>        <span class="hljs-comment">//checkEmail(in);</span><br>        checkmon(in);<br>    &#125;<br><span class="hljs-comment">//验证电话</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkTel</span><span class="hljs-params">(Scanner in)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入电话号&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tel</span> <span class="hljs-operator">=</span> in.next();<br>        <span class="hljs-keyword">if</span> (tel.matches(<span class="hljs-string">&quot;0\\d&#123;2,6&#125;-?\\d&#123;5,20&#125;&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入正确&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;错误&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//手机号</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkPhone</span><span class="hljs-params">(Scanner in)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入手机号&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> in.next();<br>            <span class="hljs-comment">//判断格式是否正确</span><br>            <span class="hljs-keyword">if</span> (phone.matches(<span class="hljs-string">&quot;1[3-9]\\d&#123;9&#125;&quot;</span>)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;格式正确&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;格式错误,请重新输入&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//验证邮箱</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkEmail</span><span class="hljs-params">(Scanner in)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入邮箱&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> in.next();<br>        <span class="hljs-comment">//判断邮箱格式</span><br>        <span class="hljs-keyword">if</span> (email.matches(<span class="hljs-string">&quot;[\\w]&#123;1,30&#125;@[\\w&amp;&amp;[^_]]&#123;2,20&#125;(\\.[\\w&amp;&amp;[^_]]&#123;2,20&#125;)&#123;1,2&#125;&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;是&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&#x27;f&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//验证钱(只能是数字,最多两位小数)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkmon</span><span class="hljs-params">(Scanner in)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">mon</span> <span class="hljs-operator">=</span> in.next();<br>        <span class="hljs-keyword">if</span> (mon.matches(<span class="hljs-string">&quot;\\d+\\.?\\d&#123;1,2&#125;&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;正确&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="分割替换"><a href="#分割替换" class="headerlink" title="分割替换"></a>分割替换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分割 .split</span><br><span class="hljs-type">String</span> <span class="hljs-variable">names</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;一njdsjdjfdij二djsdijs三gfgfg&quot;</span>;<br>String[] arrs = names.split(<span class="hljs-string">&quot;\\w+&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrs.length; i++) &#123;<br>    System.out.println(arrs[i]);<span class="hljs-comment">//一\n二\n三</span><br>&#125;<br><span class="hljs-comment">//替换 .replaceAll</span><br><span class="hljs-type">String</span> <span class="hljs-variable">names1</span> <span class="hljs-operator">=</span> names.replaceAll(<span class="hljs-string">&quot;\\w+&quot;</span>,<span class="hljs-string">&quot; &quot;</span>);<br>System.out.println(names1);<span class="hljs-comment">//一 二 三</span><br></code></pre></td></tr></table></figure><h5 id="正则表达式爬取信息"><a href="#正则表达式爬取信息" class="headerlink" title="正则表达式爬取信息"></a>正则表达式爬取信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//正则表达式爬取内容</span><br><span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;正则表达式练习,爬取文本关键信息,手机号:15555589632,&quot;</span> +<br>        <span class="hljs-string">&quot;邮箱:265466652@anh.edu.cn,电话09343899,400-820-8820&quot;</span>;<br><span class="hljs-comment">//定义爬取规则</span><br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1[3-9]\\d&#123;9&#125;|[\\w&amp;&amp;[^_]]+@[\\w&amp;&amp;[^_]]+(\\.[\\w&amp;&amp;[^_]]+)&#123;1,2&#125;|\\d+-?\\d+-?\\d+&quot;</span>;<br><span class="hljs-comment">//规则编译成对象 .compile</span><br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br><span class="hljs-comment">//内容匹配器对象 .matcher</span><br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(rs);<br><span class="hljs-comment">//开始查找</span><br><span class="hljs-keyword">while</span> (matcher.find())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> matcher.group();<br>    System.out.println(s1);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1 tostring 返回数组内容</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>System.out.println(Arrays.toString(arr));<span class="hljs-comment">//[10,1, 3, 5, 6, 8, 9]</span><br><span class="hljs-comment">//2 数组元素排序</span><br>Arrays.sort(arr);<span class="hljs-comment">//数组排序</span><br>System.out.println(Arrays.toString(arr));<span class="hljs-comment">//[1, 3, 5, 6, 8, 9, 10](默认升序排序)</span><br><span class="hljs-comment">//3 二分搜索(前提:数组必须排好序,否则出bug)</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(arr,<span class="hljs-number">10</span>);<span class="hljs-comment">//找到返回索引位置</span><br>System.out.println(index);<span class="hljs-comment">//6</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index1</span> <span class="hljs-operator">=</span> Arrays.binarySearch(arr,<span class="hljs-number">2</span>);<span class="hljs-comment">//找到返回索引位置,找不到返回(-(应该插入位置)-1)</span><br>System.out.println(index1);<span class="hljs-comment">//-2</span><br></code></pre></td></tr></table></figure><h5 id="自定义数组排序"><a href="#自定义数组排序" class="headerlink" title="自定义数组排序"></a>自定义数组排序</h5><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625131055879.png" alt="image-20220625131055879" style="zoom:67%;" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625131004004.png" alt="image-20220625131004004" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 自定义数组排序规则 Comparator比较器对象</span><br>    <span class="hljs-comment">//1 Arrays的sort方法对于有值特性的数组是默认升序排序</span><br>    <span class="hljs-type">int</span>[] ages = &#123;<span class="hljs-number">23</span>, <span class="hljs-number">22</span>, <span class="hljs-number">11</span>, <span class="hljs-number">54</span>, <span class="hljs-number">22</span>&#125;;<br>    Arrays.sort(ages);<span class="hljs-comment">//排序</span><br>    System.out.println(Arrays.toString(ages));<span class="hljs-comment">//遍历输出</span><br>    <span class="hljs-comment">//2 降序排序(自定义比较器对象,只能支持 引用类型 的排序)</span><br>    Integer[] ages1 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">33</span>, <span class="hljs-number">23</span>, <span class="hljs-number">12</span>, <span class="hljs-number">34</span>&#125;;<br>    Arrays.sort(ages1, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<span class="hljs-comment">//Comparator(匿名内部类)是一个接口(new一个接口)</span><br>        <span class="hljs-comment">//参数1:被排序数组(引用类型)参数2:匿名内部类对象,代表一个比较器对象</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br><span class="hljs-comment">//if (o1 &gt; o2) &#123;</span><br><span class="hljs-comment">//    return 1;</span><br><span class="hljs-comment">//&#125; else if (o1 &lt; o2) &#123;</span><br><span class="hljs-comment">//    return -1;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//return 0;</span><br><span class="hljs-comment">//return 01-02;//升序</span><br>            <span class="hljs-keyword">return</span> o2 - o1;<span class="hljs-comment">//降序</span><br>        &#125;<br>    &#125;);<br>    System.out.println(Arrays.toString(ages1));<br>    Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">3</span>];<br>    students[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王小明&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">178.3</span>);<br>    students[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王明&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">175.3</span>);<br>    students[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-number">176.9</span>);<br>    System.out.println(Arrays.toString(students));<br>    Arrays.sort(students, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>            <span class="hljs-comment">//指定排序规则</span><br><span class="hljs-comment">//return o1.getAge()- o2.getAge();//年龄升序</span><br>            <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight());<span class="hljs-comment">//(要求为整数,所以不能直接转,</span><br>            <span class="hljs-comment">// 调用.compare 比较大小返回±1,0)</span><br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h4 id="选择排序的关键"><a href="#选择排序的关键" class="headerlink" title="选择排序的关键"></a>选择排序的关键</h4><ul><li><p>确定总共需要选择几轮:数组的长度-1.</p></li><li><p>控制每轮从以前位置为基准，与后面元素选择几次。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//选择排序</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">19</span>, <span class="hljs-number">31</span>, <span class="hljs-number">232</span>, <span class="hljs-number">7</span>&#125;;<br><span class="hljs-type">int</span> temp;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">//固定一位和后面每一位相比较</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &gt; arr[j]) &#123;<br>            temp = arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br>System.out.println(Arrays.toString(arr));<br></code></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//冒泡排序(升序)</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">23</span>, <span class="hljs-number">15</span>&#125;;<br>        <span class="hljs-type">int</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(Arrays.toString(arr));<br>        System.out.println(binarySearch(arr, <span class="hljs-number">4</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二分法查找数在数组的索引(升序)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr  数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 要查找的数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 输出索引位置(未查到输出 - 1)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> data)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//定义最小边界</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<span class="hljs-comment">//定义最大边界</span><br>        <span class="hljs-comment">//如果min=max还没找到,代表值不存在于数组,会继续进行一次运算,min+1或max会-1,超出数组界限,min就会大于max,就会退出循环,输出-1</span><br>        <span class="hljs-keyword">while</span> (min &lt;= max) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">middleIndex</span> <span class="hljs-operator">=</span> (min + max) / <span class="hljs-number">2</span>;<span class="hljs-comment">//定义中间值索引</span><br>            <span class="hljs-keyword">if</span> (data &gt; arr[middleIndex]) &#123;<span class="hljs-comment">//要查找的数大于中间值</span><br>                min = middleIndex + <span class="hljs-number">1</span>;<span class="hljs-comment">//最小值换成中间+1(因为已经大于中间了所以可以去掉中间)</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data &lt; arr[middleIndex]) &#123;<span class="hljs-comment">//小于中间值</span><br>                max = middleIndex - <span class="hljs-number">1</span>;<span class="hljs-comment">//最大值换成中间值(已经小于中间,所以去掉中间)</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//值相等代表找到</span><br>                <span class="hljs-keyword">return</span> middleIndex;<span class="hljs-comment">//输出索引位数</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//都没找到输出-1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><ul><li><h5 id="简化匿名内部类的代码写法"><a href="#简化匿名内部类的代码写法" class="headerlink" title="简化匿名内部类的代码写法"></a>简化匿名内部类的代码写法</h5></li><li><h5 id="只能简写接口-且接口只有一个抽象方法的形式-函数式接口"><a href="#只能简写接口-且接口只有一个抽象方法的形式-函数式接口" class="headerlink" title="只能简写接口,且接口只有一个抽象方法的形式(函数式接口)"></a><font color='red'>只能简写接口,且接口只有一个抽象方法的形式(函数式接口)</font></h5></li><li><h5 id="FunctionalInterface-用来检验是否是函数式接口-加在定义接口前-一旦加上就必须为函数式接口"><a href="#FunctionalInterface-用来检验是否是函数式接口-加在定义接口前-一旦加上就必须为函数式接口" class="headerlink" title="@FunctionalInterface 用来检验是否是函数式接口,加在定义接口前,一旦加上就必须为函数式接口"></a>@FunctionalInterface 用来检验是否是函数式接口,加在定义接口前,一旦加上就必须为函数式接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义接口</span><br><span class="hljs-meta">@FunctionalInterface</span><span class="hljs-comment">//(函数式接口 校验)</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Swimming</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//Lambda只能简化只有一个抽象方法的接口(函数式接口)</span><br>        <span class="hljs-comment">//改写接口方法</span><br>        <span class="hljs-type">Swimming</span> <span class="hljs-variable">swimming</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swimming</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;改写接口方法&quot;</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//Lambda 简化改写</span><br>        <span class="hljs-comment">//就是取swim后面的部分,加上箭头</span><br>        <span class="hljs-type">Swimming</span> <span class="hljs-variable">swimming1</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;改写接口方法&quot;</span>);<br>        &#125;;<br>        go(swimming1);<span class="hljs-comment">//运行定义的方法</span><br>    &#125;<br><br>    <span class="hljs-comment">//定义方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">(Swimming swimming)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;运行go方法&quot;</span>);<br>        swimming.swim();<span class="hljs-comment">//运行接口中的方法//这里运行的是被改写过的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Lambda 简写 案例(数组自定义排序)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//数组排序(自定义排序只支持引用类型)</span><br>        Integer[] arr = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">23</span>, <span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">19</span>&#125;;<br>        Integer[] arr1 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">23</span>, <span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">19</span>&#125;;<br>        Arrays.sort(arr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1 - o2;<span class="hljs-comment">//升序</span><br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(arr));<span class="hljs-comment">//输出[1, 2, 6, 12, 19, 23, 34]</span><br>        <span class="hljs-comment">//Lambda简写(降序)</span><br>        Arrays.sort(arr1, (Integer o1, Integer o2) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> o2 - o1;<br>        &#125;);<span class="hljs-comment">//等同于上面自定义排序</span><br>        System.out.println(Arrays.toString(arr1));<span class="hljs-comment">//[34, 23, 19, 12, 6, 2, 1]</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625131515870.png" alt="image-20220625131515870" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Lambda表达式进一步简写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1 正常写法</span><br>        <span class="hljs-type">People</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>                <span class="hljs-keyword">return</span> a;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//2 Lambda简写</span><br>        <span class="hljs-type">People</span> <span class="hljs-variable">people1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span> a) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> a;<br>        &#125;;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Lambda进一步简写</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 1 数据类型可不写 int</span><br>        <span class="hljs-type">People</span> <span class="hljs-variable">people2</span> <span class="hljs-operator">=</span> (a) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> a;<br>        &#125;;<br>        <span class="hljs-comment">// 2 只有一个参数 形参()可不写</span><br>        <span class="hljs-type">People</span> <span class="hljs-variable">people3</span> <span class="hljs-operator">=</span> a -&gt; &#123;<br>            <span class="hljs-keyword">return</span> a;<br>        &#125;;<br>        <span class="hljs-comment">// 3 单行方法体&#123;&#125;可不写 且 若是return /return/必须省略</span><br>        <span class="hljs-type">People</span> <span class="hljs-variable">people4</span> <span class="hljs-operator">=</span> a -&gt; a;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>;<span class="hljs-comment">//定义返回整数的方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Collection集合-单例集合"><a href="#Collection集合-单例集合" class="headerlink" title="Collection集合(单例集合)"></a>Collection集合(单例集合)</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625131649327.png" alt="image-20220625131649327" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Collection集合体系的特点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//有序 可重复 有索引(List分支)</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<span class="hljs-comment">//多态</span><br>        list.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;kong&quot;</span>);<br>        list.add(<span class="hljs-number">1</span>);<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-literal">true</span>);<br>        System.out.println(list);<span class="hljs-comment">///[java, java, kong, 1, 123, true]</span><br>        <span class="hljs-comment">//无序 不重复 无索引(Set分支)</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<span class="hljs-comment">//多态</span><br>        list1.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        list1.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        list1.add(<span class="hljs-string">&quot;kong&quot;</span>);<br>        list1.add(<span class="hljs-number">1</span>);<br>        list1.add(<span class="hljs-number">123</span>);<br>        list1.add(<span class="hljs-literal">true</span>);<br>        System.out.println(list1);<span class="hljs-comment">//[1, java, 123, kong, true]</span><br>        System.out.println(<span class="hljs-string">&quot;---------------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//固定为整数类型集合</span><br>        Collection&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list2.add(<span class="hljs-number">1</span>);<br>        System.out.println(list2);<span class="hljs-comment">//[1]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625131855197.png" alt="image-20220625131855197" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//HashSet:添加的元素 无序 无索引 不能重复</span><br>        Collection&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1 添加元素(成功返回true)</span><br>        list.add(<span class="hljs-string">&quot;元素1&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;元素2&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;元素3&quot;</span>);<br>        System.out.println(list);<span class="hljs-comment">//[元素1, 元素2, 元素3]</span><br>        <span class="hljs-comment">// 2 清空集合</span><br>        <span class="hljs-comment">//list.clear();//清空集合</span><br>        <span class="hljs-comment">// 3 判断集合是否为空 为空返回true</span><br>        System.out.println(list.isEmpty());<span class="hljs-comment">//false</span><br>        <span class="hljs-comment">// 4 获取元素大小</span><br>        System.out.println(list.size());<span class="hljs-comment">//3</span><br>        <span class="hljs-comment">// 5 判断集合是否包含某个元素</span><br>        System.out.println(list.contains(<span class="hljs-string">&quot;元素1&quot;</span>));<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">// 6 删除某个元素:有重复默认删除最前面(不支持索引删除)根据名称</span><br>        System.out.println(list.remove(<span class="hljs-string">&quot;元素2&quot;</span>));<span class="hljs-comment">//删除成功返回true</span><br>        System.out.println(list);<span class="hljs-comment">//[元素1, 元素3]</span><br>        <span class="hljs-comment">// 7 集合转换成数组</span><br>        Object[] arrs = list.toArray();<span class="hljs-comment">//因为可以强行存入别的类型元素,所以用OBject类型数组来接</span><br>        System.out.println(Arrays.toString(arrs));<span class="hljs-comment">//[元素1, 元素3]</span><br>        <span class="hljs-comment">// 8 集合元素合并</span><br>        Collection&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list2.add(<span class="hljs-number">1</span>);<br>        list2.add(<span class="hljs-number">2</span>);<br>        Collection&lt;Integer&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list3.add(<span class="hljs-number">11</span>);<br>        list3.add(<span class="hljs-number">22</span>);<br>        list2.addAll(list3);<span class="hljs-comment">//将数组3元素合并到2</span><br>        System.out.println(list3);<span class="hljs-comment">//[11, 22]//list3元素不变</span><br>        System.out.println(list2);<span class="hljs-comment">//[1, 2, 11, 22]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><ul><li><h5 id="在java中的代表是iterator-集合专用的遍历方式"><a href="#在java中的代表是iterator-集合专用的遍历方式" class="headerlink" title="在java中的代表是iterator,集合专用的遍历方式"></a>在java中的代表是<font color='red'>iterator</font>,集合专用的遍历方式</h5></li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625132259034.png" alt="image-20220625132259034" style="zoom:80%;" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625132333275.png" alt="image-20220625132333275" style="zoom:67%;" /><ul><li><h5 id="itertor默认指向集合外-然后向0索引移动-这里hasNext是判断下一个位置有没有元素-next是迭代器先下移再输出该位置元素"><a href="#itertor默认指向集合外-然后向0索引移动-这里hasNext是判断下一个位置有没有元素-next是迭代器先下移再输出该位置元素" class="headerlink" title="itertor默认指向集合外,然后向0索引移动,这里hasNext是判断下一个位置有没有元素,next是迭代器先下移再输出该位置元素."></a>itertor默认指向<font color='red'>集合外</font>,然后向0索引移动,这里hasNext是判断下一个位置有没有元素,next是迭代器<font color='red'>先下移</font>再输出该位置元素.</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//遍历集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Collection&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;小王&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;小黄&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;小孙&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;小明&quot;</span>);<br>        System.out.println(list);<span class="hljs-comment">//[小王, 小黄, 小孙, 小明]</span><br>        <span class="hljs-comment">// 1 得到当前集合的迭代器对象</span><br>        Iterator&lt;String&gt; iterator = list.iterator();<br><span class="hljs-comment">//        String ele = iterator.next();/向后移一位然后取出</span><br><span class="hljs-comment">//        System.out.println(ele);//小王</span><br><span class="hljs-comment">//        System.out.println(iterator.next());//直接取出//小黄</span><br><span class="hljs-comment">//        System.out.println(iterator.next());//直接取出//小孙</span><br><span class="hljs-comment">//        System.out.println(iterator.next());//直接取出//小明</span><br>        <span class="hljs-comment">//不能再进行取值,已经越界(会报错)</span><br>        <span class="hljs-comment">//采用循环进行遍历</span><br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<span class="hljs-comment">//判断条件是有后一位没有元素</span><br>            System.out.println(iterator.next());<span class="hljs-comment">//后移一位并取出当前元素</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="foreach-增强for"><a href="#foreach-增强for" class="headerlink" title="foreach(增强for)"></a>foreach(增强for)</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625132453199.png" alt="image-20220625132453199"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数组 foreach(可以直接数组名/集合名.for)快捷输入</span><br>String [] arr = &#123;<span class="hljs-string">&quot;一&quot;</span>,<span class="hljs-string">&quot;二&quot;</span>,<span class="hljs-string">&quot;三&quot;</span>&#125;;<br><span class="hljs-keyword">for</span>(String q:arr)&#123;<br>    System.out.println(q);<span class="hljs-comment">//输出一\n二\n三</span><br>&#125;<br><span class="hljs-comment">//集合</span><br>Collection&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">2</span>);<br>list.add(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span>(Integer a:list)&#123;<span class="hljs-comment">//也可以写int</span><br>    System.out.println(a);<span class="hljs-comment">//输出1 \n 2 \n 3</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="lambda表达式遍历"><a href="#lambda表达式遍历" class="headerlink" title="lambda表达式遍历"></a>lambda表达式遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//lambda表达式遍历(集合)</span><br><span class="hljs-comment">//集合</span><br>Collection&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">2</span>);<br>list.add(<span class="hljs-number">3</span>);<br>list.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Integer&gt;() &#123;<span class="hljs-comment">//forEach源代码里是增强for循环等于将集合传入,再输出元素</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Integer integer)</span> &#123;<br>        System.out.println(integer);<br>    &#125;<br>&#125;);<br>list.forEach(i -&gt; &#123;System.out.println(i);&#125;);<span class="hljs-comment">//lambda简写</span><br><span class="hljs-comment">//集合2</span><br>Collection&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list1.add(<span class="hljs-string">&quot;yi&quot;</span>);<br>list1.add(<span class="hljs-string">&quot;er&quot;</span>);<br>list1.add(<span class="hljs-string">&quot;san&quot;</span>);<br>list1.forEach(a-&gt;&#123;System.out.println(a);&#125;);<span class="hljs-comment">//依次输出元素</span><br>list1.forEach(System.out::println);<span class="hljs-comment">//方法引用(等同于上行)</span><br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1 定义电影类//定义了Movie类</span><br><span class="hljs-comment">// 2 定义集合存储电影对象</span><br>Collection&lt;Movie&gt; movies = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>movies.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;&lt;你好,李焕英&gt;&quot;</span>,<span class="hljs-number">9.5</span>,<span class="hljs-string">&quot;贾玲&quot;</span>));<br>movies.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;&lt;唐人街探案&gt;&quot;</span>,<span class="hljs-number">9.8</span>,<span class="hljs-string">&quot;王宝强&quot;</span>));<br>movies.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;&lt;战狼2&gt;&quot;</span>,<span class="hljs-number">9.2</span>,<span class="hljs-string">&quot;吴京&quot;</span>));<br><span class="hljs-comment">// 3 遍历集合对象</span><br>movies.forEach(s-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;电影:&quot;</span>+s.getName()+<span class="hljs-string">&quot;评分:&quot;</span>+s.getScore()+<span class="hljs-string">&quot;主演:&quot;</span>+s.getActor());<span class="hljs-comment">//依次输出对象各项值</span><br>    <span class="hljs-comment">//电影:&lt;你好,李焕英&gt;评分:9.5主演:贾玲...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><a href="https://www.bilibili.com/video/BV1Cv411372m?p=130&vd_source=72ccd606f0bdbb6eec81a9fb8e953a57">数据结构</a></p><h2 id="List系列集合"><a href="#List系列集合" class="headerlink" title="List系列集合"></a>List系列集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建ArrayLIst集合</span><br><span class="hljs-comment">//List:有序,可重复,有索引</span><br><span class="hljs-comment">//ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();//一般写法</span><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//多态(list为父类)//经典代码</span><br>list.add(<span class="hljs-string">&quot;字符&quot;</span>);<br>list.add(<span class="hljs-string">&quot;字符&quot;</span>);<br>list.add(<span class="hljs-string">&quot;zifu&quot;</span>);<br>list.add(<span class="hljs-string">&quot;zifu&quot;</span>);<br><span class="hljs-comment">// 2.在某个索引位置插入元素</span><br>list.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;插入&quot;</span>);<span class="hljs-comment">//在索引2处插入</span><br>System.out.println(list);<span class="hljs-comment">//[字符, 字符, 插入, zifu, zifu]</span><br><span class="hljs-comment">// 3.根据索引删除元素 返回被删除的元素</span><br>System.out.println(list.remove(<span class="hljs-number">2</span>));<span class="hljs-comment">//返回&quot;插入&quot; 删除了索引2的&quot;插入&quot;</span><br>System.out.println(list);<span class="hljs-comment">//[字符, 字符, zifu, zifu]</span><br><span class="hljs-comment">// 4.根据索引获取元素,返回指定索引位置的元素</span><br>System.out.println(list.get(<span class="hljs-number">2</span>));<span class="hljs-comment">//获取索引位置2处的元素&quot;zifu&quot; 并输出</span><br><span class="hljs-comment">// 5.修改索引位置处的元素值,返回 修改前的元素值</span><br>System.out.println(list.set(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;修改&quot;</span>));<span class="hljs-comment">//将索引2元素修改为&quot;修改&quot;,返回修改前的元素值&quot;zifu&quot;</span><br>System.out.println(list);<span class="hljs-comment">//[字符, 字符, 修改, zifu]</span><br></code></pre></td></tr></table></figure><p>遍历方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//集合各种遍历方式</span><br><span class="hljs-comment">//定义集合</span><br>List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">2</span>);<br>list.add(<span class="hljs-number">3</span>);<br>System.out.println(list);<br><span class="hljs-comment">//for循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    System.out.println(list.get(i));<span class="hljs-comment">//依次输出</span><br>&#125;<br><span class="hljs-comment">//迭代器</span><br>Iterator&lt;Integer&gt; iterator = list.listIterator();<span class="hljs-comment">//定义构造器</span><br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<span class="hljs-comment">//判断位置是否有元素</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">ele</span> <span class="hljs-operator">=</span> iterator.next();<span class="hljs-comment">//指针后移并输出元素</span><br>    System.out.println(ele);<span class="hljs-comment">//打印对应元素</span><br>&#125;<br><span class="hljs-comment">//foreach</span><br><span class="hljs-keyword">for</span> (Integer integer : list) &#123;<br>    System.out.println(integer);<span class="hljs-comment">//依次输出</span><br>&#125;<br><span class="hljs-comment">//lambda表达式</span><br>list.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Integer&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Integer integer)</span> &#123;<br>        System.out.println(integer);<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//lambda简写</span><br>list.forEach(s -&gt; &#123;<br>    System.out.println(s);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="ArrayList底层原理"><a href="#ArrayList底层原理" class="headerlink" title="ArrayList底层原理"></a>ArrayList底层原理</h3><ul><li><h5 id="ArrayList-x2F-底层是基于数组实现的：根据索引定位元素快，增删需要做元素的移位操作。"><a href="#ArrayList-x2F-底层是基于数组实现的：根据索引定位元素快，增删需要做元素的移位操作。" class="headerlink" title="ArrayList&#x2F;底层是基于数组实现的：根据索引定位元素快，增删需要做元素的移位操作。"></a>ArrayList&#x2F;底层是基于数组实现的：根据索引定位元素快，增删需要做元素的移位操作。</h5></li><li><h5 id="第一次创建集合并添加第一个元素的时候，在底层创建一个默认长度为10的数组。"><a href="#第一次创建集合并添加第一个元素的时候，在底层创建一个默认长度为10的数组。" class="headerlink" title="第一次创建集合并添加第一个元素的时候，在底层创建一个默认长度为10的数组。"></a>第一次创建集合并添加第一个元素的时候，在底层创建一个默认长度为10的数组。</h5></li><li><h5 id="再次超出会将长度扩大为原来的1-5倍"><a href="#再次超出会将长度扩大为原来的1-5倍" class="headerlink" title="再次超出会将长度扩大为原来的1.5倍"></a>再次超出会将长度扩大为原来的1.5倍</h5></li></ul><h3 id="LinkedList底层原理"><a href="#LinkedList底层原理" class="headerlink" title="LinkedList底层原理"></a>LinkedList底层原理</h3><ul><li>ArrayList底层是基于数组实现的:根据索引定位元素快，增删需要做的移位操作。</li><li>第一次创建集合并添加第一个元素的时候，在底层创建一个默认长度为10的数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//LinkedList完成队列结构和栈结构(双链表)</span><br><span class="hljs-comment">//1 栈</span><br>LinkedList&lt;String&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><span class="hljs-comment">//入栈/压栈(先入后出)//添加和取出都为开头或末尾则为栈(相同)</span><br>stack.push(<span class="hljs-string">&quot;一&quot;</span>);<span class="hljs-comment">//添加元素到开头,addFirst等同于push(压栈)</span><br>stack.addFirst(<span class="hljs-string">&quot;二&quot;</span>);<br>stack.addFirst(<span class="hljs-string">&quot;三&quot;</span>);<br>System.out.println(stack);<span class="hljs-comment">//[三, 二, 一]</span><br><span class="hljs-comment">//出栈(先输出后进来的元素)</span><br>System.out.println(stack.pop());<span class="hljs-comment">//移除开头元素并将其输出/三,removeFirst等同于pop(出栈)</span><br>System.out.println(stack);<span class="hljs-comment">//[二, 一]</span><br><br><span class="hljs-comment">//2 队列</span><br>LinkedList&lt;String&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><span class="hljs-comment">//入队(先入先出)//添加和取出互相不同(开头和末尾/末尾和开头)则为队列(不同)</span><br>queue.addLast(<span class="hljs-string">&quot;一&quot;</span>);<span class="hljs-comment">//添加元素到末尾</span><br>queue.addLast(<span class="hljs-string">&quot;二&quot;</span>);<br>queue.addLast(<span class="hljs-string">&quot;三&quot;</span>);<br>System.out.println(queue);<span class="hljs-comment">//[一, 二, 三](最后进入的放在最末尾)</span><br>System.out.println(queue.removeFirst());<span class="hljs-comment">//移除开头元素并将其输出/一</span><br>System.out.println(queue);<span class="hljs-comment">//[二, 三]</span><br></code></pre></td></tr></table></figure><h3 id="删除集合中同样的元素-集合并发修改异常问题"><a href="#删除集合中同样的元素-集合并发修改异常问题" class="headerlink" title="删除集合中同样的元素(集合并发修改异常问题)"></a>删除集合中同样的元素(集合并发修改异常问题)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1 准备数据</span><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;第一个&quot;</span>);<br>list.add(<span class="hljs-string">&quot;第二个&quot;</span>);<br>list.add(<span class="hljs-string">&quot;第一个&quot;</span>);<br>list.add(<span class="hljs-string">&quot;第四个&quot;</span>);<br><span class="hljs-comment">//System.out.println(list);//[第一个, 第二个, 第一个, 第四个]</span><br><span class="hljs-comment">//删除所有的&quot;第一个&quot;</span><br><span class="hljs-comment">//a 迭代器删除</span><br>Iterator&lt;String&gt; iterator = list.listIterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext ())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ele</span> <span class="hljs-operator">=</span> iterator.next();<br>    <span class="hljs-keyword">if</span> (ele.equals(<span class="hljs-string">&quot;第一个&quot;</span>))&#123;<br><span class="hljs-comment">//list.remove(&quot;第一个&quot;);//这样删除后,元素会前移动,所以错误</span><br>    iterator.remove();<span class="hljs-comment">//删除当前元素,并且不会移动</span><br>    &#125;<br>&#125;<br>System.out.println(list);<span class="hljs-comment">//[第二个, 第四个]</span><br><span class="hljs-comment">//b foreach删除(无法完成,元素移动,报错)</span><br><span class="hljs-comment">//for (String s : list) &#123;</span><br><span class="hljs-comment">//    if(Objects.equals(s,&quot;第一个&quot;));</span><br><span class="hljs-comment">//    list.remove(&quot;第一个&quot;);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//System.out.println(list);</span><br>  c lambda表达式(同上)<br><span class="hljs-comment">//list.forEach(s -&gt; &#123;</span><br><span class="hljs-comment">//    if (Objects.equals(s, &quot;第一个&quot;)) &#123;</span><br><span class="hljs-comment">//        list.remove(&quot;第一个&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;);</span><br><span class="hljs-comment">//d for循环</span><br><span class="hljs-comment">//i--</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>    <span class="hljs-keyword">if</span>(Objects.equals(<span class="hljs-string">&quot;第一个&quot;</span>,s))&#123;<br>        list.remove(<span class="hljs-string">&quot;第一个&quot;</span>);<br>        i--;<span class="hljs-comment">//回退一格</span><br>    &#125;<br>&#125;<br>System.out.println(list);<span class="hljs-comment">//[第二个, 第四个]</span><br><span class="hljs-comment">//倒序</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> list.size()-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>    <span class="hljs-keyword">if</span>(Objects.equals(<span class="hljs-string">&quot;第一个&quot;</span>,s))&#123;<br>        list.remove(<span class="hljs-string">&quot;第一个&quot;</span>);<br>    &#125;<br>&#125;<br>System.out.println(list);<span class="hljs-comment">//[第二个, 第四个]</span><br></code></pre></td></tr></table></figure><h2 id="泛型深入"><a href="#泛型深入" class="headerlink" title="泛型深入"></a>泛型深入</h2><ul><li>泛型:是JDK5中引入的特性，可以在编译阶段约束操作的数据类型，并进行检查。</li><li>泛型的格式:&lt;数据类型&gt;;注意:泛型只能支持引用数据类型。</li><li>集合体系的全部接口和实现类都是支持泛型的使用的。</li></ul><blockquote><p>泛型类(Arraylist…)&#x2F;泛型方法&#x2F;泛型接口(Collection)</p></blockquote><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><ul><li><h5 id="定义类的同时定义了泛型的类就是泛型类"><a href="#定义类的同时定义了泛型的类就是泛型类" class="headerlink" title="定义类的同时定义了泛型的类就是泛型类"></a>定义类的同时定义了泛型的类就是泛型类</h5></li><li><h5 id="泛型类格式-修饰符-class-类名-lt-泛型变量-gt"><a href="#泛型类格式-修饰符-class-类名-lt-泛型变量-gt" class="headerlink" title="泛型类格式: 修饰符 class 类名&lt;泛型变量&gt;{ }"></a>泛型类格式: 修饰符 class 类名&lt;泛型变量&gt;{ }</h5></li></ul><blockquote><h5 id="范例-public-class-MyArrarList"><a href="#范例-public-class-MyArrarList" class="headerlink" title="范例:public class MyArrarList{ }"></a>范例:public class MyArrarList<T>{ }</h5></blockquote><ul><li><h5 id="此处泛型变量可以随意写为任意标识-常见的如E-T-K-V等"><a href="#此处泛型变量可以随意写为任意标识-常见的如E-T-K-V等" class="headerlink" title="此处泛型变量可以随意写为任意标识,常见的如E,T,K,V等."></a>此处泛型变量可以随意写为任意标识,常见的如E,T,K,V等.</h5></li><li><h5 id="作用-编译阶段可以指定数据类型-类似于集合的作用"><a href="#作用-编译阶段可以指定数据类型-类似于集合的作用" class="headerlink" title="作用:编译阶段可以指定数据类型,类似于集合的作用."></a>作用:编译阶段可以指定数据类型,类似于集合的作用.</h5></li></ul><h4 id="模拟ArrayList集合自定义一个集合MyArrayList集合-完成添加和删除功能的泛型设计即可"><a href="#模拟ArrayList集合自定义一个集合MyArrayList集合-完成添加和删除功能的泛型设计即可" class="headerlink" title="模拟ArrayList集合自定义一个集合MyArrayList集合,完成添加和删除功能的泛型设计即可"></a>模拟ArrayList集合自定义一个集合MyArrayList集合,完成添加和删除功能的泛型设计即可</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ul><li><h5 id="把出现泛型变量的地方全部替换成传输的真实数据"><a href="#把出现泛型变量的地方全部替换成传输的真实数据" class="headerlink" title="把出现泛型变量的地方全部替换成传输的真实数据"></a>把出现泛型变量的地方全部替换成传输的真实数据</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayList</span>&lt;E&gt; &#123;<span class="hljs-comment">//定义泛型</span><br>    <span class="hljs-comment">//定义添加方法</span><br>    <span class="hljs-comment">//还没学数据到内存,所以先套壳</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;E&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E a)</span>&#123;<span class="hljs-comment">//定义泛型方法</span><br>        list.add(a);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(E e)</span>&#123;<span class="hljs-comment">//定义泛型方法</span><br>        list.remove(e);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> list.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//模拟ArrayList定义一个MyArrayList,泛型设计</span><br>    MyArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyArrayList</span>&lt;&gt;();<br>    list.add(<span class="hljs-string">&quot;dsdsd&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;dsdd&quot;</span>);<br>    System.out.println(list);<br>    list.remove(<span class="hljs-string">&quot;dsdd&quot;</span>);<br>    System.out.println(list);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><ul><li><h5 id="定义方法的同时定义了泛型的方法就是泛型方法"><a href="#定义方法的同时定义了泛型的方法就是泛型方法" class="headerlink" title="定义方法的同时定义了泛型的方法就是泛型方法"></a>定义方法的同时定义了泛型的方法就是泛型方法</h5></li><li><h5 id="泛型方法格式-修饰符-lt-泛型变量-gt-方法返回值-方法名称-形参列表"><a href="#泛型方法格式-修饰符-lt-泛型变量-gt-方法返回值-方法名称-形参列表" class="headerlink" title="泛型方法格式:修饰符&lt;泛型变量&gt;方法返回值 方法名称(形参列表){}"></a>泛型方法格式:修饰符&lt;泛型变量&gt;方法返回值 方法名称(形参列表){}</h5></li></ul><blockquote><h5 id="范例-publicvoid-show-T-t"><a href="#范例-publicvoid-show-T-t" class="headerlink" title="范例:publicvoid show(T t){ }"></a>范例:public<T>void show(T t){ }</h5></blockquote><ul><li><h5 id="作用-方法中可以使用泛型接收一切实际类型的参数-方法更具备通用性"><a href="#作用-方法中可以使用泛型接收一切实际类型的参数-方法更具备通用性" class="headerlink" title="作用:方法中可以使用泛型接收一切实际类型的参数,方法更具备通用性."></a>作用:方法中可以使用泛型接收一切实际类型的参数,方法更具备通用性.</h5></li></ul><h4 id="给任意一个类型的数组-都能返回它的内容-也就是Arrays-toString-数组-的功能"><a href="#给任意一个类型的数组-都能返回它的内容-也就是Arrays-toString-数组-的功能" class="headerlink" title="给任意一个类型的数组,都能返回它的内容.也就是Arrays.toString(数组)的功能"></a>给任意一个类型的数组,都能返回它的内容.也就是Arrays.toString(数组)的功能</h4><h5 id="原理-把出现泛型变量的地方全部替换成传输的真实数据类型"><a href="#原理-把出现泛型变量的地方全部替换成传输的真实数据类型" class="headerlink" title="原理:把出现泛型变量的地方全部替换成传输的真实数据类型."></a>原理:把出现泛型变量的地方全部替换成传输的真实数据类型.</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericityDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] arr = &#123;<span class="hljs-string">&quot;一个&quot;</span>,<span class="hljs-string">&quot;两个&quot;</span>,<span class="hljs-string">&quot;三个&quot;</span>&#125;;<br>        Integer[] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        Byte[] arr2 = &#123;&#125;;<br>        Object[] arr3 = &#123;<span class="hljs-number">1</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;11&quot;</span>,<span class="hljs-number">2.33</span>,<span class="hljs-string">&#x27;q&#x27;</span>&#125;;<br>        printArray(arr3);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(T[] arr)</span>&#123;<br>        <span class="hljs-keyword">if</span>(arr!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[&quot;</span>);<span class="hljs-comment">//拼接</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                stringBuilder.append(arr[i]).append(i == arr.length-<span class="hljs-number">1</span>?<span class="hljs-string">&quot;&quot;</span>:<span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>            stringBuilder.append(<span class="hljs-string">&quot;]&quot;</span>);<br>            System.out.println(stringBuilder);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(arr);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><ul><li><h5 id="使用了泛型定义的接口就是泛型接口"><a href="#使用了泛型定义的接口就是泛型接口" class="headerlink" title="使用了泛型定义的接口就是泛型接口"></a>使用了泛型定义的接口就是泛型接口</h5></li><li><h5 id="泛型接口格式-修饰符-interface-接口名称-lt-泛型变量-gt"><a href="#泛型接口格式-修饰符-interface-接口名称-lt-泛型变量-gt" class="headerlink" title="泛型接口格式:修饰符 interface 接口名称&lt;泛型变量&gt;{}"></a>泛型接口格式:修饰符 interface 接口名称&lt;泛型变量&gt;{}</h5></li></ul><blockquote><h5 id="范例-public-interface-Date"><a href="#范例-public-interface-Date" class="headerlink" title="范例:public interface Date{ }"></a>范例:public interface Date<T>{ }</h5></blockquote><ul><li><h5 id="作用-泛型接口可以约束实现类-实现类可以在实现接口的时候传入自己操作的数据类型这样重写的方法都将是针对于该数据类型的操作"><a href="#作用-泛型接口可以约束实现类-实现类可以在实现接口的时候传入自己操作的数据类型这样重写的方法都将是针对于该数据类型的操作" class="headerlink" title="作用: 泛型接口可以约束实现类,实现类可以在实现接口的时候传入自己操作的数据类型这样重写的方法都将是针对于该数据类型的操作."></a>作用: 泛型接口可以约束实现类,实现类可以在实现接口的时候传入自己操作的数据类型这样重写的方法都将是针对于该数据类型的操作.</h5></li></ul><h5 id="教务系统-提供一个接口可约束一定要完成数据-学生-老师-的增删改查操作"><a href="#教务系统-提供一个接口可约束一定要完成数据-学生-老师-的增删改查操作" class="headerlink" title="教务系统,提供一个接口可约束一定要完成数据(学生,老师)的增删改查操作"></a>教务系统,提供一个接口可约束一定要完成数据(学生,老师)的增删改查操作</h5><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><ul><li><h5 id="实现类可以在实现接口的时候传入自己操作的数据类型-这样重写的方法都是针对于该类型的操作"><a href="#实现类可以在实现接口的时候传入自己操作的数据类型-这样重写的方法都是针对于该类型的操作" class="headerlink" title="实现类可以在实现接口的时候传入自己操作的数据类型,这样重写的方法都是针对于该类型的操作"></a>实现类可以在实现接口的时候传入自己操作的数据类型,这样重写的方法都是针对于该类型的操作</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//泛型接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Date</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T t)</span>;<span class="hljs-comment">//增</span><br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<span class="hljs-comment">//删</span><br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(T t)</span>;<span class="hljs-comment">//改</span><br><br>    T <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<span class="hljs-comment">//查(返回T类型的方法)</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义学生类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//泛型接口的实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Date</span>&lt;Student&gt;&#123;<span class="hljs-comment">//Date接口的实现类,实现的时候定义类型,约定只能传入Student类型的数据</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Student student)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Student student)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型通配符-上下限-泛型语法"><a href="#泛型通配符-上下限-泛型语法" class="headerlink" title="泛型通配符,上下限(泛型语法)"></a>泛型通配符,上下限(泛型语法)</h3><h5 id="通配符"><a href="#通配符" class="headerlink" title="通配符:?"></a>通配符:?</h5><ul><li><h5 id="可以在”使用泛型”的时候代表一切类型"><a href="#可以在”使用泛型”的时候代表一切类型" class="headerlink" title="?可以在”使用泛型”的时候代表一切类型"></a>?可以在”使用泛型”的时候代表一切类型</h5></li><li><h5 id="E-T-K-V是在定义泛型的时候使用的"><a href="#E-T-K-V是在定义泛型的时候使用的" class="headerlink" title="E T K V是在定义泛型的时候使用的"></a>E T K V是在定义泛型的时候使用的</h5></li></ul><h5 id="泛型通配符-案例"><a href="#泛型通配符-案例" class="headerlink" title="泛型通配符:案例"></a>泛型通配符:案例</h5><ul><li><h5 id="开发极品飞车的游戏-所有汽车一起参加比赛"><a href="#开发极品飞车的游戏-所有汽车一起参加比赛" class="headerlink" title="开发极品飞车的游戏,所有汽车一起参加比赛"></a>开发极品飞车的游戏,所有汽车一起参加比赛</h5></li></ul><h5 id="泛型上下限"><a href="#泛型上下限" class="headerlink" title="泛型上下限"></a>泛型上下限</h5><ul><li><h5 id="extends-Car-必须是Car或者其子类-泛型上限-super-Car-必须是Car或者其父类-泛型下限"><a href="#extends-Car-必须是Car或者其子类-泛型上限-super-Car-必须是Car或者其父类-泛型下限" class="headerlink" title="?extends Car(必须是Car或者其子类 泛型上限)?super Car(必须是Car或者其父类 泛型下限)"></a><font color='red'>?extends Car</font>(必须是Car或者其子类 泛型上限)<font color='red'>?super Car</font>(必须是Car或者其父类 泛型下限)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 案例: 开发极品飞车的游戏,所有汽车一起参加比赛 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericityDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;BMW&gt; bmws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        bmws.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BMW</span>());<br>        bmws.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BMW</span>());<br>        bmws.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BMW</span>());<br>        GenericityDemo.go(bmws);<br>        ArrayList&lt;BENZ&gt; benzs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        benzs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BENZ</span>());<br>        benzs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BENZ</span>());<br>        benzs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BENZ</span>());<br>        GenericityDemo.go(benzs);<br>    &#125;<br>    <span class="hljs-comment">//使用泛型通配符?,可以传入任意类型的集合,否则只能固定一个类型,不能宝马奔驰同时调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">(ArrayList&lt;?&gt; c)</span>&#123;<span class="hljs-comment">//这里类型为父类Car也不行,因为类之间有继承关系,但集合之间没有关系</span><br>    &#125;<br>    <span class="hljs-comment">//通配符上下限,因为?可以传入任何类型(例如没继承的类),所以需要约束,?extends Car(必须是Car或者其子类 泛型上限)?super Car(必须是Car或者其父类 泛型下限)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">(ArrayList&lt;?extends Car&gt; c)</span>&#123;&#125;<span class="hljs-comment">//只能传入Car或者其子类</span><br>&#125;<br><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BENZ</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span> &#123;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BMW</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">Car</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Set系列集合"><a href="#Set系列集合" class="headerlink" title="Set系列集合"></a>Set系列集合</h2><ul><li><h5 id="无序-存取顺序不一致"><a href="#无序-存取顺序不一致" class="headerlink" title="无序:存取顺序不一致"></a>无序:存取顺序不一致</h5></li><li><h5 id="不重复-可以去除重复"><a href="#不重复-可以去除重复" class="headerlink" title="不重复:可以去除重复"></a>不重复:可以去除重复</h5></li><li><h5 id="无索引-没有带索引的方法-所以不能使用普通for循环遍历-也不能通过索引来获取元素"><a href="#无索引-没有带索引的方法-所以不能使用普通for循环遍历-也不能通过索引来获取元素" class="headerlink" title="无索引:没有带索引的方法,所以不能使用普通for循环遍历,也不能通过索引来获取元素."></a>无索引:没有带索引的方法,所以不能使用普通for循环遍历,也不能通过索引来获取元素.</h5></li></ul><h4 id="Set集合实现类特点"><a href="#Set集合实现类特点" class="headerlink" title="Set集合实现类特点"></a>Set集合实现类特点</h4><ul><li><h5 id="HashSet-无序-不重复-无索引"><a href="#HashSet-无序-不重复-无索引" class="headerlink" title="HashSet:无序,不重复,无索引"></a>HashSet:无序,不重复,无索引</h5></li><li><h5 id="LinkedHashSet-有序-不重复-无索引"><a href="#LinkedHashSet-有序-不重复-无索引" class="headerlink" title="LinkedHashSet:有序,不重复,无索引"></a>LinkedHashSet:<font color='red'>有序</font>,不重复,无索引</h5></li><li><h5 id="TreeSet-可排序-默认升序-不重复-无索引"><a href="#TreeSet-可排序-默认升序-不重复-无索引" class="headerlink" title="TreeSet:可排序(默认升序),不重复,无索引"></a>TreeSet:<font color='red'>可排序(默认升序)</font>,不重复,无索引</h5></li></ul><h5 id="Set-API与Collection基本一致"><a href="#Set-API与Collection基本一致" class="headerlink" title="Set API与Collection基本一致"></a>Set API与Collection基本一致</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set集合的特点:HashSet LinkedHashSet TreeSet</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Set&lt;String&gt; sets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<span class="hljs-comment">//经典代码</span><br>        sets.add(<span class="hljs-string">&quot;MySQL&quot;</span>);<br>        sets.add(<span class="hljs-string">&quot;MySQL&quot;</span>);<br>        sets.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        sets.add(<span class="hljs-string">&quot;java&quot;</span>);<br>        sets.add(<span class="hljs-string">&quot;HTML&quot;</span>);<br>        sets.add(<span class="hljs-string">&quot;HTML&quot;</span>);<br>        System.out.println(sets);<span class="hljs-comment">//[java, MySQL, HTML]</span><br>        <span class="hljs-comment">//无序,不重复,无索引(无支持索引的方法)</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HashSet底层原理"><a href="#HashSet底层原理" class="headerlink" title="HashSet底层原理"></a>HashSet底层原理</h3><ul><li><h5 id="HashSet集合底层采取哈希表存储的数据"><a href="#HashSet集合底层采取哈希表存储的数据" class="headerlink" title="HashSet集合底层采取哈希表存储的数据"></a>HashSet集合底层采取<font color='red'>哈希表</font>存储的数据</h5></li><li><h5 id="哈希表是一种对于增删改查数据性能都比较好的结构"><a href="#哈希表是一种对于增删改查数据性能都比较好的结构" class="headerlink" title="哈希表是一种对于增删改查数据性能都比较好的结构"></a>哈希表是一种对于增删改查数据性能都比较好的结构</h5></li></ul><h4 id="哈希表的组成-Set底层原理"><a href="#哈希表的组成-Set底层原理" class="headerlink" title="哈希表的组成(Set底层原理)"></a>哈希表的组成(Set底层原理)</h4><ul><li><h5 id="JDK8之前-底层使用数组-链表组成"><a href="#JDK8之前-底层使用数组-链表组成" class="headerlink" title="JDK8之前,底层使用数组+链表组成"></a>JDK8之前,底层使用<font color='red'>数组+链表</font>组成</h5></li><li><h5 id="JDK8开始之后-底层采用数组-链表-红黑树组成"><a href="#JDK8开始之后-底层采用数组-链表-红黑树组成" class="headerlink" title="JDK8开始之后,底层采用数组+链表+红黑树组成"></a>JDK8开始之后,底层采用<font color='red'>数组+链表+红黑树</font>组成</h5></li></ul><h5 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a><font color='green'>哈希值</font></h5><ul><li><h5 id="是JDK根据对象的地址-按照某种规则算出来的int类型的数值"><a href="#是JDK根据对象的地址-按照某种规则算出来的int类型的数值" class="headerlink" title="是JDK根据对象的地址,按照某种规则算出来的int类型的数值"></a>是JDK根据对象的地址,按照某种规则算出来的int类型的<font color='red'>数值</font></h5></li></ul><h5 id="Object类的API"><a href="#Object类的API" class="headerlink" title="Object类的API"></a><font color='green'>Object类的API</font></h5><ul><li><h5 id="public-int-hashCode-返回对象的哈希值"><a href="#public-int-hashCode-返回对象的哈希值" class="headerlink" title="public int hashCode():返回对象的哈希值"></a>public int hashCode():返回对象的哈希值</h5></li></ul><h5 id="对象哈希值特点"><a href="#对象哈希值特点" class="headerlink" title="对象哈希值特点"></a><font color='green'>对象哈希值特点</font></h5><ul><li><h5 id="同一个对象多次调用hashCode-方法返回的哈希值是相同的"><a href="#同一个对象多次调用hashCode-方法返回的哈希值是相同的" class="headerlink" title="同一个对象多次调用hashCode()方法返回的哈希值是相同的"></a>同一个对象多次调用hashCode()方法返回的哈希值是相同的</h5></li><li><h5 id="默认情况下-不同对象的哈希值是不同的"><a href="#默认情况下-不同对象的哈希值是不同的" class="headerlink" title="默认情况下,不同对象的哈希值是不同的"></a>默认情况下,不同对象的哈希值是不同的</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取对象的哈希值并确认</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;kong&quot;</span>;<br>        System.out.println(name.hashCode());<span class="hljs-comment">//3297821</span><br>        System.out.println(name.hashCode());<span class="hljs-comment">//3297821</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;kong1&quot;</span>;<br>        System.out.println(name1.hashCode());<span class="hljs-comment">//102232500</span><br>        System.out.println(name1.hashCode());<span class="hljs-comment">//102232500</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="HashSet元素无序的底层原理"><a href="#HashSet元素无序的底层原理" class="headerlink" title="HashSet元素无序的底层原理"></a><font color='green'>HashSet元素无序的底层原理</font></h4><ul><li>底层结构:哈希表（数组、链表、红黑树的结合体)</li><li>当挂在元素下面的数据过多时，查询性能降低，从JDK8开始后，当链表长度超过8的时候，自动转换为红黑树。</li></ul><h5 id="哈希表详细流程"><a href="#哈希表详细流程" class="headerlink" title="哈希表详细流程"></a>哈希表详细流程</h5><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625133530500.png" alt="image-20220625133530500" style="zoom:67%;" /><h4 id="HashSet元素去重复的底层原理"><a href="#HashSet元素去重复的底层原理" class="headerlink" title="HashSet元素去重复的底层原理"></a><font color='green'>HashSet元素去重复的底层原理</font></h4><ul><li><h5 id="先判断元素位置是否为空-不为空在equals判断值是否相同-相同则去除"><a href="#先判断元素位置是否为空-不为空在equals判断值是否相同-相同则去除" class="headerlink" title="先判断元素位置是否为空,不为空在equals判断值是否相同,相同则去除"></a>先判断元素位置是否为空,不为空在equals判断值是否相同,相同则去除</h5></li><li><h5 id="可能出现内容一样-但哈希值不同-不同对象-若要认为其是相同的-则需要重写对象的hashCode-和equals-方法"><a href="#可能出现内容一样-但哈希值不同-不同对象-若要认为其是相同的-则需要重写对象的hashCode-和equals-方法" class="headerlink" title="可能出现内容一样,但哈希值不同(不同对象),若要认为其是相同的,则需要重写对象的hashCode()和equals()方法"></a><font color='red'>可能出现内容一样,但哈希值不同(不同对象),若要认为其是相同的,则需要重写对象的hashCode()和equals()方法</font></h5></li></ul><h5 id="重写hashCode是将对象的值带入生成哈希值-对象值相同-哈希值相同-所以对象值相同-所在数组位置相同-数组不为空则进行equals"><a href="#重写hashCode是将对象的值带入生成哈希值-对象值相同-哈希值相同-所以对象值相同-所在数组位置相同-数组不为空则进行equals" class="headerlink" title="重写hashCode是将对象的值带入生成哈希值,对象值相同,哈希值相同(所以对象值相同,所在数组位置相同,数组不为空则进行equals)"></a>重写hashCode是将对象的值带入生成哈希值,对象值相同,哈希值相同(所以对象值相同,所在数组位置相同,数组不为空则进行equals)</h5><h5 id="重写equals是将对象值挨个比较-都相同则为true"><a href="#重写equals是将对象值挨个比较-都相同则为true" class="headerlink" title="重写equals是将对象值挨个比较,都相同则为true"></a>重写equals是将对象值挨个比较,都相同则为true</h5><h5 id="需求-创建储存学生对象的集合-使用程序遍历-要求-学生对象的成员变量值相同-我们就认为是同一个对象"><a href="#需求-创建储存学生对象的集合-使用程序遍历-要求-学生对象的成员变量值相同-我们就认为是同一个对象" class="headerlink" title="需求:创建储存学生对象的集合,使用程序遍历,要求:学生对象的成员变量值相同,我们就认为是同一个对象"></a>需求:创建储存学生对象的集合,使用程序遍历,要求:学生对象的成员变量值相同,我们就认为是同一个对象</h5><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625133717590.png" alt="image-20220625133717590" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//重写hashCode,将对象值传入,重新生成哈希值,对象值相同,生成的哈希值不会变</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Objects.hash(name, age, sex);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//重写equals</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>    <span class="hljs-type">return</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span>= student.age &amp;&amp; sex == student.sex &amp;&amp; Objects.equals(name, student.name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LinkedHashSet集合概述和特点"><a href="#LinkedHashSet集合概述和特点" class="headerlink" title="LinkedHashSet集合概述和特点"></a>LinkedHashSet集合概述和特点</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625133632409.png" alt="image-20220625133632409" style="zoom:50%;" /><ul><li><h5 id="通过双链表记录元素前后地址-以此存储顺序"><a href="#通过双链表记录元素前后地址-以此存储顺序" class="headerlink" title="通过双链表记录元素前后地址,以此存储顺序"></a>通过双链表记录元素前后地址,以此存储顺序</h5></li></ul><h4 id="TreeSet集合概述和特点"><a href="#TreeSet集合概述和特点" class="headerlink" title="TreeSet集合概述和特点"></a>TreeSet集合概述和特点</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625133816742.png" alt="image-20220625133816742" style="zoom:50%;" /><h3 id="TreeSet集合默认的规则"><a href="#TreeSet集合默认的规则" class="headerlink" title="TreeSet集合默认的规则"></a>TreeSet集合默认的规则</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625133850233.png" alt="image-20220625133850255" style="zoom:50%;" /><ul><li><h5 id="想要使用TreeSet存储自定义类型-需要制定自定义排序规则"><a href="#想要使用TreeSet存储自定义类型-需要制定自定义排序规则" class="headerlink" title="想要使用TreeSet存储自定义类型,需要制定自定义排序规则"></a><font color='red'>想要使用TreeSet存储自定义类型,需要制定自定义排序规则</font></h5></li></ul><h4 id="自定义排序规则"><a href="#自定义排序规则" class="headerlink" title="自定义排序规则"></a>自定义排序规则</h4><ol><li>让自定义的类(如学生类）实现Comparable接口重写里面的compareTo方法来定制比较规则。</li><li>TreeSet集合有参数构造器，可以设置Comparator接口对应的比较器对象，来定制比较规则。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;People&gt;&#123;<span class="hljs-comment">//这里改为实现Comparable接口的实现类,类型为对象的类型(People),然后重写</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> high;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> high)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.high = high;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;People&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, high=&quot;</span> + high +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHigh</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> high;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHigh</span><span class="hljs-params">(<span class="hljs-type">double</span> high)</span> &#123;<br>        <span class="hljs-built_in">this</span>.high = high;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义比较规则</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> o 传入的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(People o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getAge()-o.getAge();<span class="hljs-comment">//这里按年龄(升序)排序(年龄是整数,所以不会出现小数被转成0的情况,可以直接减)相等则去除</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;People&gt; sp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>sp.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-number">156</span>));<span class="hljs-comment">//姓名,年龄,身高</span><br>sp.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;大壮&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">176</span>));<br>sp.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;小小&quot;</span>,<span class="hljs-number">12</span>,<span class="hljs-number">143</span>));<br>sp.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;小小&quot;</span>,<span class="hljs-number">12</span>,<span class="hljs-number">143</span>));<br>System.out.println(sp);<span class="hljs-comment">//直接执行会报错,因为无法排序,需要自定义</span><br><span class="hljs-comment">//[People&#123;name=&#x27;小小&#x27;, age=12, high=143.0&#125;, People&#123;name=&#x27;大壮&#x27;, age=18, high=176.0&#125;, People&#123;name=&#x27;小红&#x27;, age=22, high=156.0&#125;(年龄升序)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方法2</span><br>Set&lt;People&gt; sp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;People&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(People o1, People o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Double.compare(o1.getHigh(), o2.getHigh());<span class="hljs-comment">//小数直接减需要转换成整数,小于1则转为0,所以使用方法来计算小数</span><br>     &#125;<br> &#125;);<br> sp.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">156.9</span>));<br> sp.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;大壮&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">176.6</span>));<br> sp.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;小小&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">143.4</span>));<br> sp.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;小黑&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">143</span>));<br> System.out.println(sp);<span class="hljs-comment">//直接执行会报错,因为无法排序,需要自定义</span><br> <span class="hljs-comment">//[People&#123;name=&#x27;小黑&#x27;, age=12, high=143.0&#125;, People&#123;name=&#x27;小小&#x27;, age=12, high=143.4&#125;,</span><br> <span class="hljs-comment">// People&#123;name=&#x27;小红&#x27;, age=22, high=156.9&#125;, People&#123;name=&#x27;大壮&#x27;, age=18, high=176.6&#125;](身高升序)</span><br></code></pre></td></tr></table></figure><h5 id="两种方法都存在则就近原则-默认使用集合比较器-方法二"><a href="#两种方法都存在则就近原则-默认使用集合比较器-方法二" class="headerlink" title="两种方法都存在则就近原则,默认使用集合比较器(方法二)"></a>两种方法都存在则就近原则,默认使用集合比较器(方法二)</h5><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625134546306.png" alt="image-20220625134546306" style="zoom:50%;" /><h2 id="Collection体系特点-使用场景总结"><a href="#Collection体系特点-使用场景总结" class="headerlink" title="Collection体系特点,使用场景总结"></a>Collection体系特点,使用场景总结</h2><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625134748312.png" alt="image-20220625134748312" style="zoom:50%;" /><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul><li>可变参数用在形参中可以接收多个数据。</li><li>可变参数的格式:数据类型…参数名称</li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>传输参数非常灵活，方便。可以不传输参数，可以传输1个或者多个，也可以传输一个数组</li><li>可变参数在方法内部本质上就是一个数组。</li></ul><h4 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>一个形参列表中可变参数只能有一个</li><li>可变参数必须放在形参列表的最后面</li></ul><h2 id="集合工具类Collections"><a href="#集合工具类Collections" class="headerlink" title="集合工具类Collections"></a>集合工具类Collections</h2><h4 id="Collections常用API"><a href="#Collections常用API" class="headerlink" title="Collections常用API"></a>Collections常用API</h4><h5 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T... elements)//集合添加元素</span><br>Collections.addAll(list,<span class="hljs-string">&quot;第一个&quot;</span>,<span class="hljs-string">&quot;第二个&quot;</span>,<span class="hljs-string">&quot;第三个&quot;</span>);<span class="hljs-comment">//往集合里添加多个元素</span><br>System.out.println(list);<span class="hljs-comment">//[第一个, 第二个, 第三个]</span><br></code></pre></td></tr></table></figure><h5 id="打乱顺序"><a href="#打乱顺序" class="headerlink" title="打乱顺序"></a>打乱顺序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//public static void shuffle(List&lt;?&gt; list)//打乱 List 类型集合的顺序,因为Set本身是无序且由哈希值确定位置的</span><br>Collections.shuffle(list);<span class="hljs-comment">//打乱集合元素顺序</span><br>System.out.println(list);<span class="hljs-comment">//每次运行都会变</span><br></code></pre></td></tr></table></figure><h5 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)//集合自定义排序</span><br>List&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list1,<span class="hljs-number">12</span>,<span class="hljs-number">121</span>,<span class="hljs-number">34</span>,<span class="hljs-number">545</span>,<span class="hljs-number">123</span>);<br>Collections.sort(list1);<span class="hljs-comment">//对集合进行排序,默认(值特性元素)升序</span><br>System.out.println(list1);<span class="hljs-comment">//[12, 34, 121, 123, 545]</span><br>Collections.sort(list1,(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<span class="hljs-comment">//自定义集合排序</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> o2-o1;<span class="hljs-comment">//降序</span><br>    &#125;<br>&#125;));<br>System.out.println(list1);<span class="hljs-comment">//[545, 123, 121, 34, 12]</span><br></code></pre></td></tr></table></figure><h5 id="对自定义对象进行排序"><a href="#对自定义对象进行排序" class="headerlink" title="对自定义对象进行排序"></a>对自定义对象进行排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//学生类</span><br><span class="hljs-comment">//方法1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt; &#123;<span class="hljs-comment">//实现Comparable接口,重写compareTo方法</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br>    ...<br>    ...<br>    <span class="hljs-comment">//自定义排序</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>        <span class="hljs-keyword">return</span> o.getAge()-<span class="hljs-built_in">this</span>.getAge();<span class="hljs-comment">//年龄降序</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//集合自定义排序(对自定义对象类)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionsDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小王&quot;</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;女&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法1 自定义类实现Comparable,重写compareTo方法排序(重写为年龄降序了)</span><br>List&lt;Student&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list1, student, student1, student2);<br>Collections.sort(list1);<span class="hljs-comment">//在类中重写完需要调用一下sort才进行排序(按照类中自定义的规则来排序)</span><br>System.out.println(list1);<span class="hljs-comment">//年龄降序输出</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法2 sort自带比较器对象</span><br>List&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, student, student1, student2);<br>Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<span class="hljs-comment">//在这里定义排序规则</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> o1.getAge() - o2.getAge();<span class="hljs-comment">//年龄升序</span><br>    &#125;<br>&#125;);<br>System.out.println(list);<span class="hljs-comment">//年龄升序输出</span><br><br><br><span class="hljs-comment">//两种方法同时使用,就近原则,使用方法2</span><br></code></pre></td></tr></table></figure><h4 id="案例-斗地主游戏"><a href="#案例-斗地主游戏" class="headerlink" title="案例:斗地主游戏"></a>案例:斗地主游戏</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625135202088.png" alt="image-20220625135202088" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义牌类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span> &#123;<br>    <span class="hljs-keyword">private</span> String size;<span class="hljs-comment">//点数</span><br>    <span class="hljs-keyword">private</span> String color;<span class="hljs-comment">//花色</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> index;<span class="hljs-comment">//牌的真正大小</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Card</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Card</span><span class="hljs-params">(String size, String color, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = size;<br>        <span class="hljs-built_in">this</span>.color = color;<br>        <span class="hljs-built_in">this</span>.index = index;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSize</span><span class="hljs-params">(String size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getColor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColor</span><span class="hljs-params">(String color)</span> &#123;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-built_in">this</span>.index = index;<br>    &#125;<br><br>    <span class="hljs-comment">//改写直接输出点数花色</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> color + size ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//预先定义牌类型(Card)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameDemo</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1 定义一个静态集合存储54张牌对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Card&gt; allCards = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2 定义静态代码块初始化牌数据(运行前优先加载)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 3 定义点数,数组存储</span><br>        String[] sizes = &#123;<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>&#125;;<br>        <span class="hljs-comment">// 4 定义花色</span><br>        String[] colors = &#123;<span class="hljs-string">&quot;♥&quot;</span>, <span class="hljs-string">&quot;♠&quot;</span>, <span class="hljs-string">&quot;♦&quot;</span>, <span class="hljs-string">&quot;♣&quot;</span>&#125;;<br>        <span class="hljs-comment">// 5 组合点数花色</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//定义初始牌大小</span><br>        <span class="hljs-keyword">for</span> (String size : sizes) &#123;<br>            index++;<span class="hljs-comment">//不同花色,同一大小</span><br>            <span class="hljs-keyword">for</span> (String color : colors) &#123;<br>                <span class="hljs-comment">// 6 封装成一个牌对象</span><br>                <span class="hljs-type">Card</span> <span class="hljs-variable">card</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>(size, color, index);<br>                <span class="hljs-comment">// 7 对象存入集合</span><br>                allCards.add(card);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 8 存入大小王</span><br>        <span class="hljs-type">Card</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;大王&quot;</span>, ++index);<br>        <span class="hljs-type">Card</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;小王&quot;</span>, ++index);<br>        Collections.addAll(allCards, c1, c2);<br>        System.out.println(<span class="hljs-string">&quot;新牌&quot;</span> + allCards);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 9 洗牌(打乱排序)</span><br>        Collections.shuffle(allCards);<br>        System.out.println(<span class="hljs-string">&quot;洗牌后&quot;</span> + allCards);<br>        <span class="hljs-comment">// 10 发牌(定义三个玩家,也就是三个集合来接收牌,剩余三张作为底牌)</span><br>        List&lt;Card&gt; xiaoming = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Card&gt; xiaolong = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Card&gt; xiaohong = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 11 开始发牌</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; allCards.size() - <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">Card</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> allCards.get(i);<span class="hljs-comment">//取出当然索引对象</span><br>            <span class="hljs-keyword">switch</span> (i % <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    xiaoming.add(c);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    xiaolong.add(c);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    xiaohong.add(c);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 12 最后三张底牌(截取成一个集合)(包前不包后)</span><br>        List&lt;Card&gt; listThreeCards = allCards.subList(allCards.size() - <span class="hljs-number">3</span>, allCards.size());<br>        xiaohong.addAll(listThreeCards);<span class="hljs-comment">//把底牌给小红</span><br>        <span class="hljs-comment">// 13 给玩家手牌排序(从大到小)(创建排序方法)</span><br>        sortCards(xiaoming);<br>        sortCards(xiaohong);<br>        sortCards(xiaolong);<br>        <span class="hljs-comment">// 14 输出玩家的牌</span><br>        System.out.println(<span class="hljs-string">&quot;小明&quot;</span> + xiaoming);<br>        System.out.println(<span class="hljs-string">&quot;小龙&quot;</span> + xiaolong);<br>        System.out.println(<span class="hljs-string">&quot;小红&quot;</span> + xiaohong);<br>    &#125;<br><span class="hljs-comment">// 13 方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortCards</span><span class="hljs-params">(List&lt;Card&gt; wanjia)</span> &#123;<br>        Collections.sort(wanjia, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Card&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Card o1, Card o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.getIndex() - o2.getIndex();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map集合体系"><a href="#Map集合体系" class="headerlink" title="Map集合体系"></a>Map集合体系</h2><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625135435316.png" alt="image-20220625135435316"></p><h3 id="概述及使用"><a href="#概述及使用" class="headerlink" title="概述及使用"></a>概述及使用</h3><ul><li>Map集合是一种双列集合，每个元素包含两个数据。</li><li>Map集合的每个元素的格式: key&#x3D;value(键值对元素)。</li><li>Map集合也被称为“键值对集合”。</li></ul><h4 id="整体格式"><a href="#整体格式" class="headerlink" title="整体格式"></a>整体格式</h4><ul><li>Collection集合的格式: [元素1 ,元素2,元素3..]</li><li>Map集合的完整格式: {key1&#x3D;value1 , key2&#x3D;value2 , key3&#x3D;value3 …</li></ul><h4 id="Map集合体系特点"><a href="#Map集合体系特点" class="headerlink" title="Map集合体系特点"></a>Map集合体系特点</h4><ul><li>Map集合的特点都是由键决定的。</li><li>Map集合的键是无序,不重复的，无索引的，值不做要求（可以重复）。</li><li>Map集合后面重复的键对应的值会覆盖前面重复键的值。</li><li>Map集合的键值对都可以为null。</li></ul><h4 id="Map集合实现类特点"><a href="#Map集合实现类特点" class="headerlink" title="Map集合实现类特点"></a>Map集合实现类特点</h4><ul><li>HashMap:元素按照键是无序，不重复，无索引，值不做要求。(与Map体系一致)</li><li>LinkedHashMap:元素按照键是有序，不重复，无索引，值不做要求。</li><li>TreeMap:元素按照建是排序，不重复，无索引的，值不做要求。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 认识Map集合体系的特点,按照键无序,不重复,无索引.值不做要求</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 创建一个Map集合对象</span><br>        Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-comment">//经典代码</span><br>        map.put(<span class="hljs-string">&quot;鸿星尔克&quot;</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//添加元素</span><br>        map.put(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>        map.put(<span class="hljs-string">&quot;枸杞&quot;</span>,<span class="hljs-number">20</span>);<br>        map.put(<span class="hljs-string">&quot;Java从入门到入土&quot;</span>,<span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-string">&quot;Java从入门到入土&quot;</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//键重复,会覆盖前面的数据</span><br>        System.out.println(map);<span class="hljs-comment">//&#123;null=null, Java从入门到入土=20, 枸杞=20, 鸿星尔克=2&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map集合api"><a href="#Map集合api" class="headerlink" title="Map集合api"></a>Map集合api</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625135645853.png" alt="image-20220625135645853" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//map集合常用api</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 添加元素/.put,key值存在,会返回原先被替换的value值,不存在则为null</span><br>        Map&lt;String,Integer&gt; maps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        maps.put(<span class="hljs-string">&quot;商品1&quot;</span>,<span class="hljs-number">1</span>);<br>        maps.put(<span class="hljs-string">&quot;商品2&quot;</span>,<span class="hljs-number">11</span>);<br>        maps.put(<span class="hljs-string">&quot;商品3&quot;</span>,<span class="hljs-number">33</span>);<br>        maps.put(<span class="hljs-string">&quot;商品2&quot;</span>,<span class="hljs-number">33</span>);<span class="hljs-comment">//键重复的元素会覆盖之前的元素</span><br>        System.out.println(maps);<span class="hljs-comment">//&#123;商品3=33, 商品1=1, 商品2=33&#125;</span><br><span class="hljs-comment">//        // 2 清空集合/.clear</span><br><span class="hljs-comment">//        maps.clear();</span><br><span class="hljs-comment">//        System.out.println(maps);//&#123;&#125;</span><br>        <span class="hljs-comment">// 3 判断是否为空/.isEmpty</span><br>        System.out.println(maps.isEmpty());<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">// 4 根据键获取对应值/.get</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> maps.get(<span class="hljs-string">&quot;商品2&quot;</span>);<br>        System.out.println(key);<span class="hljs-comment">//33</span><br>        System.out.println(maps.get(<span class="hljs-string">&quot;商品1&quot;</span>));<span class="hljs-comment">//1</span><br>        System.out.println(maps.get(<span class="hljs-string">&quot;1&quot;</span>));<span class="hljs-comment">//null</span><br>        <span class="hljs-comment">// 5 根据键删除整个元素,删除键返回键的值/.remove</span><br>        System.out.println(maps.remove(<span class="hljs-string">&quot;商品1&quot;</span>));<span class="hljs-comment">//删除商品1,返回1</span><br>        <span class="hljs-comment">// 6 判断是否包含某个键,包含返回true/.containsKey</span><br>        System.out.println(maps.containsKey(<span class="hljs-string">&quot;商品3&quot;</span>));<span class="hljs-comment">//true</span><br>        System.out.println(maps.containsKey(<span class="hljs-string">&quot;商品1&quot;</span>));<span class="hljs-comment">//false</span><br>        <span class="hljs-comment">// 7 判断是否包含某个值/.containsValue</span><br>        System.out.println(maps.containsValue(<span class="hljs-number">2</span>));<span class="hljs-comment">//false</span><br>        System.out.println(maps.containsValue(<span class="hljs-number">33</span>));<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">// 8 获取全部键的集合/.keyset(public Set&lt;K&gt; keySet()),用set集合来接,因为set无序不重复无索引</span><br>        Set&lt;String&gt; set = maps.keySet();<span class="hljs-comment">//!!!这里获取的集合与Map里的键是映射关系,会随之改变</span><br>        System.out.println(set);<span class="hljs-comment">//[商品3, 商品2]</span><br>        <span class="hljs-comment">// 9 获取全部值的集合/.values(public Collection&lt;V&gt; values()),用Collection,因为可重复</span><br>        Collection&lt;Integer&gt; values = maps.values();<br>        System.out.println(values);<span class="hljs-comment">//[33, 33]</span><br>        <span class="hljs-comment">// 10 集合大小/.size</span><br>        System.out.println(maps.size());<span class="hljs-comment">//2</span><br>        <span class="hljs-comment">// 11 合并其他Map集合/.putAll</span><br>        Map&lt;String,Integer&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map1.put(<span class="hljs-string">&quot;饼干&quot;</span>,<span class="hljs-number">12</span>);<br>        Map&lt;String,Integer&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map1.put(<span class="hljs-string">&quot;饼干&quot;</span>,<span class="hljs-number">5</span>);<br>        map2.put(<span class="hljs-string">&quot;牛奶&quot;</span>,<span class="hljs-number">12</span>);<br>        map1.putAll(map2);<span class="hljs-comment">//将map2的元素拷贝到map1</span><br>        System.out.println(map1);<span class="hljs-comment">//&#123;饼干=5, 牛奶=12&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map集合遍历方式"><a href="#Map集合遍历方式" class="headerlink" title="Map集合遍历方式"></a>Map集合遍历方式</h3><h4 id="方式一-键找值"><a href="#方式一-键找值" class="headerlink" title="方式一(键找值)"></a>方式一(键找值)</h4><ul><li>先获取Map集合的全部键的Set集合。</li><li>遍历键的Set集合，然后通过键提取对应值。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625135758829.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Map集合遍历:键找值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String, Integer&gt; maps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1 添加元素</span><br>        maps.put(<span class="hljs-string">&quot;牛奶&quot;</span>, <span class="hljs-number">2</span>);<br>        maps.put(<span class="hljs-string">&quot;泡面&quot;</span>, <span class="hljs-number">4</span>);<br>        maps.put(<span class="hljs-string">&quot;饼干&quot;</span>, <span class="hljs-number">12</span>);<br>        maps.put(<span class="hljs-string">&quot;香肠&quot;</span>, <span class="hljs-number">1</span>);<br>        System.out.println(maps);<span class="hljs-comment">//&#123;饼干=12, 香肠=1, 牛奶=2, 泡面=4&#125;</span><br>        <span class="hljs-comment">// 2 键找值(拿到集合全部键)</span><br>        Set&lt;String&gt; keys = maps.keySet();<br>        <span class="hljs-comment">// 3 遍历键集合</span><br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            <span class="hljs-comment">// 4 根据键查找值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> maps.get(key);<br>            <span class="hljs-comment">// 5 输出</span><br>            System.out.println(key + <span class="hljs-string">&quot;-&gt;&quot;</span> + value);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 饼干-&gt;12</span><br><span class="hljs-comment">             * 香肠-&gt;1</span><br><span class="hljs-comment">             * 牛奶-&gt;2</span><br><span class="hljs-comment">             * 泡面-&gt;4</span><br><span class="hljs-comment">             */</span><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方式二-键值对"><a href="#方式二-键值对" class="headerlink" title="方式二(键值对)"></a>方式二(键值对)</h4><ul><li>先把Map集合转换成Set集合，Set集合中每个元素都是键值对实体类型了。</li><li>遍历Set集合，然后提取键以及提取值。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625140020699.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Map集合遍历:键值对</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String, Integer&gt; maps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1 添加元素</span><br>        maps.put(<span class="hljs-string">&quot;牛奶&quot;</span>, <span class="hljs-number">2</span>);<br>        maps.put(<span class="hljs-string">&quot;泡面&quot;</span>, <span class="hljs-number">4</span>);<br>        maps.put(<span class="hljs-string">&quot;饼干&quot;</span>, <span class="hljs-number">12</span>);<br>        maps.put(<span class="hljs-string">&quot;香肠&quot;</span>, <span class="hljs-number">1</span>);<br>        System.out.println(maps);<span class="hljs-comment">//&#123;饼干=12, 香肠=1, 牛奶=2, 泡面=4&#125;</span><br>        <span class="hljs-comment">// 1 map集合转换成set集合</span><br>        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = maps.entrySet();<br>        <span class="hljs-comment">// 2 遍历集合</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> entry.getKey();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;-&gt;&quot;</span> + value);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 饼干-&gt;12</span><br><span class="hljs-comment">             * 香肠-&gt;1</span><br><span class="hljs-comment">             * 牛奶-&gt;2</span><br><span class="hljs-comment">             * 泡面-&gt;4</span><br><span class="hljs-comment">             */</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方式三-lambda表达式"><a href="#方式三-lambda表达式" class="headerlink" title="方式三(lambda表达式)"></a>方式三(lambda表达式)</h4><ul><li>得益于JDK8开始的新技术Lambda表达式，提供了一种更简单、更直接的遍历集合的方式。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625140209351.png" alt="image-20220625140209351"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Map集合遍历(lambda表达式)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String, Integer&gt; maps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 1 添加元素</span><br>        maps.put(<span class="hljs-string">&quot;牛奶&quot;</span>, <span class="hljs-number">2</span>);<br>        maps.put(<span class="hljs-string">&quot;泡面&quot;</span>, <span class="hljs-number">4</span>);<br>        maps.put(<span class="hljs-string">&quot;饼干&quot;</span>, <span class="hljs-number">12</span>);<br>        maps.put(<span class="hljs-string">&quot;香肠&quot;</span>, <span class="hljs-number">1</span>);<br>        System.out.println(maps);<span class="hljs-comment">//&#123;饼干=12, 香肠=1, 牛奶=2, 泡面=4&#125;</span><br>        <span class="hljs-comment">// 2 开始遍历/内部就是Entry方式,遍历完将值送出</span><br><span class="hljs-comment">//        maps.forEach(new BiConsumer&lt;String, Integer&gt;() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public void accept(String key, Integer value) &#123;</span><br><span class="hljs-comment">//                System.out.println(key + &quot;-&gt;&quot; + value);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br>        <span class="hljs-comment">//lambda简化</span><br>        maps.forEach((key, value) -&gt; &#123;<br>                    System.out.println(key + <span class="hljs-string">&quot;-&gt;&quot;</span> + value);<br>                &#125;<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map集合案例"><a href="#Map集合案例" class="headerlink" title="Map集合案例"></a>Map集合案例</h3><h4 id="统计投票人数"><a href="#统计投票人数" class="headerlink" title="统计投票人数"></a>统计投票人数</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625140259064.png" alt="image-20220625140259064" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 统计投票人数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 把80个学生选择的数据拿进来,这里随机生成</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<span class="hljs-comment">//创建随机数对象</span><br>        String[] strings = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>&#125;;<span class="hljs-comment">//定义abcd数组</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80</span>; i++) &#123;<br>            sb.append(strings[random.nextInt(strings.length)]);<span class="hljs-comment">//随机取数组中的选项,随机数范围是数组长度[0,4)</span><br>        &#125;<br>        System.out.println(sb);<span class="hljs-comment">//BACACCDCADADABBDCBDDACCDBBCBCBBADCBBDCBCCAABDDCCABCDDDDDDBBDABBBDAABDACBADCCCDCD</span><br>        <span class="hljs-comment">// 2 生成map集合</span><br>        Map&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-comment">//这里是Character因为下面字符串遍历类型为char</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sb.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sb.charAt(i);<span class="hljs-comment">//依次遍历字符串sb</span><br><span class="hljs-comment">//            if(map.containsKey(a))&#123;//查找是否包含对应的键</span><br><span class="hljs-comment">//                map.put(a,map.get(a)+1);//已经存在,则把值加1,get是根据键查找值</span><br><span class="hljs-comment">//            &#125;else &#123;</span><br><span class="hljs-comment">//                map.put(a,1);//不存在则初始为1</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-comment">//简化三元运算,因为put会返回被替换键所对应的值,所以需要变量来接</span><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> map.containsKey(a) ? map.put(a, map.get(a) + <span class="hljs-number">1</span>) : map.put(a, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 3 输出map</span><br>        System.out.println(map);<span class="hljs-comment">//&#123;A=23, B=20, C=25, D=12&#125;</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><font color='green'>HashMap</font></h3><h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><ul><li>HashMap是Map里面的一个实现类。特点都是由键决定的:无序、不重复、无索引</li><li>没有额外需要学习的特有方法，直接使用Map里面的方法就可以了。</li><li>HashMap跟HashSet底层原理是一模一样的，都是哈希表结构，只是HashMap的每个元素包含两个值而已。</li></ul><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><ul><li>由键决定:无序、不重复、无索引。HashMap底层是哈希表结构的。</li><li>依赖hashCode方法和equals方法保证键的唯一。</li></ul><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a><font color='green'>LinkedHashMap</font></h3><h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><ul><li>由键决定:有序、不重复、无索引。</li><li>这里的有序指的是保证存储和取出的元素顺序一致</li><li>原理:底层数据结构是依然哈希表，只是每个键值对元素又额外的多了一个双链表的机制记录存储的顺序。</li></ul><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><font color='green'>TreeMap</font></h3><h4 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h4><ul><li>由键决定特性:不重复、无索引、可排序</li><li>可排序:按照键数据的大小默认升序（有小到大）排序只能对键排序。</li><li>注意:TreeMap集合是一定要排序的，可以默认排序，也可以将键按照指定的规则进行排序</li><li>TreeMap跟TreeSet一样底层原理是一样的。</li></ul><h4 id="自定义排序-1"><a href="#自定义排序-1" class="headerlink" title="自定义排序"></a>自定义排序</h4><ol><li>类实现Comparable接口，重写比较规则。</li><li>集合自定义Comparator比较器对象，重写比较规则。</li></ol><h3 id="Map集合嵌套案例"><a href="#Map集合嵌套案例" class="headerlink" title="Map集合嵌套案例"></a>Map集合嵌套案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//案例,统计每个人想去的地方,并且每个人可以选择多个地方</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 定义每个人的集合(姓名+选择的地方)</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//输入</span><br>        Map&lt;String, List&lt;String&gt;&gt; people = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-comment">//将单个人的选择作为一个集合</span><br>        <span class="hljs-comment">// 2 记录每个人的选择并存入集合</span><br>        System.out.println(<span class="hljs-string">&quot;请输入人数&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> in.nextInt();<span class="hljs-comment">//人数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<span class="hljs-comment">//人数循环</span><br>            System.out.println(<span class="hljs-string">&quot;请输入姓名&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> in.next();<span class="hljs-comment">//姓名</span><br>            List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//将每个人的选项作为一个集合</span><br>            System.out.println(<span class="hljs-string">&quot;请输入想去的地方,结束请输入:\&quot;1\&quot;&quot;</span>);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> in.next();<span class="hljs-comment">//输入的选项</span><br>                <span class="hljs-keyword">if</span> (a.equals(<span class="hljs-string">&quot;1&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                Collections.addAll(list, a);<span class="hljs-comment">//将输入的选项存入list集合,也就是选项集合</span><br>            &#125;<br>            people.put(name, list);<span class="hljs-comment">//将姓名和选项再存入单人集合 例&#123;A=[A, B, C], B=[A, C], C=[D, C]&#125;</span><br>        &#125;<br>        <span class="hljs-comment">// 3 将值收集成集合</span><br>        Map&lt;String, Integer&gt; end = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-comment">//建立结果的集合</span><br>        Collection&lt;List&lt;String&gt;&gt; values = people.values();<span class="hljs-comment">//将单人集合的值收集为一个集合[[A,B,C],[A,C],[B,D]]</span><br>        <span class="hljs-comment">// 4 遍历集合</span><br>        <span class="hljs-keyword">for</span> (List&lt;String&gt; value : values) &#123;<span class="hljs-comment">//遍历出每个人的全部选择/[A,B,C]</span><br>            <span class="hljs-keyword">for</span> (String s : value) &#123;<span class="hljs-comment">//遍历出单个选项/A</span><br>                <span class="hljs-comment">//判断结果集合里是否已经存在选项,存在则值+1,不存在则加入并且个数为1</span><br>                <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> end.containsKey(s) ? end.put(s, end.get(s) + <span class="hljs-number">1</span>) : end.put(s, <span class="hljs-number">1</span>);<span class="hljs-comment">//</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 5 输出</span><br>        System.out.println(end);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h2><h3 id="特点-6"><a href="#特点-6" class="headerlink" title="特点"></a>特点</h3><ul><li>不可变集合，就是不可被修改的集合。</li><li>集合的数据项在创建的时候提供，并且在整个生命周期中都不可改变。否则报错。</li></ul><h3 id="为什么要创建不可变集合"><a href="#为什么要创建不可变集合" class="headerlink" title="为什么要创建不可变集合"></a>为什么要创建不可变集合</h3><ul><li>如果某个数据不能被修改，把它防御性地拷贝到不可变集合中是个很好的实践。</li><li>或者当集合对象被不可信的库调用时，不可变形式是安全的。</li></ul><h3 id="如何创建不可变集合"><a href="#如何创建不可变集合" class="headerlink" title="如何创建不可变集合"></a>如何创建不可变集合</h3><ul><li>在List、Set、Map接口中，都存在of方法，可以创建一个不可变的集合。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625142506800.png" alt="image-20220625142506800"></p><ul><li><h5 id="集合不能添加-不能删除-不能修改"><a href="#集合不能添加-不能删除-不能修改" class="headerlink" title="集合不能添加,不能删除,不能修改"></a>集合不能添加,不能删除,不能修改</h5></li></ul><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>在Java8中，得益于Lambda所带来的函数式编程，引入了一个全新的Stream流概念。</li><li>目的:用于简化集合和数组操作的API。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 体验Stream的便利</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;赵敏&quot;</span>, <span class="hljs-string">&quot;张三丰&quot;</span>, <span class="hljs-string">&quot;周芷若&quot;</span>, <span class="hljs-string">&quot;张强&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">//传统方法</span><br>        <span class="hljs-comment">// 1  找出姓张的放入新集合</span><br>        List&lt;String&gt; z = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String name : list) &#123;<br>            <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">&quot;张&quot;</span>)) &#123;<span class="hljs-comment">//查询字符串是否以张开头</span><br>                z.add(name);<span class="hljs-comment">//张开头的元素放入新集合</span><br>            &#125;<br>        &#125;<br>        System.out.println(z);<span class="hljs-comment">//输出姓张的集合</span><br>        <span class="hljs-comment">// 2 将字符长度为3的放入新集合</span><br>        List&lt;String&gt; san = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String name : z) &#123;<span class="hljs-comment">//判断为张的集合里,字符长度为3的元素</span><br>            <span class="hljs-keyword">if</span> (name.length() == <span class="hljs-number">3</span>) &#123;<br>                san.add(name);<span class="hljs-comment">//将字符长度为3的放入新集合</span><br>            &#125;<br>        &#125;<br>        System.out.println(san);<span class="hljs-comment">//输出姓张的且字符长度为3的集合</span><br>        <span class="hljs-comment">// 使用Stream流</span><br>        list.stream().filter(name -&gt; name.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).filter(name -&gt; name.length() == <span class="hljs-number">3</span>).forEach(name -&gt; System.out.println(name));<br>        <span class="hljs-comment">//.filter(规则)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Stream流的获取"><a href="#Stream流的获取" class="headerlink" title="Stream流的获取"></a>Stream流的获取</h3><ul><li>可以使用Collection接口中的默认方法stream()生成流</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625142718074.png" alt="image-20220625142718074" style="zoom:50%;" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625143112000.png" alt="image-20220625143112000" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Stream流获取</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 Collection集合Stream流获取</span><br>        Collection&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Stream&lt;String&gt; s = list.stream();<span class="hljs-comment">//集合获取的Stream流用Stream流对象来接</span><br><br>        <span class="hljs-comment">// 2 Map集合Stream流</span><br>        Map&lt;String,Integer&gt; mvap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//分开获取</span><br>        Stream&lt;String&gt; ks = map.keySet().stream();<span class="hljs-comment">//键的Stream流</span><br>        Stream&lt;Integer&gt; vs = map.values().stream();<span class="hljs-comment">//值的Stream流</span><br>        <span class="hljs-comment">//整体</span><br>        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; es = map.entrySet().stream();<br><br>        <span class="hljs-comment">// 3 数组Stream流</span><br>        String[] arr = &#123;<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-string">&quot;小黑&quot;</span>&#125;;<br>        <span class="hljs-comment">//方法1</span><br>        Stream&lt;String&gt; as = Arrays.stream(arr);<br>        <span class="hljs-comment">//方法2</span><br>        Stream&lt;String&gt; a = Stream.of(arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Stream常用Api"><a href="#Stream常用Api" class="headerlink" title="Stream常用Api"></a>Stream常用Api</h3><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625143314194.png" alt="image-20220625143314194"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Stream常用api</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stream</span>常用api &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; name = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(name, <span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;赵敏&quot;</span>, <span class="hljs-string">&quot;张三丰&quot;</span>, <span class="hljs-string">&quot;周芷若&quot;</span>, <span class="hljs-string">&quot;张强&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;-------------------规则------------------&quot;</span>);<br>        <span class="hljs-comment">//- .filter(规则)</span><br>        name.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).forEach(s -&gt; System.out.println(s));<br>        System.out.println(<span class="hljs-string">&quot;-------------------统计个数------------------&quot;</span>);<br>        <span class="hljs-comment">//- .count(统计个数)</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> name.stream().filter(s -&gt; s.length() == <span class="hljs-number">3</span>).count();<span class="hljs-comment">//统计个数,count返回值类型为long</span><br>        System.out.println(count);<br>        System.out.println(<span class="hljs-string">&quot;-------------------获取前几个------------------&quot;</span>);<br>        <span class="hljs-comment">//- .limit(取前几个元素)</span><br><span class="hljs-comment">//        name.stream().filter(s -&gt; s.startsWith(&quot;张&quot;)).limit(2).forEach(s -&gt; System.out.println(s));</span><br>        name.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).limit(<span class="hljs-number">2</span>).forEach(System.out::println);<span class="hljs-comment">//入参和方法里的一样就可以简写(方法引用)</span><br>        System.out.println(<span class="hljs-string">&quot;-------------------跳过前几个------------------&quot;</span>);<br>        <span class="hljs-comment">//- .skip(跳过前几个)</span><br>        name.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).skip(<span class="hljs-number">2</span>).forEach(System.out::println);<span class="hljs-comment">//只输出张强</span><br>        System.out.println(<span class="hljs-string">&quot;-------------------Map加工方法------------------&quot;</span>);<br>        <span class="hljs-comment">//- Map加工方法</span><br>        <span class="hljs-comment">//将每个元素前都加上&quot;kong&quot;</span><br><span class="hljs-comment">//        name.stream().map(new Function&lt;String, String&gt;() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public String apply(String s) &#123;</span><br><span class="hljs-comment">//                return &quot;kong&quot;+s;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;).forEach(System.out::println);</span><br>        name.stream().map(s -&gt; <span class="hljs-string">&quot;kong&quot;</span>+s).forEach(System.out::println);<span class="hljs-comment">//lambda简写</span><br>        <span class="hljs-comment">//将所有名称都放入学生对象</span><br><span class="hljs-comment">//        name.stream().map(s -&gt; new Student(s)).forEach(s -&gt; System.out.println(s));</span><br>        <span class="hljs-comment">//简写:构造器引用;方法引用</span><br>        name.stream().map(Student::<span class="hljs-keyword">new</span>).forEach(System.out::println);<br>        System.out.println(<span class="hljs-string">&quot;-------------------合并流------------------&quot;</span>);<br>        <span class="hljs-comment">//- .concat合并流</span><br>        Stream&lt;String&gt; s1 = name.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>));<span class="hljs-comment">//所有首字符为张的流</span><br>        Stream&lt;String&gt; s2 = Stream.of(<span class="hljs-string">&quot;数组元素1&quot;</span>,<span class="hljs-string">&quot;数组元素2&quot;</span>,<span class="hljs-string">&quot;数组元素3&quot;</span>);<span class="hljs-comment">//新建数组stream流,内容为数组元素*</span><br>        <span class="hljs-comment">//    public static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b) ;  &lt;? extends T&gt;T和 T的子类</span><br>        Stream&lt;String&gt; s3 = Stream.concat(s1,s2);<span class="hljs-comment">//将stream流s1,s2合并为s3;被合并的流类型为新建对象流的子类,例如obj对象可以把string和Integer合并</span><br>        s3.forEach(System.out::println);<span class="hljs-comment">//将新Stream流输出</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Stream流常见终结方法"><a href="#Stream流常见终结方法" class="headerlink" title="Stream流常见终结方法"></a>Stream流常见终结方法</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625143433083.png" alt="image-20220625143433083" style="zoom:50%;" /><h3 id="Stream流的综合应用"><a href="#Stream流的综合应用" class="headerlink" title="Stream流的综合应用"></a>Stream流的综合应用</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625143523430.png" alt="image-20220625143523430" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义员工类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<span class="hljs-comment">//薪水</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> bonus;<span class="hljs-comment">//奖金</span><br>    <span class="hljs-keyword">private</span> String punish;<span class="hljs-comment">//处罚</span><br>    ...<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stream</span>案例 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> sum1;<span class="hljs-comment">//下面求和使用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> sum2;<span class="hljs-comment">//下面求和使用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> allsum;<span class="hljs-comment">//下面求和使用</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Employee&gt; em1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        em1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">2000</span>, <span class="hljs-string">&quot;无处罚&quot;</span>));<br>        em1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;沙和尚&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">3500</span>, <span class="hljs-number">2200</span>, <span class="hljs-string">&quot;无处罚&quot;</span>));<br>        em1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;嫦娥&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">200</span>, <span class="hljs-string">&quot;处罚&quot;</span>));<br>        em1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;林青霞&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">5200</span>, <span class="hljs-string">&quot;无处罚&quot;</span>));<br>        List&lt;Employee&gt; em2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        em2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;孙小明&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;无处罚&quot;</span>));<br>        em2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;刘叶红&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">4500</span>, <span class="hljs-number">1500</span>, <span class="hljs-string">&quot;无处罚&quot;</span>));<br>        em2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;林长峰&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">1200</span>, <span class="hljs-string">&quot;无处罚&quot;</span>));<br>        em2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;常成&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">4600</span>, <span class="hljs-number">1200</span>, <span class="hljs-string">&quot;无处罚&quot;</span>));<br>        em2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;程霞&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">5100</span>, <span class="hljs-string">&quot;无处罚&quot;</span>));<br><br>        <span class="hljs-comment">//找出最高工资,封装对象 Topperformer(优秀员工)</span><br>        System.out.println(<span class="hljs-string">&quot;分别筛选出2个部门最高工资的员工信息,封装成优秀员工对象Topperformer&quot;</span>);<br>        <span class="hljs-comment">//- .max 指定比较规则 (取排序的最后一位)这里是正序 小-&gt;大</span><br><span class="hljs-comment">//        Employee max1 = s1.max((o1, o2) -&gt; Double.compare(o1.getSalary() + o1.getBonus(),</span><br><span class="hljs-comment">//                (o2.getSalary()) + o2.getBonus())).get();//.get取出基本工资加奖金中最大的一个用员工对象来接</span><br><span class="hljs-comment">//        System.out.println(max1);//输出1组工资最高的员工对象;</span><br><span class="hljs-comment">//        // Employee&#123;name=&#x27;林青霞&#x27;, sex=女, salary=5000.0, bonus=5200.0, punish=&#x27;无处罚&#x27;&#125;</span><br><span class="hljs-comment">//        Employee max2 = s2.max((o1, o2) -&gt; Double.compare(o1.getSalary() + o1.getBonus(),</span><br><span class="hljs-comment">//                (o2.getSalary()) + o2.getBonus())).get();</span><br><span class="hljs-comment">//        System.out.println(max2);//输出2组max</span><br>        <span class="hljs-comment">//👇,将工资最高的员工对象封装转换成新的Topperformer对象并新建Tp对象来接</span><br>        <span class="hljs-type">Topperformer</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> em1.stream().max((o1, o2) -&gt; Double.compare(o1.getSalary() + o1.getBonus(), (o2.getSalary()) + o2.getBonus()))<span class="hljs-comment">//最高工资对象</span><br>                .map(s -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Topperformer</span>(s.getName(), s.getSalary() + s.getBonus())).get();<span class="hljs-comment">//转换对象</span><br>        <span class="hljs-type">Topperformer</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> em2.stream().max((o1, o2) -&gt; Double.compare(o1.getSalary() + o1.getBonus(), (o2.getSalary()) + o2.getBonus()))<br>                .map(s -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Topperformer</span>(s.getName(), s.getSalary() + s.getBonus())).get();<br>        System.out.println(t1);<br>        System.out.println(t2);<br><br>        <span class="hljs-comment">//分别统计两个部门平均工资并去掉最高和最低;.sorted:指定规则排序;这里sum需要main外定义成static,main里定义的无法在foreach里赋值</span><br>        System.out.println(<span class="hljs-string">&quot;分别统计两部门去掉最大最小的平均工资&quot;</span>);<br>        em1.stream().sorted((o1, o2) -&gt; Double.compare(o1.getSalary() + o1.getBonus(), (o2.getSalary()) + o2.getBonus()))<br>                .skip(<span class="hljs-number">1</span>).limit(em1.size() - <span class="hljs-number">2</span>).forEach(e -&gt; &#123;<br>                    <span class="hljs-comment">//👆跳过第一个,取集合长度-2个(去掉最大最小),累加为sum</span><br>                    sum1 += (e.getSalary() + e.getBonus());<br>                &#125;);<br>        System.out.println(<span class="hljs-string">&quot;1组平均工资:&quot;</span> + sum1 / (em1.size() - <span class="hljs-number">2</span>));<br>        em2.stream().sorted((o1, o2) -&gt; Double.compare(o1.getSalary() + o1.getBonus(), o2.getSalary() + o2.getBonus()))<br>                .skip(<span class="hljs-number">1</span>).limit(em2.size() - <span class="hljs-number">2</span>).forEach(e -&gt; &#123;<br>                    <span class="hljs-comment">//👆跳过第一个,取集合长度-2个(去掉最大最小),累加为sum</span><br>                    sum2 += (e.getSalary() + e.getBonus());<br>                &#125;);<br>        System.out.println(<span class="hljs-string">&quot;2组平均工资:&quot;</span> + sum2 / (em2.size() - <span class="hljs-number">2</span>));<span class="hljs-comment">//工资求和在除人数(去除最大最小)</span><br><br>        <span class="hljs-comment">//统计整体平均工资,去除最大最小</span><br>        System.out.println(<span class="hljs-string">&quot;求整体平均工资,去除极值&quot;</span>);<br>        Stream&lt;Employee&gt; s1 = em1.stream();<br>        Stream&lt;Employee&gt; s2 = em2.stream();<br>        Stream&lt;Employee&gt; s3 = Stream.concat(s1, s2);<span class="hljs-comment">//合并s1,s2</span><br>        s3.sorted(((o1, o2) -&gt; Double.compare(o1.getBonus() + o1.getSalary(), o2.getBonus() + o2.getSalary())))<br>                .skip(<span class="hljs-number">1</span>).limit(em1.size()+em2.size()-<span class="hljs-number">2</span>).forEach(s-&gt;&#123;<br>                    allsum += (s.getBonus()+s.getSalary());<br>                &#125;);<br>        <span class="hljs-comment">//将数据包装成大数据对象,防止运算出错</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">all</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(allsum);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(em1.size()+em2.size()-<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;整体平均工资为:&quot;</span> + all.divide(size,<span class="hljs-number">2</span>, RoundingMode.HALF_UP));<span class="hljs-comment">//相除;保留两位;四舍五入</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="收集Stream流"><a href="#收集Stream流" class="headerlink" title="收集Stream流"></a>收集Stream流</h3><h4 id="stream流的收集方法"><a href="#stream流的收集方法" class="headerlink" title="stream流的收集方法"></a>stream流的收集方法</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625143751492.png" alt="image-20220625143751492"></p><h4 id="Collectors工具类提供的具体收集方式"><a href="#Collectors工具类提供的具体收集方式" class="headerlink" title="Collectors工具类提供的具体收集方式"></a>Collectors工具类提供的具体收集方式</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625143802153.png" alt="image-20220625143802153"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//收集Stream流的数据到集合or数组里</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stream</span>流收集 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; name = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(name, <span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;赵敏&quot;</span>, <span class="hljs-string">&quot;张三丰&quot;</span>, <span class="hljs-string">&quot;周芷若&quot;</span>, <span class="hljs-string">&quot;张强&quot;</span>);<br>        <span class="hljs-comment">//收集集合</span><br>        <span class="hljs-comment">//list</span><br>        Stream&lt;String&gt; s = name.stream().filter(n -&gt; n.startsWith(<span class="hljs-string">&quot;张&quot;</span>));<br>        List&lt;String&gt; zhangList = s.collect(Collectors.toList());<span class="hljs-comment">//将过滤的Stream流收集到List集合</span><br>        System.out.println(zhangList);<br>        <span class="hljs-comment">//注意!!!!!!!,流只能使用一次,使用一次自动关闭;因此这里再创建一次流</span><br>        <span class="hljs-comment">//set</span><br>        Stream&lt;String&gt; s2 = name.stream().filter(n -&gt; n.startsWith(<span class="hljs-string">&quot;张&quot;</span>));<br>        Set&lt;String&gt; zhangSet = s2.collect(Collectors.toSet());<span class="hljs-comment">//收集为set集合</span><br>        System.out.println(zhangSet);<br><br>        <span class="hljs-comment">//收集数组</span><br>        Stream&lt;String&gt; s3 = name.stream().filter(n-&gt;n.startsWith(<span class="hljs-string">&quot;张&quot;</span>));<br>        Object[] zhangarr = s3.toArray();<span class="hljs-comment">//因为可以翻墙往集合里放其他类型数据或往流里修改其他类型数据,所以用object类数组</span><br>        <span class="hljs-comment">//自定义类型来接</span><br>        Stream&lt;String&gt; s4 = name.stream().filter(n-&gt;n.startsWith(<span class="hljs-string">&quot;张&quot;</span>));<br><span class="hljs-comment">//        String[] strings = s4.toArray(new IntFunction&lt;String[]&gt;() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public String[] apply(int value) &#123;</span><br><span class="hljs-comment">//                return new String[value];</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br><span class="hljs-comment">//        String[] strings = s4.toArray(v-&gt; new String[v]);//同上</span><br>        String[] strings = s4.toArray(String[]::<span class="hljs-keyword">new</span>);<span class="hljs-comment">//构造器引用;究极简写</span><br>        System.out.println(Arrays.toString(strings));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="异常概述-体系"><a href="#异常概述-体系" class="headerlink" title="异常概述,体系"></a>异常概述,体系</h3><ul><li>异常是程序在“编译”或者“执行”的过程中可能出现的问题，注意:语法错误不算在异常体系中。</li><li>比如:数组索引越界、空指针异常、日期格式化异常，等…</li></ul><h4 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625143931747.png" alt="image-20220625143931747" style="zoom:50%;" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625144036290.png" alt="image-20220625144036290" style="zoom:50%;" /><h3 id="常见运行时异常"><a href="#常见运行时异常" class="headerlink" title="常见运行时异常"></a>常见运行时异常</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625144132005.png" alt="image-20220625144132005" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行时异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 数组索引越界异常;ArrayIndexOutOfBoundsException</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>&#125;;<br>        System.out.println(arr[<span class="hljs-number">0</span>]);<br>        System.out.println(arr[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//        System.out.println(arr[5]);//异常</span><br>        <span class="hljs-comment">// 2 空指针异常;NullPointerException</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//        System.out.println(name.length());//取字符串长度;异常</span><br>        <span class="hljs-comment">// 3 类型转换异常;ClassCastException</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br><span class="hljs-comment">//        String b = (String)a;//异常</span><br>        <span class="hljs-comment">// 4 数学操作异常;ArithmeticException</span><br><span class="hljs-comment">//        int o = 10/0;//不能除0</span><br>        <span class="hljs-comment">// 5 数字转换异常;NumberFormatException</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aaa&quot;</span>;<br><span class="hljs-comment">//        Integer i = Integer.valueOf(s);//英文转整数</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常见编译时异常"><a href="#常见编译时异常" class="headerlink" title="常见编译时异常"></a>常见编译时异常</h3><ul><li>不是RuntimeException或者其子类的异常，编译阶就报错，必须处理，否则代码不通过。</li></ul><h3 id="异常的默认处理流程"><a href="#异常的默认处理流程" class="headerlink" title="异常的默认处理流程"></a>异常的默认处理流程</h3><ul><li>默认会在出现异常的代码那里自动的创建一个异常对象:ArithmeticException。</li><li>异常会从方法中出现的点这里抛出给调用者，调用者最终抛出给JVM虚拟机。</li><li>虚拟机接收到异常对象后，先在控制台直接输出异常栈信息数据。</li><li>直接从当前执行的异常点干掉当前程序。</li><li>后续代码没有机会执行了，因为程序已经死亡。</li></ul><h3 id="编译时异常处理机制"><a href="#编译时异常处理机制" class="headerlink" title="编译时异常处理机制"></a>编译时异常处理机制</h3><ul><li>出现异常直接抛出去给调用者，调用者也继续抛出去。</li><li>出现异常自己捕获处理，不麻烦别人。</li><li>前两者结合，出现异常直接抛出去给调用者，调用者捕获处理。</li></ul><h4 id="处理方式1-throws"><a href="#处理方式1-throws" class="headerlink" title="处理方式1-throws"></a>处理方式1-throws</h4><ul><li>throws:用在方法上，可以将方法内部出现的异常抛出去给本方法的调用者处理。</li><li>这种方式并不好，发生异常的方法自己不处理异常，如果异常最终抛出去给虚拟机将引起程序死亡。</li></ul><h5 id="这种方法默认层层抛出-方法里抛出给调用方法的语句A-A还需要再次抛出给虚拟机-方法里异常多就需要抛出很多个"><a href="#这种方法默认层层抛出-方法里抛出给调用方法的语句A-A还需要再次抛出给虚拟机-方法里异常多就需要抛出很多个" class="headerlink" title="这种方法默认层层抛出,方法里抛出给调用方法的语句A,A还需要再次抛出给虚拟机,方法里异常多就需要抛出很多个"></a>这种方法默认层层抛出,方法里抛出给调用方法的语句A,A还需要再次抛出给虚拟机,<font color='red'>方法里异常多就需要抛出很多个</font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// throws</span><br><span class="hljs-keyword">public</span> class 异常处理<span class="hljs-keyword">throws</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        dateString(<span class="hljs-string">&quot;2010-10-12 11:11:11&quot;</span>);<span class="hljs-comment">//调用方法者继续抛出</span><br>    &#125;<br><span class="hljs-comment">//.parse抛出给调用方法者,所以直接 throwa Exception,抛出根异常</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dateString</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-comment">//创建简单日期格式化类</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-comment">//解析字符串成为日期对象</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(s);<span class="hljs-comment">//这里parse会报错(提醒作用);编译时异常,需抛出异常</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625150123367.png" alt="image-20220625150123367" style="zoom:50%;" /><h5 id="所以直接抛出根异常-Ecxception-无论有多少异常都可以-此方法只抛出-不处理"><a href="#所以直接抛出根异常-Ecxception-无论有多少异常都可以-此方法只抛出-不处理" class="headerlink" title="所以直接抛出根异常,Ecxception,无论有多少异常都可以,此方法只抛出,不处理"></a>所以直接抛出根异常,Ecxception,无论有多少异常都可以,此方法只抛出,不处理</h5><h4 id="处理方式2-try…catch…"><a href="#处理方式2-try…catch…" class="headerlink" title="处理方式2-try…catch…"></a>处理方式2-try…catch…</h4><ul><li>监视捕获异常，用在方法内部，可以将方法内部出现的异常直接捕获处理。</li><li>这种方式还可以，发生异常的方法自己独立完成异常的处理，程序可以继续往下执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//try...catch...</span><br><span class="hljs-keyword">public</span> class 异常处理trycatch &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>        dateString(<span class="hljs-string">&quot;2010-10-12 11:11:11&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dateString</span><span class="hljs-params">(String s)</span>  &#123;<br>        <span class="hljs-comment">//这里将整段代码try catch,也可以将一行代码try catch</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建简单日期格式化类</span><br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd/HH:mm:ss&quot;</span>);<span class="hljs-comment">//这里将代码格式写错,引发异常</span><br>            <span class="hljs-comment">//解析字符串成为日期对象</span><br>            <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(s);<span class="hljs-comment">//这里parse会报错(提醒作用);编译时异常,需抛出异常</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">//这里也直接使用Exception根异常,不然出现多个就需要catch多个</span><br>            e.printStackTrace();<span class="hljs-comment">//默认的异常提示;打印异常栈信息</span><br>            System.out.println(<span class="hljs-string">&quot;这里是上面这段代码发生异常会出现的提示!!!&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;这里代表继续执行,不会终结程序&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="异常处理方式3-前两者结合"><a href="#异常处理方式3-前两者结合" class="headerlink" title="异常处理方式3-前两者结合"></a>异常处理方式3-前两者结合</h4><ul><li>方法出错直接抛出,调用者进行try…catch…</li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>在开发中按照规范来说第三种方式是最好的:底层的异常抛出去给最外层，最外层集中捕获处理。</li><li>实际应用中，只要代码能够编译通过，并且功能能完成，那么每一种异常处理方式似乎也都是可以的。</li></ul><h3 id="运行时异常处理机制"><a href="#运行时异常处理机制" class="headerlink" title="运行时异常处理机制"></a>运行时异常处理机制</h3><ul><li>运行时异常编译阶段不会出错，是运行时才可能出错的，所以编译阶段不处理也可以。</li><li>按照规范建议还是处理:建议在最外层调用处集中捕获处理即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行时异常处理机制</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//出错进行捕获</span><br>        System.out.println(<span class="hljs-string">&quot;程序开始&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            chu(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">chu</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> o)</span> &#123;<span class="hljs-comment">//运行时异常默认抛出,所以不用手动抛出</span><br>        System.out.println(<span class="hljs-string">&quot;i&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;o&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> i/o;<br>        System.out.println(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异常处理案例"><a href="#异常处理案例" class="headerlink" title="异常处理案例"></a>异常处理案例</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625151013897.png" alt="image-20220625151013897" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//输入合法的价格,要求价格大于0</span><br><span class="hljs-keyword">public</span> class 异常处理案例 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        OUT:<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;输入合法价格&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> in.nextLine();<span class="hljs-comment">//这里不用nextdouble是因为用了就一定要输入小数</span><br>                <span class="hljs-comment">//转换格式</span><br>                <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> Double.valueOf(e);<br>                <span class="hljs-keyword">if</span>(money&gt;<span class="hljs-number">0</span>)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;价格:&quot;</span> + money);<br>                    <span class="hljs-keyword">break</span> OUT;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    System.out.println(<span class="hljs-string">&quot;错误&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException ex) &#123;<br>                ex.printStackTrace();<br>                System.out.println(<span class="hljs-string">&quot;请输入合法数值&quot;</span>);<span class="hljs-comment">//用户输入其他类型时,程序不会死亡</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><h5 id="自定义异常的必要"><a href="#自定义异常的必要" class="headerlink" title="自定义异常的必要"></a>自定义异常的必要</h5><ul><li>Java无法为这个世界上全部的问题提供异常类。</li><li>如果企业想通过异常的方式来管理自己的某个业务问题，就需要自定义异常类了。</li></ul><h5 id="自定义异常的好处"><a href="#自定义异常的好处" class="headerlink" title="自定义异常的好处"></a>自定义异常的好处</h5><ul><li>可以使用异常的机制管理业务问题，如提醒程序员注意</li><li>同时一旦出现bug，可以用异常的形式清晰的指出出错的地方。</li></ul><h5 id="自定义编译时异常"><a href="#自定义编译时异常" class="headerlink" title="自定义编译时异常"></a>自定义编译时异常</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编译时异常;自定义编译时异常类</span><br><span class="hljs-comment">// 1 继承Exception</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">(String message, Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cause);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">(String message, Throwable cause, <span class="hljs-type">boolean</span> enableSuppression, <span class="hljs-type">boolean</span> writableStackTrace)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause, enableSuppression, writableStackTrace);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//年龄小于0大于200就是异常</span><br><span class="hljs-keyword">public</span> class 自定义编译时异常 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;程序开始&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            checkAge(-<span class="hljs-number">12</span>);<span class="hljs-comment">//在调用时就会报错,所以try catch</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> <span class="hljs-keyword">throws</span> Exception &#123;<span class="hljs-comment">//在这里抛出</span><br>        <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">0</span> || age &gt; <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-comment">//抛出异常给调用者</span><br>            <span class="hljs-comment">//throw:在方法内部直接创建异常对象,并从此点抛出</span><br>            <span class="hljs-comment">//throws:用在方法申明上,抛出方法内部异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeException</span>(age + <span class="hljs-string">&quot; 年龄错误&quot;</span>);<span class="hljs-comment">//此行写出就会报错,因为本身就是编译时异常,需要抛出</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;年龄合法&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="自定义运行时异常"><a href="#自定义运行时异常" class="headerlink" title="自定义运行时异常"></a>自定义运行时异常</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2 运行时异常;自定义运行时异常类</span><br><span class="hljs-comment">//继承RuntimeException</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeRuntimeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeRuntimeException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeRuntimeException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeRuntimeException</span><span class="hljs-params">(String message, Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeRuntimeException</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cause);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeRuntimeException</span><span class="hljs-params">(String message, Throwable cause, <span class="hljs-type">boolean</span> enableSuppression, <span class="hljs-type">boolean</span> writableStackTrace)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause, enableSuppression, writableStackTrace);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//区别:编译时不再报错</span><br><span class="hljs-keyword">public</span> class 自定义运行时异常 &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;程序开始&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        checkAge(-<span class="hljs-number">12</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">0</span> || age &gt; <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-comment">//抛出异常给调用者</span><br>            <span class="hljs-comment">//throw:在方法内部直接创建异常对象,并从此点抛出</span><br>            <span class="hljs-comment">//throws:用在方法申明上,抛出方法内部异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeRuntimeException</span>(age + <span class="hljs-string">&quot; 年龄错误&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;年龄合法&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>可以将系统执行的信息选择性的记录到指定的位置（控制台、文件中、数据库中）。</li><li>可以随时以开关的形式控制是否记录日志，无需修改源代码。</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625151331242.png" style="zoom:50%;" /><h3 id="Logback日志框架"><a href="#Logback日志框架" class="headerlink" title="Logback日志框架"></a>Logback日志框架</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625151459750.png" alt="image-20220625151459750" style="zoom:50%;" /><h4 id="Logback分为三个技术模块"><a href="#Logback分为三个技术模块" class="headerlink" title="Logback分为三个技术模块"></a>Logback分为三个技术模块</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625151548038.png" alt="image-20220625151548038" style="zoom:50%;" /><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625151633110.png" alt="image-20220625151633110" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//快速搭建Logback日志框架,记录程序执行情况到控制台,文件中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-comment">//创建Logback日志对象,代表日志技术</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-string">&quot;Test.class&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            LOGGER.debug(<span class="hljs-string">&quot;main方法执行&quot;</span>);<br>            LOGGER.info(<span class="hljs-string">&quot;main方法执行2&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            LOGGER.trace(<span class="hljs-string">&quot;a=&quot;</span> + a);<br>            LOGGER.trace(<span class="hljs-string">&quot;b=&quot;</span> + b);<br>            System.out.println(a / b);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            LOGGER.error(<span class="hljs-string">&quot;程序错误:&quot;</span> + e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Logback配置"><a href="#Logback配置" class="headerlink" title="Logback配置"></a>Logback配置</h3><h4 id="输出位置-格式位置"><a href="#输出位置-格式位置" class="headerlink" title="输出位置,格式位置"></a>输出位置,格式位置</h4><blockquote><p>Logback日志系统的特性都是通过核心配置文件logback.xml控制的。</p></blockquote><ul><li>通过logback.xml中的<append>标签可以设置输出位置和日志信息的详细格式</li><li>通常可以设置2个日志输出位置:一个是控制台、一个是系统文件中</li></ul><h4 id="日志级别设置"><a href="#日志级别设置" class="headerlink" title="日志级别设置"></a>日志级别设置</h4><ul><li>级别程度依次是:TRACE&lt; DEBUG&lt;INFO&lt;WARN&lt;ERROR﹔默认级别是debug(忽略大小写)，对应其方法。</li><li>作用:用于控制系统中哪些日志级别是可以输出的，只输出级别不低于设定级别的日志信息。</li><li>ALL 和OFF分别是打开全部日志信息，及关闭全部日志信息。</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625152013607.png" alt="image-20220625152013607" style="zoom:50%;" /><h2 id="项目实战-电影购票系统-项目新建"><a href="#项目实战-电影购票系统-项目新建" class="headerlink" title="项目实战:电影购票系统(项目新建)"></a>项目实战:电影购票系统(项目新建)</h2><h3 id="日志框架搭建-系统角色分析"><a href="#日志框架搭建-系统角色分析" class="headerlink" title="日志框架搭建,系统角色分析"></a>日志框架搭建,系统角色分析</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625152211779.png" alt="image-20220625152211779" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义父类用户</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String loginName;<span class="hljs-comment">//用户登录名</span><br>    <span class="hljs-keyword">private</span> String userName;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> String passWord;<span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">private</span> String phone;<span class="hljs-comment">//电话</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<span class="hljs-comment">//账户金额</span><br>    ...<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义电影类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String actor;<span class="hljs-comment">//演员</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<span class="hljs-comment">//评分</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> time;<span class="hljs-comment">//电影时长</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<span class="hljs-comment">//价格</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<span class="hljs-comment">//余票</span><br>    <span class="hljs-keyword">private</span> Date startTime;<span class="hljs-comment">//开始时间</span><br>    ...<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义客户类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(String loginName, String userName, String passWord, <span class="hljs-type">char</span> sex, String phone, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">super</span>(loginName, userName, passWord, sex, phone, money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义商家类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Business</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-keyword">private</span> String shopName;<span class="hljs-comment">//店铺名</span><br>    <span class="hljs-keyword">private</span> String address;<span class="hljs-comment">//地址</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Business</span><span class="hljs-params">(String loginName, String userName, String passWord, <span class="hljs-type">char</span> sex, String phone, <span class="hljs-type">double</span> money, String shopName, String address)</span> &#123;<br>        <span class="hljs-built_in">super</span>(loginName, userName, passWord, sex, phone, money);<br>        <span class="hljs-built_in">this</span>.shopName = shopName;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br>    ...<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.run;<br><br><span class="hljs-keyword">import</span> com.kong.bean.Business;<br><span class="hljs-keyword">import</span> com.kong.bean.Customer;<br><span class="hljs-keyword">import</span> com.kong.bean.Movie;<br><span class="hljs-keyword">import</span> com.kong.bean.User;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MovieSystem</span> &#123;<br>    <span class="hljs-comment">// 1 定义系统容器存储用户数据,只需一个所以定义为静态,final将其变为常量,不能更改地址(可以往里存数据)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;User&gt; AlL_USERS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 2 储存商家及其排片信息;静态</span><br><span class="hljs-comment">//    商家1 = [p1,p2,...]</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Business, List&lt;Movie&gt;&gt; ALL_MOVIES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> User loginUser;<span class="hljs-comment">//定义用户类,让其他方法也可调用用户信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);<span class="hljs-comment">//定义字符转时间格式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-string">&quot;MovieSystem.class&quot;</span>);<span class="hljs-comment">//创建日志对象</span><br><br>    <span class="hljs-comment">// 3 定义测试数据;静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;kehu1&quot;</span>, <span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&quot;kehu&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&quot;15655555555&quot;</span>, <span class="hljs-number">100</span>);<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;kehu2&quot;</span>, <span class="hljs-string">&quot;小好&quot;</span>, <span class="hljs-string">&quot;kehu&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-string">&quot;156&quot;</span>, <span class="hljs-number">120</span>);<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;kehu3&quot;</span>, <span class="hljs-string">&quot;里明&quot;</span>, <span class="hljs-string">&quot;kehu&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&quot;157&quot;</span>, <span class="hljs-number">150</span>);<br><br>        <span class="hljs-type">Business</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Business</span>(<span class="hljs-string">&quot;shangjia1&quot;</span>, <span class="hljs-string">&quot;商家1&quot;</span>, <span class="hljs-string">&quot;shangjia&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>,<br>                <span class="hljs-string">&quot;177&quot;</span>, <span class="hljs-number">5000</span>, <span class="hljs-string">&quot;东方影城&quot;</span>, <span class="hljs-string">&quot;马鹦路一号&quot;</span>);<br>        List&lt;Movie&gt; movies = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//新建电影集合1</span><br><span class="hljs-comment">//        try &#123;</span><br><span class="hljs-comment">//            movies.add(new Movie(&quot;霸王&quot;,&quot;张国荣&quot;,200,20,100,sdf.parse(&quot;2000/12/12 11:11:00&quot;)));</span><br><span class="hljs-comment">//        &#125; catch (ParseException e) &#123;</span><br><span class="hljs-comment">//            e.printStackTrace();</span><br><span class="hljs-comment">//        &#125;</span><br>        ALL_MOVIES.put(b1, movies);<span class="hljs-comment">//将商家和电影添加到map里</span><br><br>        <span class="hljs-type">Business</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Business</span>(<span class="hljs-string">&quot;shangjia2&quot;</span>, <span class="hljs-string">&quot;商家2&quot;</span>, <span class="hljs-string">&quot;shangjia&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>,<br>                <span class="hljs-string">&quot;188&quot;</span>, <span class="hljs-number">5000</span>, <span class="hljs-string">&quot;西方影城&quot;</span>, <span class="hljs-string">&quot;马鹦路二号&quot;</span>);<br>        List&lt;Movie&gt; movies1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ALL_MOVIES.put(b2, movies1);<br><br>        Collections.addAll(AlL_USERS, c1, c2, c3, b1, b2);<span class="hljs-comment">//将所有商家和所有客户信息添加到用户集合</span><br>    &#125;<br><br>    <span class="hljs-comment">//定义扫描器对象,重复使用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">SYS_IN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        homePage();<span class="hljs-comment">//运行主页</span><br>    &#125;<br><br>    <span class="hljs-comment">// 1 创建首页</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">homePage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;=====================电影首页=====================&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1 登录&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2 用户注册&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3 商家注册&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入选项&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>            <span class="hljs-keyword">switch</span> (command) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    <span class="hljs-comment">//登录</span><br>                    login();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;命令输入错误,请重试&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录功能</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入登录名&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>            System.out.println(<span class="hljs-string">&quot;请输入密码&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">passWord</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>            <span class="hljs-comment">// 1 根据用户名查询用户对象</span><br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getUserByLoginName(loginName);<span class="hljs-comment">//根据用户名找到的对象;找不到为null</span><br>            <span class="hljs-comment">// 2 判断用户对象</span><br>            <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 3 登录名匹配到,比对密码是否正确</span><br>                <span class="hljs-keyword">if</span> (user.getPassWord().equals(passWord)) &#123;<br>                    <span class="hljs-comment">//登录成功</span><br>                    loginUser = user;<span class="hljs-comment">//将获取的用户赋值给loginUser,方便其他方法使用</span><br>                    LOGGER.info(loginUser.getUserName() + <span class="hljs-string">&quot;登录了系统&quot;</span>);<span class="hljs-comment">//记录日志</span><br>                    <span class="hljs-comment">//判断返回元素的真实类型;客户还是商家</span><br>                    <span class="hljs-keyword">if</span> (user <span class="hljs-keyword">instanceof</span> Business) &#123;<span class="hljs-comment">//如果是商家</span><br>                        showBusinessMain();<span class="hljs-comment">//展示商家菜单</span><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//不为商家则为客户</span><br>                        showCustomerMain();<span class="hljs-comment">//展示客户菜单</span><br>                    &#125;<br>                    <span class="hljs-keyword">return</span>;<span class="hljs-comment">//在用户菜单退出后到这里return退出到主页</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;密码错误,请确认&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;登录名错误,请确认&quot;</span>);<span class="hljs-comment">//未找到用户</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名查找对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loginName 输入的用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 输出对象或为null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> User <span class="hljs-title function_">getUserByLoginName</span><span class="hljs-params">(String loginName)</span> &#123;<br>        <span class="hljs-keyword">for</span> (User user : AlL_USERS) &#123;<span class="hljs-comment">//遍历用户集合</span><br>            <span class="hljs-keyword">if</span> (user.getLoginName().equals(loginName)) &#123;<span class="hljs-comment">//和输入的登录名进行比对</span><br>                <span class="hljs-keyword">return</span> user;<span class="hljs-comment">//找到就输出这个用户</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//没找到,为空输出</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 客户主页</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showCustomerMain</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;==========电影客户界面==========&quot;</span>);<br>            System.out.println(loginUser.getUserName().charAt(<span class="hljs-number">0</span>) + (loginUser.getSex() != <span class="hljs-string">&#x27;男&#x27;</span> ? <span class="hljs-string">&quot;女士&quot;</span> : <span class="hljs-string">&quot;先生&quot;</span>)<br>                    + <span class="hljs-string">&quot;欢迎进入影院系统,余额:&quot;</span>+loginUser.getMoney()+<span class="hljs-string">&quot;元&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1 查看全部影片&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2 查找影片&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3 评分&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;4 购票&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;5 退出&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请选择选项&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>            <span class="hljs-keyword">switch</span> (command) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    showAllMovie();<span class="hljs-comment">//电影展示</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<span class="hljs-comment">//购票</span><br>                    buyMovie();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;5&quot;</span>:<br>                    <span class="hljs-keyword">return</span>;<span class="hljs-comment">//直接结束方法</span><br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入错误,请重试&quot;</span>);<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 客户界面-&gt;展示全部影片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllMovie</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==========电影信息==========&quot;</span>);<br>        ALL_MOVIES.forEach((business, movies) -&gt; &#123;<br>            System.out.println(business.getShopName() + <span class="hljs-string">&quot;\t\t电话&quot;</span><br>                    + business.getPhone() + <span class="hljs-string">&quot;\t\t地址&quot;</span> + business.getAddress());<br>            System.out.println(<span class="hljs-string">&quot;片名\t\t\t主演\t\t时长\t评分\t\t票价\t\t余票数量\t\t放映时间&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Movie movie : movies) &#123;<span class="hljs-comment">//这里movie为空的话不会输出任何东西</span><br>                System.out.println(movie.getName() + <span class="hljs-string">&quot;\t\t\t&quot;</span> + movie.getActor() + <span class="hljs-string">&quot;\t\t&quot;</span> + movie.getTime() + <span class="hljs-string">&quot;\t\t&quot;</span><br>                        + movie.getScore() + <span class="hljs-string">&quot;\t\t&quot;</span> + movie.getPrice() + <span class="hljs-string">&quot;\t\t&quot;</span> + movie.getNumber()<br>                        + <span class="hljs-string">&quot;\t\t&quot;</span> + sdf.format(movie.getStartTime()));<span class="hljs-comment">//这里时间用上面定义的格式 sdf</span><br><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 客户主页-&gt;购票</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyMovie</span><span class="hljs-params">()</span> &#123;<br>        showAllMovie();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;==========电影购票==========&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入店铺名&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">shopName</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>            <span class="hljs-type">Business</span> <span class="hljs-variable">userByShopName</span> <span class="hljs-operator">=</span> getUserByShopName(shopName);<br>            <span class="hljs-keyword">if</span> (userByShopName != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//已查找到店铺</span><br>                List&lt;Movie&gt; movies = ALL_MOVIES.get(userByShopName);<span class="hljs-comment">//根据店铺找影片集合</span><br>                <span class="hljs-keyword">if</span> (movies.size() &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//当前店铺已上架影片</span><br>                    OUT:<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;片名\t\t\t主演\t\t\t时长\t\t\t评分\t\t\t票价\t\t\t余票数量\t\t\t放映时间&quot;</span>);<br>                        <span class="hljs-keyword">for</span> (Movie movie : movies) &#123;<br>                            System.out.println(movie.getName() + <span class="hljs-string">&quot;\t\t\t&quot;</span> + movie.getActor() + <span class="hljs-string">&quot;\t\t&quot;</span> + movie.getTime() + <span class="hljs-string">&quot;\t\t&quot;</span><br>                                    + movie.getScore() + <span class="hljs-string">&quot;\t\t&quot;</span> + movie.getPrice() + <span class="hljs-string">&quot;\t\t&quot;</span> + movie.getNumber()<br>                                    + <span class="hljs-string">&quot;\t\t&quot;</span> + sdf.format(movie.getStartTime()));<span class="hljs-comment">//这里时间用上面定义的格式 sdf</span><br>                        &#125;<br>                        System.out.println(<span class="hljs-string">&quot;请输入要购买的影片&quot;</span>);<br>                        <span class="hljs-comment">//判断是否能找到影片</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">movieName</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                        <span class="hljs-comment">//根据影片名称进行查找对象,找到返回对象,找不到返回null</span><br>                        <span class="hljs-type">Movie</span> <span class="hljs-variable">getMovie</span> <span class="hljs-operator">=</span> getMovieByName(userByShopName,movieName);<span class="hljs-comment">//方法:根据影片名返回电影对象</span><br>                        <span class="hljs-keyword">if</span> (getMovie != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//不为空进行购买</span><br>                            <span class="hljs-keyword">if</span> (getMovie.getNumber()&gt;<span class="hljs-number">0</span>)&#123;<br>                                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                                    System.out.println(<span class="hljs-string">&quot;请输入购买的数量&quot;</span>);<br>                                    <span class="hljs-type">String</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                                    <span class="hljs-keyword">if</span>(getMovie.getNumber()&lt;Integer.valueOf(number))&#123;<br>                                        System.out.println(<span class="hljs-string">&quot;当前数量不足,请重新输入数量或更换影片&lt;余票:&quot;</span>+getMovie.getNumber()+<span class="hljs-string">&quot;&gt;&quot;</span>);<br>                                        System.out.println(<span class="hljs-string">&quot;重新输入-y,更换影片-n&quot;</span>);<br>                                        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                                        <span class="hljs-keyword">switch</span> (command) &#123;<br>                                            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>                                                <span class="hljs-keyword">break</span>;<br>                                            <span class="hljs-keyword">default</span>:<br>                                                <span class="hljs-keyword">return</span>;<br>                                        &#125;<br>                                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                                       <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(Double.valueOf(number))<br>                                               .multiply(BigDecimal.valueOf(getMovie.getPrice())).doubleValue();<br>                                        <span class="hljs-keyword">if</span>(loginUser.getMoney()&gt;=money)&#123;<br>                                            getMovie.setNumber(getMovie.getNumber() - Integer.valueOf(number));<span class="hljs-comment">//将余票减去</span><br>                                            loginUser.setMoney(loginUser.getMoney()-money);<span class="hljs-comment">//将用户余额减去</span><br>                                            userByShopName.setMoney(userByShopName.getMoney()+money);<span class="hljs-comment">//将商家余额增加</span><br>                                            System.out.println(<span class="hljs-string">&quot;影片&lt;&quot;</span> + getMovie.getName() + <span class="hljs-string">&quot;&gt;购买成功&quot;</span>);<br>                                            System.out.println(getMovie.getNumber());<br>                                            <span class="hljs-keyword">return</span>;<br>                                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                                            System.out.println(<span class="hljs-string">&quot;余额不足&quot;</span>);<br>                                            System.out.println(<span class="hljs-string">&quot;重新输入-y,退出-n&quot;</span>);<br>                                            <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                                            <span class="hljs-keyword">switch</span> (command) &#123;<br>                                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>                                                    <span class="hljs-keyword">break</span>;<br>                                                <span class="hljs-keyword">default</span>:<br>                                                    <span class="hljs-keyword">return</span>;<br>                                            &#125;<br>                                        &#125;<br><br>                                    &#125;<br>                                &#125;<br>                            &#125;<span class="hljs-keyword">else</span>&#123;<br>                                System.out.println(<span class="hljs-string">&quot;当前影片已卖完,请更换&quot;</span>);<br>                                System.out.println(<span class="hljs-string">&quot;重新输入-y,退出-n&quot;</span>);<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                                <span class="hljs-keyword">switch</span> (command) &#123;<br>                                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>                                        <span class="hljs-keyword">break</span>;<br>                                    <span class="hljs-keyword">default</span>:<br>                                        <span class="hljs-keyword">return</span>;<br>                                &#125;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            System.out.println(<span class="hljs-string">&quot;未查找到此影片,是否重试&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;重新输入-y,退出-n&quot;</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                            <span class="hljs-keyword">switch</span> (command) &#123;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">default</span>:<br>                                    <span class="hljs-keyword">return</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//未上架影片</span><br>                    System.out.println(<span class="hljs-string">&quot;当前店铺已关门&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;重新输入-y,退出-n&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                    <span class="hljs-keyword">switch</span> (command) &#123;<br>                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">default</span>:<br>                            <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;未查找到此店铺,请重试&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据店铺名称返回商家对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Business <span class="hljs-title function_">getUserByShopName</span><span class="hljs-params">(String shopName)</span> &#123;<br>        Set&lt;Business&gt; businesses = ALL_MOVIES.keySet();<br>        <span class="hljs-keyword">for</span> (Business business : businesses) &#123;<br>            <span class="hljs-keyword">if</span> (business.getShopName().equals(shopName)) &#123;<br>                <span class="hljs-keyword">return</span> business;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 商家主页</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBusinessMain</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;==========电影商家界面==========&quot;</span>);<br>            LOGGER.info(loginUser.getUserName() + <span class="hljs-string">&quot;商家,正在后台&quot;</span>);<span class="hljs-comment">//记录日志</span><br>            System.out.println(loginUser.getUserName().charAt(<span class="hljs-number">0</span>) + (loginUser.getSex() != <span class="hljs-string">&#x27;男&#x27;</span> ? <span class="hljs-string">&quot;女士&quot;</span> : <span class="hljs-string">&quot;先生&quot;</span>) + <span class="hljs-string">&quot;欢迎进入影院系统,余额:&quot;</span>+loginUser.getMoney()+<span class="hljs-string">&quot;元&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1 展示详情&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2 上架影片&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3 下架影片&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;4 修改电影&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;5 退出&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请选择选项&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>            <span class="hljs-keyword">switch</span> (command) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-comment">//展示详情</span><br>                    showBusinessInfos();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-comment">//上架影片</span><br>                    addMovie();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-comment">//下架影片</span><br>                    deleteMovie();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<span class="hljs-comment">//修改影片</span><br>                    updateMovie();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;5&quot;</span>:<br>                    System.out.println(loginUser.getUserName() + <span class="hljs-string">&quot;已退出&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<span class="hljs-comment">//直接结束方法</span><br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入错误,请重试&quot;</span>);<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 商家页面-&gt;展示详情</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBusinessInfos</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==========影片详情==========&quot;</span>);<br>        <span class="hljs-comment">//因为前面判断过真实类型所以可以直接将User(父类)转成Business(子类);</span><br>        <span class="hljs-comment">// 调取子类特有方法,(店铺名,地址)</span><br>        <span class="hljs-type">Business</span> <span class="hljs-variable">business</span> <span class="hljs-operator">=</span> (Business) loginUser;<br>        System.out.println(business.getShopName() + <span class="hljs-string">&quot;\t\t电话&quot;</span> + business.getPhone() + <span class="hljs-string">&quot;\t\t地址&quot;</span> + business.getAddress());<br>        <span class="hljs-comment">//根据商家对象(当前登录的用户loginUser)-&gt;map集合的键提取对应的值 Map&lt;Business, List&lt;Movie&gt;&gt; ALL_MOVIES</span><br>        List&lt;Movie&gt; movies = ALL_MOVIES.get(business);<span class="hljs-comment">//根据商家;得到商家的影片信息集合:List&lt;movie&gt;</span><br>        <span class="hljs-keyword">if</span> (movies.size() &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//判断是否已经上架了影片,不判断是否为null,因为商家键存在则有影片对象</span><br>            System.out.println(<span class="hljs-string">&quot;\t片名\t\t\t主演\t\t时长\t\t评分\t\t票价\t\t余票数量\t\t放映时间&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Movie movie : movies) &#123;<br>                System.out.println(movie.getName() + <span class="hljs-string">&quot;\t\t\t&quot;</span> + movie.getActor() + <span class="hljs-string">&quot;\t\t&quot;</span> + movie.getTime() + <span class="hljs-string">&quot;\t\t&quot;</span><br>                        + movie.getScore() + <span class="hljs-string">&quot;\t\t&quot;</span> + movie.getPrice() + <span class="hljs-string">&quot;\t\t&quot;</span> + movie.getNumber()<br>                        + <span class="hljs-string">&quot;\t\t&quot;</span> + sdf.format(movie.getStartTime()));<span class="hljs-comment">//这里时间用上面定义的格式 sdf</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;当前未上架电影&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 商家页面-&gt;上架影片 Map&lt;Business, List&lt;Movie&gt;&gt; ALL_MOVIES</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMovie</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==========影片上架==========&quot;</span>);<br>        <span class="hljs-type">Business</span> <span class="hljs-variable">business</span> <span class="hljs-operator">=</span> (Business) loginUser;<span class="hljs-comment">//将用户传入并转型</span><br>        List&lt;Movie&gt; movies = ALL_MOVIES.get(business);<span class="hljs-comment">//根据商家对象查找键值对的值并赋值给新的movies</span><br>        System.out.println(<span class="hljs-string">&quot;请输入影片名&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">movieName</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入主演&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">actor</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入时长&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入票价&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入票数&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Number</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入影片放映时间&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                <span class="hljs-type">Movie</span> <span class="hljs-variable">movie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(movieName, actor, Double.valueOf(time), Double.valueOf(price),<br>                        Integer.valueOf(Number), sdf.parse(startTime));<br>                System.out.println(<span class="hljs-string">&quot;成功上架影片:&quot;</span> + movie.getName());<br>                movies.add(movie);<span class="hljs-comment">//往movies里添加输入的movie对象</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>                e.printStackTrace();<br>                LOGGER.error(<span class="hljs-string">&quot;时间出现错误&quot;</span>);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 商家页面-&gt;下架影片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteMovie</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==========影片下架==========&quot;</span>);<br>        <span class="hljs-type">Business</span> <span class="hljs-variable">business</span> <span class="hljs-operator">=</span> (Business) loginUser;<span class="hljs-comment">//将用户传入并转型</span><br>        List&lt;Movie&gt; movies = ALL_MOVIES.get(business);<span class="hljs-comment">//根据商家对象查找键值对的值并赋值给新的movies</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (movies.size() &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//判断是否已上架电影</span><br>                System.out.println(<span class="hljs-string">&quot;请输入需要下架影片名称&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">movieName</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                <span class="hljs-comment">//根据影片名称进行查找对象,找到返回对象,找不到返回null</span><br>                <span class="hljs-type">Movie</span> <span class="hljs-variable">getMovie</span> <span class="hljs-operator">=</span> getMovieByName(business,movieName);<br>                <span class="hljs-keyword">if</span> (getMovie != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//不为空进行删除</span><br>                    <span class="hljs-comment">//根据对象将其在集合中删除</span><br>                    movies.remove(getMovie);<br>                    System.out.println(<span class="hljs-string">&quot;影片:&lt;&quot;</span> + getMovie.getName() + <span class="hljs-string">&quot;&gt;下架成功&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;未查找到此影片,是否重试&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;重新输入-y,退出-n&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                    <span class="hljs-keyword">switch</span> (command) &#123;<br>                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">default</span>:<br>                            <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;当前未上架影片&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 下架影片-&gt;根据片名返回电影对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Movie <span class="hljs-title function_">getMovieByName</span><span class="hljs-params">(Business business,String movieName)</span> &#123;<br>        <span class="hljs-comment">//根据对象键获取商家对应影片集合值</span><br>        List&lt;Movie&gt; movies = ALL_MOVIES.get(business);<br>        <span class="hljs-comment">//根据输入的信息进行查找遍历</span><br>        <span class="hljs-keyword">for</span> (Movie movie : movies) &#123;<br>            <span class="hljs-keyword">if</span> (movie.getName().equals(movieName)) &#123;<br>                <span class="hljs-keyword">return</span> movie;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 商家页面-&gt;修改影片信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateMovie</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==========影片修改==========&quot;</span>);<br>        <span class="hljs-type">Business</span> <span class="hljs-variable">business</span> <span class="hljs-operator">=</span> (Business) loginUser;<span class="hljs-comment">//将用户传入并转型</span><br>        List&lt;Movie&gt; movies = ALL_MOVIES.get(business);<span class="hljs-comment">//根据商家对象查找键值对的值并赋值给新的movies</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (movies.size() != <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入需要修改影片名称&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">movieName</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                <span class="hljs-comment">//根据影片名称进行查找对象,找到返回对象,找不到返回null</span><br>                <span class="hljs-type">Movie</span> <span class="hljs-variable">getMovie</span> <span class="hljs-operator">=</span> getMovieByName(business,movieName);<br>                <span class="hljs-keyword">if</span> (getMovie != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//不为空进行修改</span><br>                    System.out.println(<span class="hljs-string">&quot;请输入更新后的影片名&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                    System.out.println(<span class="hljs-string">&quot;请输入更新后的主演&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">newActor</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                    System.out.println(<span class="hljs-string">&quot;请输入更新后的时长&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">newTime</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                    System.out.println(<span class="hljs-string">&quot;请输入更新后的票价&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">newPrice</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                    System.out.println(<span class="hljs-string">&quot;请输入更新后的票数&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">newNumber</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                    getMovie.setName(newName);<br>                    getMovie.setActor(newActor);<br>                    getMovie.setTime(Double.valueOf(newTime));<br>                    getMovie.setPrice(Double.valueOf(newPrice));<br>                    getMovie.setNumber(Integer.valueOf(newNumber));<br>                    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            System.out.println(<span class="hljs-string">&quot;请输入影片放映时间 格式:2020/12/12 11:11:11&quot;</span>);<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">newStartTime</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                            getMovie.setStartTime(sdf.parse(newStartTime));<span class="hljs-comment">//修改放映时间</span><br>                            System.out.println(<span class="hljs-string">&quot;影片:&lt;&quot;</span> + getMovie.getName() + <span class="hljs-string">&quot;&gt;修改完成&quot;</span>);<br>                            showBusinessInfos();<span class="hljs-comment">//修改完调用查询方法</span><br>                        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                            e.printStackTrace();<br>                            System.out.println(<span class="hljs-string">&quot;时间格式错误,请重试&quot;</span>);<br>                        &#125;<br>                        System.out.println(<span class="hljs-string">&quot;成功修改影片:&quot;</span> + getMovie.getName());<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;未查找到此影片,是否重试&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;重新输入-y,退出-n&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> SYS_IN.nextLine();<br>                    <span class="hljs-keyword">switch</span> (command) &#123;<br>                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">default</span>:<br>                            <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;当前未上架影片&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><h3 id="File类概述"><a href="#File类概述" class="headerlink" title="File类概述"></a>File类概述</h3><ul><li>File类在包java.io.File下、代表操作系统的文件对象（文件、文件夹)。</li><li>File类提供了诸如:定位文件，获取文件本身的信息、删除文件、创建文件（文件夹）等功能。</li></ul><h3 id="File类创建对象"><a href="#File类创建对象" class="headerlink" title="File类创建对象"></a>File类创建对象</h3><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625152604710.png" alt="image-20220625152604710"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//学会创建file对象,定位操作系统文件(文件 文件夹)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fileDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 创建file对象(指定文件路径)</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Java\\fileDemo\\绿建项目-HM-.png&quot;</span>);<span class="hljs-comment">//只保留路径;双\\转译防止以n开头</span><br>        <span class="hljs-comment">//使用正斜杠,就不用转译:&quot;D:/Java/fileDemo/绿建项目-HM-.png&quot;;</span><br>        <span class="hljs-comment">//File.separator等同\\或者/:&quot;D:&quot;+File.separator+&quot;Java&quot;+File.separator+&quot;fileDemo&quot;+File.separator+&quot;绿建项目-HM-.png&quot;</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> f.length();<span class="hljs-comment">//获取的是文件的字节大小</span><br>        System.out.println(length);<span class="hljs-comment">//353000</span><br>        <span class="hljs-comment">// 2 File创建对象,支持相对路径,也支持绝对路径</span><br>        <span class="hljs-comment">// 绝对路径</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Java\\fileDemo\\photo1.JPG&quot;</span>);<br>        System.out.println(f1.length());<br>        <span class="hljs-comment">// 相对路径//工程文件下的模块,把模块换到别的工程同样可以</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file-io/src/Demo.txt&quot;</span>);<br>        System.out.println(f2.length());<br>        <span class="hljs-comment">//file创建对象,获取文件夹</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/java&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> f3.exists();<span class="hljs-comment">//判断路径是否存在</span><br>        System.out.println(exists);<span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625152731523.png" alt="image-20220625152731523" style="zoom: 50%;" /><h3 id="File类常用Api"><a href="#File类常用Api" class="headerlink" title="File类常用Api"></a>File类常用Api</h3><h4 id="判断文件类型-获取文件信息"><a href="#判断文件类型-获取文件信息" class="headerlink" title="判断文件类型,获取文件信息"></a>判断文件类型,获取文件信息</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625152812834.png" alt="image-20220625152812834" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断文件类型,获取文件信息</span><br><span class="hljs-comment">//创建file类对象</span><br><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file-io/src/demo.txt&quot;</span>);<br><span class="hljs-comment">// 1 .getAbsolutePath() 获取绝对路径</span><br>System.out.println(f.getAbsolutePath());<span class="hljs-comment">//D:\Java\code\javasepro\file-io\src\demo.txt</span><br><span class="hljs-comment">// 2 .getPath() 获取文件定义时使用的路径</span><br>System.out.println(f.getPath());<span class="hljs-comment">//file-io\src\demo.txt</span><br><span class="hljs-comment">// 3 .getName() 获取文件or文件夹的名称,带后缀</span><br>System.out.println(f.getName());<span class="hljs-comment">//demo.txt</span><br><span class="hljs-comment">// 4 .length() 获取文件大小;字节</span><br>System.out.println(f.length());<span class="hljs-comment">//23</span><br><span class="hljs-comment">// 5 lastModified() 获取文件的最后修改时间,返回long型</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> f.lastModified();<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(l));<span class="hljs-comment">//2022-05-28 09:57:27</span><br><span class="hljs-comment">// 6 判断是文件还是文件夹</span><br><span class="hljs-comment">// .isFile() 文件</span><br>System.out.println(f.isFile());<span class="hljs-comment">//true</span><br><span class="hljs-comment">// .isDirectory() 文件夹</span><br>System.out.println(f.isDirectory());<span class="hljs-comment">//false</span><br><span class="hljs-comment">// 7 .exists() 判断路径名是否存在</span><br>System.out.println(f.exists());<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="创建文件-删除文件"><a href="#创建文件-删除文件" class="headerlink" title="创建文件,删除文件"></a>创建文件,删除文件</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625152916195.png" alt="image-20220625152916195" style="zoom:50%;" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625153008839.png" alt="image-20220625153008839" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1 .createNewFile() 创建文件(几乎不使用)//需要抛出错误</span><br><span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file-io/src/Demo.txt&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">newFile</span> <span class="hljs-operator">=</span> f1.createNewFile();<span class="hljs-comment">//创建路径的文件demo.txt;</span><br>System.out.println(newFile);<span class="hljs-comment">//因为已经存在,所以false</span><br><span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file-io/src/Demo1.txt&quot;</span>);<span class="hljs-comment">//此时不存在Demo1</span><br>System.out.println(f2.createNewFile());<span class="hljs-comment">//会创建并返回true</span><br><span class="hljs-comment">// 2 .mkdir() 创建一级目录;只能往下新建一个,不能创建多级</span><br><span class="hljs-type">File</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/java/filedemo/ceshi&quot;</span>);<span class="hljs-comment">//此时不存在ceshi文件夹,存在java文件夹</span><br>System.out.println(f3.mkdir());<span class="hljs-comment">//true;此时创建并返回true</span><br><span class="hljs-comment">// 3 .mkdirs() 创建多级目录</span><br><span class="hljs-type">File</span> <span class="hljs-variable">f4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/java/filedemo/一级/二级&quot;</span>);<br>System.out.println(f4.mkdirs());<span class="hljs-comment">//true</span><br><span class="hljs-comment">// 4 删除文件or&lt;空&gt;文件夹;文件被占用也可删除!!!</span><br>System.out.println(f2.delete());<span class="hljs-comment">//删除f2新建的Demo1</span><br></code></pre></td></tr></table></figure><h4 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625153301957.png" alt="image-20220625153301957" style="zoom:50%;" /><h5 id="listFiles方法注意事项"><a href="#listFiles方法注意事项" class="headerlink" title="listFiles方法注意事项:"></a>listFiles方法注意事项:</h5><ul><li>当调用者不存在时，返回null</li><li>当调用者是一个文件时，返回null</li><li>当调用者是一个空文件夹时，返回一个长度为0的数组</li><li>当调用者是一个有内容的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回</li><li>当调用者是一个有隐藏文件的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回，包含隐藏内容</li><li>当调用者是一个需要权限才能进入的文件夹时，返回null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/java/filedemo&quot;</span>);<span class="hljs-comment">//这是调用者!!!</span><br>        <span class="hljs-comment">// 1 返回当前目录下所有&quot;一级文件名称&quot;到字符串数组</span><br>        String[] list = file.list();<span class="hljs-comment">//返回文件夹和文件名称到数组</span><br><span class="hljs-comment">//        System.out.println(Arrays.toString(list));//[ceshi, demo.txt, photo1.JPG, 一级, 绿建项目-HM-.png]</span><br>        Arrays.stream(list).forEach(System.out::println);<span class="hljs-comment">//换行输出</span><br>        <span class="hljs-comment">// 2 返回当前目录下所有的&quot;一级文件对象&quot;到文件对象数组</span><br>        File[] files = file.listFiles();<span class="hljs-comment">//返回的文件对象数组&lt;File&gt;类型</span><br>        Arrays.stream(files).forEach(s-&gt; System.out.println(s.getAbsolutePath()));<span class="hljs-comment">//换行输出</span><br>        <span class="hljs-comment">//输出每个文件or文件夹的绝对路径;例如:D:\java\filedemo\ceshi</span><br></code></pre></td></tr></table></figure><h2 id="方法递归"><a href="#方法递归" class="headerlink" title="方法递归"></a>方法递归</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>方法直接调用自己或者间接调用自己的形式称为方法递归( recursion) 。</li><li>递归做为一种算法在程序设计语言中广泛应用。</li></ul><h4 id="递归的形式"><a href="#递归的形式" class="headerlink" title="递归的形式"></a>递归的形式</h4><ul><li>直接递归:方法自己调用自己。</li><li>间接递归:方法调用其他方法，其他方法又回调方法自己。</li></ul><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><ul><li>递归如果没有控制好终止，会出现递归死循环，导致栈内存溢出现象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法递归</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">recursion</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        test();<span class="hljs-comment">//直接</span><br>        test2();<span class="hljs-comment">//间接</span><br>    &#125;<br><br>    <span class="hljs-comment">//直接递归</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test方法已运行&quot;</span>);<br>        test();<span class="hljs-comment">//方法递归,直接递归形式</span><br>        <span class="hljs-comment">//自己运行自己,会死循环,栈内存溢出错误,自己终止</span><br>    &#125;<br><br>    <span class="hljs-comment">//间接递归</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test2已运行&quot;</span>);<br>        test3();<span class="hljs-comment">//2调用3</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test2已运行&quot;</span>);<br>        test2();<span class="hljs-comment">//3回调2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归案例"><a href="#递归案例" class="headerlink" title="递归案例"></a>递归案例</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625154128989.png" alt="image-20220625154128989" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 递归案例 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 计算阶乘</span><br>        System.out.println(f(<span class="hljs-number">20</span>));<br>        <span class="hljs-comment">// 2 计算累加</span><br>        System.out.println(sum(<span class="hljs-number">3</span>));<br>        <span class="hljs-comment">// 3 猴子每天吃一半加1个桃子,第十天还剩1个,求摘了多少</span><br>        <span class="hljs-comment">// f(x)/2-1=f(x+1) =&gt; f(x)=2f(x+1)+2;</span><br>        <span class="hljs-comment">//第一天的数量除2减1等于下一天的数量=&gt;第一天的数量等于下一天的数量乘2再加2</span><br>        System.out.println(peach(<span class="hljs-number">1</span>));<span class="hljs-comment">//1534</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 猴子吃桃</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i 第几天的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peach</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//第十天的时候为1个</span><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> (peach(i+<span class="hljs-number">1</span>)*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>);<span class="hljs-comment">//每一天数量都等于下一天的数量乘2再加2</span><br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算1-n的和</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> sum(a - <span class="hljs-number">1</span>) + a;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阶乘</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> f(n - <span class="hljs-number">1</span>) * n;<span class="hljs-comment">//传入参数的同时调用本方法;f(4)*5</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h5><p>需求:文件搜索、从C:盘中，搜索出某个文件名称并输出绝对路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//文件搜索;递归;去D盘搜索Demo.txt</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">recursion</span>文件搜索 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/java/fileDemo&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;demo.txt&quot;</span>;<br>        searchName(file, name);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">searchName</span><span class="hljs-params">(File file, String name)</span> &#123;<br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<span class="hljs-comment">//判断是不是文件夹</span><br>            File[] files = file.listFiles();<span class="hljs-comment">//将目录下一级文件or文件夹获取成数组</span><br>            <span class="hljs-keyword">if</span> (files.length &gt; <span class="hljs-number">0</span> &amp;&amp; files != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//判断数组是否为空或无法访问获取为null</span><br>                <span class="hljs-keyword">for</span> (File file1 : files) &#123;<span class="hljs-comment">//遍历一级文件夹or文件</span><br>                    <span class="hljs-keyword">if</span> (file1.isDirectory()) &#123;<span class="hljs-comment">//是不是文件夹</span><br>                        searchName(file1,name);<span class="hljs-comment">//递归传入</span><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//是文件</span><br>                        <span class="hljs-keyword">if</span>(file1.getName().contains(name))&#123;<span class="hljs-comment">//判断文件名(模糊匹配)</span><br>                            System.out.println(<span class="hljs-string">&quot;已找到&quot;</span> + file1.getAbsolutePath());<span class="hljs-comment">//输出文件绝对地址</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;目录输入错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="啤酒问题"><a href="#啤酒问题" class="headerlink" title="啤酒问题"></a>啤酒问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//10元买啤酒;两块1瓶;4个盖子换1瓶;两个瓶子换1瓶,最后几瓶,几个盖子,几个瓶子</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">recursion</span>啤酒问题 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> allnumber;<span class="hljs-comment">//啤酒总数;15</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> cover;<span class="hljs-comment">//瓶盖数;3</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> bottle;<span class="hljs-comment">//瓶子数;1</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        buy(<span class="hljs-number">10</span>);<br>        System.out.println(allnumber);<br>        System.out.println(cover);<br>        System.out.println(bottle);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> money / <span class="hljs-number">2</span>;<span class="hljs-comment">//计算买的数量</span><br>        allnumber += number;<span class="hljs-comment">//将数量累加</span><br>        money = money % <span class="hljs-number">2</span>;<span class="hljs-comment">//算出有没有剩余的钱</span><br><br>        cover += number;<span class="hljs-comment">//瓶盖数累加</span><br>        bottle += number;<span class="hljs-comment">//瓶数累加</span><br>        <span class="hljs-keyword">if</span> (cover &gt;= <span class="hljs-number">4</span>) &#123;<span class="hljs-comment">//累计大于4个瓶盖了,可以换一瓶</span><br>            money += (cover / <span class="hljs-number">4</span>) * <span class="hljs-number">2</span>;<span class="hljs-comment">//换算成金额,</span><br>        &#125;<br>        cover = cover % <span class="hljs-number">4</span>;<span class="hljs-comment">//对瓶盖取余数,不够换的</span><br>        <span class="hljs-keyword">if</span> (bottle &gt;= <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//大于两个瓶字,可以换一瓶</span><br>            money += (bottle / <span class="hljs-number">2</span>) * <span class="hljs-number">2</span>;<span class="hljs-comment">//瓶子换成金额</span><br>        &#125;<br>        bottle = bottle % <span class="hljs-number">2</span>;<span class="hljs-comment">//瓶子取余</span><br>        <span class="hljs-keyword">if</span> (money&gt;=<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//判断金额可不可以买一瓶</span><br>            buy(money);<span class="hljs-comment">//可以就把钱带入进行递归</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625154601162.png" alt="image-20220625154601162" style="zoom:50%;" /><h3 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h3><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625154815677.png" alt="image-20220625154815677"></p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625154828568.png" alt="image-20220625154828568"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//学会自己进行文字编码解码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 编码:把文字转换成字节(使用指定的编码)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc中国&quot;</span>;<br>        <span class="hljs-type">byte</span>[] byte1 = name.getBytes();<span class="hljs-comment">//以当前默认字符集进行编码(UTF-8);一个中文3字节</span><br>        System.out.println(byte1.length);<span class="hljs-comment">//9</span><br>        System.out.println(Arrays.toString(byte1));<span class="hljs-comment">//[97, 98, 99, -28, -72, -83, -27, -101, -67]</span><br>        <span class="hljs-type">byte</span>[] bytes = name.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>);<span class="hljs-comment">//</span><br>        System.out.println(bytes.length);<span class="hljs-comment">//7</span><br>        System.out.println(Arrays.toString(bytes));<span class="hljs-comment">//[97, 98, 99, -42, -48, -71, -6]</span><br>        <span class="hljs-comment">// 2 解码:把字节抓换成对应的中文形式(编码前后字符集必须一致,否则乱码)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(byte1);<span class="hljs-comment">//默认UTF-8//byte1转成字符</span><br>        System.out.println(s);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-string">&quot;GBK&quot;</span>);<span class="hljs-comment">//指定GBK//bytes转成字符</span><br>        System.out.println(s1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>I表示intput，是数据从硬盘文件读入到内存的过程，称之输入，负责读。</li><li>O表示output，是内存程序的数据从内存到写出到硬盘文件的过程，称之输出，负责写。</li></ul><h4 id="流的四大类"><a href="#流的四大类" class="headerlink" title="流的四大类"></a>流的四大类</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625155121271.png" alt="image-20220625155121271" style="zoom:50%;" /><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="字节输入流-FilelnputStream"><a href="#字节输入流-FilelnputStream" class="headerlink" title="字节输入流:FilelnputStream"></a>字节输入流:FilelnputStream</h4><ul><li>作用:以内存为基准，把磁盘文件中的数据以字节的形式读取到内存中去。</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625155222700.png" alt="image-20220625155222700" style="zoom:50%;" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625155301941.png" alt="image-20220625155301941" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//读取文档里的内容并打印出来</span><br><span class="hljs-keyword">public</span> class 字节输入流 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//每次读取一个字节(.read());不能读取中文</span><br>        <span class="hljs-comment">// 1 创建文件字节输入流管道与源文件接通</span><br><span class="hljs-comment">//        InputStream is = new FileInputStream(new File(&quot;D:\\Java\\code\\javasepro\\io流\\data.txt&quot;));</span><br>        <span class="hljs-comment">// 简写.不用new File</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;io流\\data.txt&quot;</span>);<span class="hljs-comment">//会有编译式异常,直接抛出;文件内容:123</span><br>        <span class="hljs-comment">// 2 读取一个字节返回(每次读取一滴,会顺序读取)</span><br><span class="hljs-comment">//        int b1 = is.read();//获取第一个字节的编码 内容为1</span><br><span class="hljs-comment">//        System.out.println((char)b1);//将编码转成char类型输出</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        int b2 = is.read();//获取第一个字节的编码 内容为2</span><br><span class="hljs-comment">//        System.out.println((char)b2);//将编码转成char类型输出</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        int b3 = is.read();//获取第一个字节的编码 内容为3</span><br><span class="hljs-comment">//        System.out.println((char)b3);//将编码转成char类型输出</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        int b4 = is.read();//这里内容获取不到,会返回-1</span><br><span class="hljs-comment">//        System.out.println(b4);//输出为-1</span><br><br>        <span class="hljs-comment">// 3 循环改进</span><br>        <span class="hljs-type">int</span> b;<span class="hljs-comment">//定义变量记录每次读取的字节</span><br>        <span class="hljs-keyword">while</span> ((b = is.read()) != -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//判断读取的字节获取不到返回-1为止</span><br>            System.out.print((<span class="hljs-type">char</span>) b);<span class="hljs-comment">//输出 123</span><br>        &#125;<br>        <span class="hljs-comment">//每次读取一个字节数组;可以读取中文</span><br>        <span class="hljs-comment">// 1 创建文件字节输入流管道与源文件接通</span><br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;==========读取字节数组=========&quot;</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;io流/data1.txt&quot;</span>);<span class="hljs-comment">//文件内容:123中国1</span><br><span class="hljs-comment">//        // 2 定义字节数组,用于读取字节数组</span><br><span class="hljs-comment">//        byte[] buffer = new byte[3];//定义byte类数组,长度定义为3,一次读取3个字节</span><br><span class="hljs-comment">//        int read = is1.read(buffer);//将字节存入数组并返回每次读取了几个字节;</span><br><span class="hljs-comment">//        // 每次会读取会将原数组内容覆盖</span><br><span class="hljs-comment">//        System.out.println(&quot;每次读取了几个字节:&quot; + read);</span><br><span class="hljs-comment">//        String rs = new String(buffer);//将获取的字节数组进行解码</span><br><span class="hljs-comment">//        System.out.println(rs);//输出</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        int read1 = is1.read(buffer);//返回每次读取了几个字节&#x27;</span><br><span class="hljs-comment">//        System.out.println(&quot;每次读取了几个字节:&quot; + read1);</span><br><span class="hljs-comment">//        //剩余字节数不足3个时,无法将原数组覆盖完就会出错</span><br><span class="hljs-comment">//        String rs1 = new String(buffer,0,read1);//String api读取0开始,读取&lt;获取的个数&gt;个字节</span><br><span class="hljs-comment">//        System.out.println(rs1);//输出</span><br>        <span class="hljs-comment">// 3 循环读取</span><br>        <span class="hljs-type">byte</span>[] buffer1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-type">int</span> len;<span class="hljs-comment">//记录每次读取的字节数</span><br>        <span class="hljs-keyword">while</span> ((len = is1.read(buffer1)) != -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//read(byte[])返回读取的字节个数;读取不到返回-1</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer1, <span class="hljs-number">0</span>, len);<br>            System.out.print(rs);<span class="hljs-comment">//直接输出也可能出现错误（ab中国）；前三个字节就会出现错误</span><br>        &#125;<br>        <span class="hljs-comment">// 1 一次读取与文件一样大小的数组，一次读取全部字节，解决乱码问题</span><br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;==============一次读取全部=================&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;io流/data2.txt&quot;</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(f);<span class="hljs-comment">//内容 123中国1是不2100年的，而是2100年的。</span><br>        <span class="hljs-comment">// 2 创建一个字节数组与文件大小一样</span><br><span class="hljs-comment">//        byte[] buffer = new byte[(int) f.length()];//这里length为long类型</span><br><span class="hljs-comment">//        int len1 = inputStream.read(buffer);//读取的字节数</span><br><span class="hljs-comment">//        String s = new String(buffer);</span><br><span class="hljs-comment">//        System.out.println(&quot;读取字节数:&quot; + len1);</span><br><span class="hljs-comment">//        System.out.println(&quot;文件大小:&quot; + f.length());</span><br><span class="hljs-comment">//        System.out.println(s);//输出:123中国1是不2100年的，而是2100年的。</span><br><br>        <span class="hljs-comment">//jdk9自带api,与上方法相同,读取全部字节</span><br>        <span class="hljs-type">byte</span>[] bytes = inputStream.readAllBytes();<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//123中国1是不2100年的，而是2100年的。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="文件过大-可能会引起内存溢出"><a href="#文件过大-可能会引起内存溢出" class="headerlink" title="文件过大,可能会引起内存溢出"></a>文件过大,可能会引起内存溢出</h5></li></ul><h4 id="字节输出流-FileOutputStream"><a href="#字节输出流-FileOutputStream" class="headerlink" title="字节输出流:FileOutputStream"></a>字节输出流:FileOutputStream</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625155854957.png" alt="image-20220625155854957"></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625155916903.png" alt="image-20220625155916903" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//向文件中输出字节</span><br><span class="hljs-keyword">public</span> class 字节输出流 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建字节输出流管道与目标文件接通;无需提前创建文件</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">fos1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;io流/字节输出流.txt&quot;</span>);<span class="hljs-comment">//多态;抛出异常;每次运行都会清空之前的数据</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;io流/字节输出流.txt&quot;</span>,<span class="hljs-literal">true</span>);<span class="hljs-comment">//加上true,则不会清空之前的数据</span><br><br>        <span class="hljs-comment">// 2 写数据出去</span><br>        fos.write(<span class="hljs-number">97</span>);<span class="hljs-comment">//写入一个字节</span><br>        fos.write(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">//写入一个字符</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<span class="hljs-comment">//写入换行,换行符是\r\n,可以多个系统都能识别</span><br><span class="hljs-comment">//        fos.write(&#x27;国&#x27;);//无法写入汉字,只取一个字节</span><br>        fos.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>&#125;);<span class="hljs-comment">//写入一个字节数组</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<span class="hljs-comment">//写入换行,换行符是\r\n,可以多个系统都能识别</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-string">&quot;中国&quot;</span>.getBytes();<span class="hljs-comment">//获取字节数组</span><br>        fos.write(bytes);<span class="hljs-comment">//写入字节数组,这样可以写入汉字</span><br>        fos.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<span class="hljs-comment">//写入换行,换行符是\r\n,可以多个系统都能识别</span><br>        <span class="hljs-type">byte</span>[] bytes1 = &#123;<span class="hljs-string">&#x27;q&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>&#125;;<br>        fos.write(bytes1,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//写入部分字节数组,包前不包后</span><br>        <span class="hljs-comment">// 3 刷新数据;写数据必须刷新数据,否则数据会丢失</span><br><span class="hljs-comment">//        fos.flush();//刷新数据</span><br>        fos.close();<span class="hljs-comment">//释放资源;包含刷新;关闭后流无法继续使用</span><br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625155951029.png" alt="image-20220625155951029" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//学会使用字节流完成文件复制(支持一切文件类型的复制)</span><br><span class="hljs-keyword">public</span> class 文件拷贝 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1 创建字节输入流管道与原视频接通</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\1\\Videos\\79549564_1_0.mp4&quot;</span>);<br>            <span class="hljs-comment">// 2 创建字节输出流管道与目标视频接通</span><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:\\Users\\1\\Videos\\79549564_1_1.mp4&quot;</span>);<br>            <span class="hljs-comment">// 3 定义一个字节数组转移数据</span><br>            <span class="hljs-comment">//划分数组提取</span><br><span class="hljs-comment">//            byte[] bytes = new byte[1024];</span><br><span class="hljs-comment">//            int len;//记录每次读取的字节数</span><br><span class="hljs-comment">//            while ((len = is.read(bytes)) != -1) &#123;</span><br><span class="hljs-comment">//                os.write(bytes, 0, len);</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-comment">//直接获取全部字节数据</span><br>            <span class="hljs-type">byte</span>[] bytes = is.readAllBytes();<br>            os.write(bytes);<span class="hljs-comment">//写入</span><br>            <span class="hljs-comment">// 3 关闭输入输出流</span><br>            is.close();<br>            os.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="资源释放的方式"><a href="#资源释放的方式" class="headerlink" title="资源释放的方式"></a>资源释放的方式</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625160029760.png" alt="image-20220625160029760" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//资源释放//finally</span><br><span class="hljs-keyword">public</span> class 资源释放<span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//在外面创建管道，后续可以调用close方法关闭</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1 创建字节输入流管道与原视频接通</span><br>            is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\1\\Videos\\79549564_1_0.mp4&quot;</span>);<br>            <span class="hljs-comment">// 2 创建字节输出流管道与目标视频接通</span><br>            os = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:\\Users\\1\\Videos\\79549564_1_1.mp4&quot;</span>);<br>            <span class="hljs-comment">// 3 定义一个字节数组转移数据</span><br>            <span class="hljs-comment">//划分数组提取</span><br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<span class="hljs-comment">//记录每次读取的字节数</span><br>            <span class="hljs-keyword">while</span> ((len = is.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//即使上面有return,也会执行以下代码</span><br>            <span class="hljs-comment">//不建议在这里加return,加了返回的就只是这里的return结果</span><br>            System.out.println(<span class="hljs-string">&quot;===========finally==========&quot;</span>);<br>            <span class="hljs-comment">//无论代码是否正常执行,都会最后执行这里</span><br>            <span class="hljs-comment">// 3 关闭输入输出流</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//判断是否创建了管道,避免还未创建管道就已经发生异常,导致is空指针异常</span><br>                <span class="hljs-keyword">if</span>(is!=<span class="hljs-literal">null</span>)&#123;<br>                    is.close();<br>                &#125;;<span class="hljs-comment">//这里无法直接调用变量is，所以需要在外部定义一个管道</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(os!=<span class="hljs-literal">null</span>)&#123;<br>                    os.close();<br>                &#125;;<span class="hljs-comment">//这里close编译报错，所以try catch捕获异常</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="改进方案"><a href="#改进方案" class="headerlink" title="改进方案"></a>改进方案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//资源释放改进</span><br><span class="hljs-keyword">public</span> class 资源释放jdk7 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//jdk7方案</span><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//这里只能放置资源对象(实现了Closeable/AutoCloseable接口的对象),用完会自动关闭</span><br>                <span class="hljs-comment">// 1 创建字节输入流管道与原视频接通</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\1\\Videos\\79549564_1_0.mp4&quot;</span>);<br>                <span class="hljs-comment">// 2 创建字节输出流管道与目标视频接通</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:\\Users\\1\\Videos\\79549564_1_1.mp4&quot;</span>);<br>                <span class="hljs-comment">//不是资源放置进来会报错,</span><br>        ) &#123;<br>            <span class="hljs-comment">// 3 定义一个字节数组转移数据</span><br>            <span class="hljs-comment">//划分数组提取</span><br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<span class="hljs-comment">//记录每次读取的字节数</span><br>            <span class="hljs-keyword">while</span> ((len = is.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//资源释放改进</span><br><span class="hljs-keyword">public</span> class 资源释放jdk9 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//jdk9方案;需要抛出异常,所以建议使用jdk7方案</span><br>        <span class="hljs-comment">// 1 创建字节输入流管道与原视频接通</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\1\\Videos\\79549564_1_0.mp4&quot;</span>);<br>        <span class="hljs-comment">// 2 创建字节输出流管道与目标视频接通</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:\\Users\\1\\Videos\\79549564_1_1.mp4&quot;</span>);<br>        <span class="hljs-keyword">try</span> (is;os) &#123;<br>            <span class="hljs-comment">// 3 定义一个字节数组转移数据</span><br>            <span class="hljs-comment">//划分数组提取</span><br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<span class="hljs-comment">//记录每次读取的字节数</span><br>            <span class="hljs-keyword">while</span> ((len = is.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="字符输入流-FileReader"><a href="#字符输入流-FileReader" class="headerlink" title="字符输入流:FileReader"></a>字符输入流:FileReader</h4><ul><li>作用:以内存为基准，把磁盘文件中的数据以字符的形式读取到内存中去。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625160343084.png" alt="image-20220625160343084"></p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625160402776.png" alt="image-20220625160402776"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字符输入流读取字符</span><br><span class="hljs-keyword">public</span> class 字符输入流 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 每次读取一个字符</span><br>        <span class="hljs-comment">// 1 创建一个字符输入流管道与源文件接通</span><br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;io流/data3.txt&quot;</span>);<br>        <span class="hljs-comment">// 2 读取一个字符,没有可读取的字符时返回-1</span><br><span class="hljs-comment">//        int c = fr.read();</span><br><span class="hljs-comment">//        System.out.println((char) c);</span><br><span class="hljs-comment">//        int c1 = fr.read();</span><br><span class="hljs-comment">//        System.out.println((char) c);</span><br>        <span class="hljs-comment">// 3 循环读取字符</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((c = fr.read()) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.print((<span class="hljs-type">char</span>) c);<br>        &#125;<br>        <span class="hljs-comment">// 读取数组</span><br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;=====读取数组=====&quot;</span>);<br>        <span class="hljs-comment">// 1 创建一个字符输入流管道与源文件接通</span><br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">fr1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;io流/data3.txt&quot;</span>);<br>        <span class="hljs-comment">// 2 用循环每次读取一个字符数组的数据</span><br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//1k字符,不是1kb</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((len = fr1.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars, <span class="hljs-number">0</span>, len);<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符输出流-FileWriter"><a href="#字符输出流-FileWriter" class="headerlink" title="字符输出流:FileWriter"></a>字符输出流:FileWriter</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625160610638.png" alt="image-20220625160610638"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 字符输出流 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建字符输出流管道与目标文件接通</span><br><span class="hljs-comment">//        Writer fw = new FileWriter(&quot;io流/字符输出流.txt&quot;);//每次运行都会清空之前的内容</span><br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;io流/字符输出流.txt&quot;</span>,<span class="hljs-literal">true</span>);<span class="hljs-comment">//可以连续执行,不会清除之前的内容</span><br>        <span class="hljs-comment">//写一个子字符</span><br>        fw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        fw.write(<span class="hljs-number">98</span>);<br>        fw.write(<span class="hljs-string">&#x27;中&#x27;</span>);<br>        fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<span class="hljs-comment">//换行</span><br>        <span class="hljs-comment">//写一个字符串</span><br>        fw.write(<span class="hljs-string">&quot;abc&quot;</span>);<br>        fw.write(<span class="hljs-string">&quot;中国&quot;</span>);<br>        fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>        <span class="hljs-comment">//写一个字符数组;没必要,可以直接写字符串</span><br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-string">&quot;中国abc&quot;</span>.toCharArray();<br>        fw.write(chars);<br>        fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>        <span class="hljs-comment">//写入一部分字符串</span><br>        fw.write(<span class="hljs-string">&quot;我是中国人&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>        fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>        <span class="hljs-comment">//写入一部分字符数组</span><br>        fw.write(chars, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//关闭管道</span><br><span class="hljs-comment">//        fw.flush();//刷新</span><br>        fw.close();<span class="hljs-comment">//关闭,包含刷新</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><ul><li>缓冲流也称为高效流、或者高级流。之前学习的字节流可以称为原始流。</li><li>作用:缓冲流自带缓冲区、可以提高原始字节流、字符流读写数据的性能</li></ul><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><h4 id="优化原理"><a href="#优化原理" class="headerlink" title="优化原理"></a>优化原理</h4><ul><li>字节缓冲输入流自带了8KB缓冲池，以后我们直接从缓冲池读取数据，所以性能较好。</li><li>字节缓冲输出流自带了8KB缓冲池，数据就直接写入到缓冲池中去，写数据性能极高了。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625160905586.png" alt="image-20220625160905586"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.io;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//四种方法拷贝测试</span><br><span class="hljs-keyword">public</span> class 拷贝测试 &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">COPY_FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\BaiduNetdiskDownload\\HUD信息图表UI界面高科技科幻数据图标屏幕动画元素素材.rar&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">COPY_FILE_NEWPATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\BaiduNetdiskDownload\\111\\&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        copy1();</span><br>        copy2();<br>        copy3();<br>        copy4();<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//   方法四：缓冲流字节数组复制</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 创建输入流</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(COPY_FILE_PATH);<br>                <span class="hljs-comment">// 创建缓冲流</span><br>                <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is);<br>                <span class="hljs-comment">// 创建输出流</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(COPY_FILE_NEWPATH + <span class="hljs-string">&quot;copy3.rar&quot;</span>);<br>                <span class="hljs-comment">// 创建缓冲流</span><br>                <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os);<br>        ) &#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-comment">// 循环读取输入流中的数据</span><br>            <span class="hljs-keyword">while</span> ((len = bis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 将读取的数据写入到输出流中</span><br>                bos.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;方法四：缓冲流字节数组复制：&quot;</span> + (endTime - startTime)*<span class="hljs-number">1.0</span>/<span class="hljs-number">1000</span> + <span class="hljs-string">&quot;秒&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//   方法三：缓冲流单字节复制</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy4</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 创建输入流</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(COPY_FILE_PATH);<br>                <span class="hljs-comment">// 创建缓冲流</span><br>                <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is);<br>                <span class="hljs-comment">// 创建输出流</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(COPY_FILE_NEWPATH + <span class="hljs-string">&quot;copy4.rar&quot;</span>);<br>                <span class="hljs-comment">// 创建缓冲流</span><br>                <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os);<br>        ) &#123;<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-comment">// 循环读取输入流中的数据</span><br>            <span class="hljs-keyword">while</span> ((len = bis.read()) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 将读取的数据写入到输出流中</span><br>                bos.write(len);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;方法三：缓冲流单字节复制：&quot;</span> + (endTime - startTime)*<span class="hljs-number">1.0</span>/<span class="hljs-number">1000</span> + <span class="hljs-string">&quot;秒&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//   方法二：字节数组复制</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 创建输入流</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(COPY_FILE_PATH);<br>                <span class="hljs-comment">// 创建输出流</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(COPY_FILE_NEWPATH + <span class="hljs-string">&quot;copy2.rar&quot;</span>);<br>        ) &#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-comment">// 循环读取输入流中的数据</span><br>            <span class="hljs-keyword">while</span> ((len = is.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 将读取的数据写入到输出流中</span><br>                os.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;方法二：字节数组复制：&quot;</span> + (endTime - startTime)*<span class="hljs-number">1.0</span>/<span class="hljs-number">1000</span> + <span class="hljs-string">&quot;秒&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//    方法一：单字节复制</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 创建输入流</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(COPY_FILE_PATH);<br>                <span class="hljs-comment">// 创建输出流</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(COPY_FILE_NEWPATH + <span class="hljs-string">&quot;copy1.rar&quot;</span>);<br>        ) &#123;<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-comment">// 循环读取输入流中的数据</span><br>            <span class="hljs-keyword">while</span> ((len = is.read()) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 将读取的数据写入到输出流中</span><br>                os.write(len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;方法一：单字节复制：&quot;</span> + (endTime - startTime)*<span class="hljs-number">1.0</span>/<span class="hljs-number">1000</span> + <span class="hljs-string">&quot;秒&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><h4 id="字符缓冲输入流"><a href="#字符缓冲输入流" class="headerlink" title="字符缓冲输入流"></a>字符缓冲输入流</h4><ul><li>字符缓冲输入流:BufferedReader。</li><li>作用:提高字符输入流读取数据的性能，除此之外多了按照行读取数据的功能。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625161014953.png"></p><h5 id="新增功能"><a href="#新增功能" class="headerlink" title="新增功能"></a>新增功能</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625161034998.png" alt="image-20220625161034998"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.io;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学会使用缓冲字符输入流,提高字符输入流性能</span><br><span class="hljs-comment"> * (***经典代码***)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> class 字符缓冲输入流 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">// 1 创建文件字符输入流与源文件接通</span><br>                <span class="hljs-type">Reader</span> <span class="hljs-variable">re</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;io流/data3.txt&quot;</span>);<br>                <span class="hljs-comment">// 2 包装成高级的缓冲字符输入流</span><br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(re);<span class="hljs-comment">//这里不使用多态是因为要使用它的独有方法</span><br>        ) &#123;<br><span class="hljs-comment">//            char[] buffer = new char[1024];//定义字符数组,一次可以接1k字符</span><br><span class="hljs-comment">//            int len;//定义每次接的字符数,接不到返回-1</span><br><span class="hljs-comment">//            while((len = br.read(buffer))!=-1)&#123;</span><br><span class="hljs-comment">//                String rs = new String(buffer,0,len);//输出数组中从0开始到读取位数的字符</span><br><span class="hljs-comment">//                System.out.println(rs);</span><br>            <span class="hljs-comment">//System.out.println(br.readLine());//缓冲流新增方法,读取一行,没有这一行则读取为null</span><br>            String line;<span class="hljs-comment">//定义变量来接读取的字符,如果直接判断则输出时又会进行读取下一行</span><br>            <span class="hljs-keyword">while</span>((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//判断是否不为空</span><br>                System.out.println(line);<span class="hljs-comment">//输出变量,而不是输出.readLine,因为这样会继续执行输出的是下一行</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (<br>                Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符缓冲输出流"><a href="#字符缓冲输出流" class="headerlink" title="字符缓冲输出流"></a>字符缓冲输出流</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625161059879.png" alt="image-20220625161059879"></p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220625161122596.png" alt="image-20220625161122596"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.io;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><span class="hljs-keyword">import</span> java.nio.channels.WritableByteChannel;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 缓冲字符输出流的使用,向文件写入</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> class 字符缓冲输出流 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建字符输出流管道</span><br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;io流/data4.txt&quot;</span>,<span class="hljs-literal">true</span>);<span class="hljs-comment">//true,追加写入,不会覆盖</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<span class="hljs-comment">//包装成缓冲流</span><br>        <span class="hljs-comment">//写一个子字符</span><br>        bw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        bw.write(<span class="hljs-number">98</span>);<br>        bw.write(<span class="hljs-string">&#x27;中&#x27;</span>);<br>        bw.newLine();<span class="hljs-comment">//缓冲流新api,换行</span><br>        <span class="hljs-comment">//写一个字符串</span><br>        bw.write(<span class="hljs-string">&quot;abc&quot;</span>);<br>        bw.write(<span class="hljs-string">&quot;中国&quot;</span>);<br>        bw.newLine();<br>        <span class="hljs-comment">//写一个字符数组;没必要,可以直接写字符串</span><br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-string">&quot;中国abc&quot;</span>.toCharArray();<br>        bw.write(chars);<br>        bw.newLine();<br>        <span class="hljs-comment">//写入一部分字符串</span><br>        bw.write(<span class="hljs-string">&quot;我是中国人&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">//写入 我是中</span><br>        bw.newLine();<br>        <span class="hljs-comment">//写入一部分字符数组</span><br>        bw.write(chars, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//关闭管道</span><br><span class="hljs-comment">//fw.flush();//刷新</span><br>        bw.close();<span class="hljs-comment">//关闭,包含刷新</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.io;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> class 出师表顺序恢复 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>            <span class="hljs-comment">//定义在这可以自动关闭管道</span><br>                <span class="hljs-comment">// 1 创建字符缓冲输入流管道与源文件接通</span><br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;io流/csb.txt&quot;</span>));<span class="hljs-comment">//这里直接创建字符输入流将其包装成缓冲</span><br>                <span class="hljs-comment">// 5 定义缓冲字符输出管道与目标文件接通</span><br>                <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;io流/csbnew.txt&quot;</span>));<br>        ) &#123;<br>            <span class="hljs-comment">// 2 定义List集合存储每行内容</span><br>            List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-comment">// 3 定义循环,按行读取文章</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                list.add(line);<br>            &#125;<br>            System.out.println(list);<br>            <span class="hljs-comment">// 4 排序</span><br>            List&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            Collections.addAll(list1, <span class="hljs-string">&quot;一&quot;</span>, <span class="hljs-string">&quot;二&quot;</span>, <span class="hljs-string">&quot;三&quot;</span>, <span class="hljs-string">&quot;四&quot;</span>, <span class="hljs-string">&quot;五&quot;</span>, <span class="hljs-string">&quot;陆&quot;</span>, <span class="hljs-string">&quot;柒&quot;</span>, <span class="hljs-string">&quot;八&quot;</span>, <span class="hljs-string">&quot;九&quot;</span>, <span class="hljs-string">&quot;十&quot;</span>, <span class="hljs-string">&quot;十一&quot;</span>);<br>            Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span> &#123;<br>                    <span class="hljs-keyword">return</span> list1.indexOf(o1.substring(<span class="hljs-number">0</span>, o1.indexOf(<span class="hljs-string">&quot;.&quot;</span>)))<br>                            <span class="hljs-comment">//indexOf:取集合某个元素的索引,这里从集合中截取·之前的序号放入indexof中返回list1集合的索引,用list1集合的索引排序</span><br>                            - list1.indexOf(o2.substring(<span class="hljs-number">0</span>, o2.indexOf(<span class="hljs-string">&quot;.&quot;</span>)));<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">// 6 遍历集合中的每行文章,注意换行</span><br>            <span class="hljs-keyword">for</span> (String s : list) &#123;<br>                bufferedWriter.write(s);<span class="hljs-comment">//写入遍历到的一行</span><br>                bufferedWriter.newLine();<span class="hljs-comment">//换行</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><ul><li><h4 id="字符输入转换流-InputStreamReader，可以把原始的字节流按照指定编码转换成字符输入流。"><a href="#字符输入转换流-InputStreamReader，可以把原始的字节流按照指定编码转换成字符输入流。" class="headerlink" title="字符输入转换流: InputStreamReader，可以把原始的字节流按照指定编码转换成字符输入流。"></a>字符输入转换流: InputStreamReader，可以把原始的字节流按照指定编码转换成字符输入流。</h4></li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624203851719.png" alt="image-20220624203851719"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-comment">//转换流,将不同格式文本转换成指定格式字符流读取</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStreamReaderDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//代码:UTF-8 文件:GBK  &quot;transfer_stream/data_GBK.txt&quot;</span><br>        <span class="hljs-comment">// 1 提取GBK文件得的原始字节流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;transfer_stream/data_GBK.txt&quot;</span>);<br>        <span class="hljs-comment">// 2 把原始字节流转换成字符输入流 /InputStreamReader</span><br><span class="hljs-comment">//        Reader isr = new InputStreamReader(is);//默认以UTF-8方式转换成字符流,依旧会乱码</span><br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is,<span class="hljs-string">&quot;GBK&quot;</span>);<span class="hljs-comment">//以指定的GBK方式转换</span><br>        <span class="hljs-comment">// 3 包装</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(line);<span class="hljs-comment">//完美输出</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="字符输出转换流-OutputStreamWriter-可以把字节输出流按照指定编码转换成字符输出流。"><a href="#字符输出转换流-OutputStreamWriter-可以把字节输出流按照指定编码转换成字符输出流。" class="headerlink" title="字符输出转换流:OutputStreamWriter,可以把字节输出流按照指定编码转换成字符输出流。"></a>字符输出转换流:OutputStreamWriter,可以把字节输出流按照指定编码转换成字符输出流。</h4></li></ul><p> <img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624210232083.png" alt="image-20220624210232083"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutputStreamWriterDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 1 定义字节输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;transfer_stream/data.txt&quot;</span>);<br>        <span class="hljs-comment">// 2 把原始字节流转换成字符输出流</span><br><span class="hljs-comment">//        Writer osw = new OutputStreamWriter(os); //以默认的UTF-8写字符出去</span><br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(os,<span class="hljs-string">&quot;GBK&quot;</span>);<span class="hljs-comment">//以GBK的方式写出去</span><br>        <span class="hljs-comment">// 3 把低级的字符输出流包装成高级的缓冲字符输出流</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(osw);<br><br>        bw.write(<span class="hljs-string">&quot;第一行&quot;</span>);<br>        bw.write(<span class="hljs-string">&quot;第er行&quot;</span>);<br><br>        bw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h2><ul><li>作用:以内存为基准，把内存中的对象存储到磁盘文件中去，称为对象序列化。</li><li>使用到的流是对象字节输出流:ObjectOutputStream</li></ul><h3 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h3><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220628165605399.png" alt="image-20220628165605399"></p><h5 id="序列化方法"><a href="#序列化方法" class="headerlink" title="序列化方法"></a>序列化方法<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220704210037186.png" alt="image-20220704210037186"></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义学生类</span><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">//序列化与反序列化的版本号必须一致,否则会出错,升级版本号后必须重新进项序列化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//对象实例化,必须实现 Serializable 接口,接口本身是空的,只是代表一个信号,虚拟机得到信号就会执行程序将对象存入磁盘</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String loginName;<br>   <span class="hljs-comment">//transient修饰的成员变量不参与序列化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String passWord;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, String loginName, String passWord, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.loginName = loginName;<br>        <span class="hljs-built_in">this</span>.passWord = passWord;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用对象序列化.使用ObjectOutputStream把内存中的对象存入磁盘中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectOutputStreamDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 1 创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-string">&quot;登录名&quot;</span>,<span class="hljs-string">&quot;,密码&quot;</span>,<span class="hljs-number">21</span>);<br>        <span class="hljs-comment">// 2 对象序列化:使用 对象字节输出流 包装字节输出流管道</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;serializable/demo.txt&quot;</span>));<br>        <span class="hljs-comment">// 3 调用序列化方法</span><br>        oos.writeObject(student);<br>        <span class="hljs-comment">// 4 释放资源</span><br>        oos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象反序列化"><a href="#对象反序列化" class="headerlink" title="对象反序列化"></a>对象反序列化</h3><ul><li>使用到的流是对象字节输入流: ObjectInputStream</li><li>作用:以内存为基准，把存储到磁盘文件中去的对象数据恢复成内存中的对象，称为对象反序列化。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220704212803893.png" alt="image-20220704212803893"></p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220704212828888.png" alt="image-20220704212828888"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对象反序列化</span><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学会使用对象反序列化:使用对象字节输入流把文件中的对象数据恢复成内存中的Java对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInputStreamDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建对象字节输入流管道包装低级的字节输入流管道</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;serializable/demo.txt&quot;</span>));<br>        <span class="hljs-comment">// 2 调用对象字节输入流的反序列化方法</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (Student) is.readObject();<span class="hljs-comment">//调用方法读取硬盘中的文件数据,还原数据为对象,因为数据是Student类型,所以这里强转</span><br><br>        System.out.println(s.toString());<span class="hljs-comment">//打印s,密码设置了不参与序列化</span><br>        <span class="hljs-comment">//Student&#123;name=&#x27;小明&#x27;, loginName=&#x27;登录名&#x27;, passWord=&#x27;null&#x27;, age=21&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><ul><li>用:打印流可以实现方便、高效的打印数据到文件中去。打印流一般是指: PrintStream,PrintWriter两个类。</li><li>可以实现打印什么数据就是什么数据，例如打印整数97写出去就是97，打印boolean的true，写出去就是true。</li></ul><h5 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220705195818819.png" alt="image-20220705195818819"></p><h5 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220705200841630.png" alt="image-20220705200841630"></p><h5 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h5><ul><li>打印数据功能上是一模一样的，都是使用方便，性能高效（核心优势)</li><li>PrintStream继承自字节输出流OutputStream，支持写字节数据的方法。</li><li>PrintWriter继承自字符输出流Writer，支持写字符数据出去</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">printDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 1 创建一个打印流对象</span><br><span class="hljs-comment">//        PrintStream ps = new PrintStream(new FileOutputStream(&quot;printStream/demo.txt&quot;,true));//如果需要追加,就在低级管道后加true</span><br><span class="hljs-comment">//        PrintStream ps = new PrintStream(&quot;printStream/demo.txt&quot;,&quot;GBK&quot;);//写数据方面,Stream只能写字节,Writer写字符</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-string">&quot;printStream/demo.txt&quot;</span>,<span class="hljs-string">&quot;GBK&quot;</span>);<span class="hljs-comment">//打印方面两者没区别</span><br>        <span class="hljs-comment">//可以打印多种类型</span><br>        ps.println(<span class="hljs-number">101</span>);<br>        ps.println(<span class="hljs-string">&quot;dsds&quot;</span>);<br>        ps.println(<span class="hljs-literal">true</span>);<br>        ps.println(<span class="hljs-number">1.1</span>);<br>        <span class="hljs-comment">//Writer可以写入字符</span><br>        ps.write(<span class="hljs-string">&quot;字符&quot;</span>);<br>        ps.close();<span class="hljs-comment">//关闭打印流</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出语句重定向"><a href="#输出语句重定向" class="headerlink" title="输出语句重定向"></a>输出语句重定向</h3><ul><li>属于打印流的一种,可以把输出语句的打印位置改到文件.</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220705203759593.png" alt="image-20220705203759593"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.PrintStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 了解改变输出语句的位置到文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;输出到控制台&quot;</span>);<br>        <span class="hljs-comment">//改变输出语句的位置,之后所有的打印操作都只会写入指定的文件</span><br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;printStream/打印流.txt&quot;</span>);<br>        System.setOut(ps);<span class="hljs-comment">//把系统打印流更改为ps,这时候就会打印语句到文件&quot;打印流.txt&quot;中</span><br>        System.out.println(<span class="hljs-string">&quot;输出到文件&quot;</span>);<span class="hljs-comment">//这时就会新建出&quot;打印流.txt&quot;文件并写入这句话</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Properties-map集合"><a href="#Properties-map集合" class="headerlink" title="Properties(map集合)"></a>Properties(map集合)</h2><ul><li>是个map集合,但是一般不会当集合使用,HashMap更好用</li></ul><h4 id="核心作用"><a href="#核心作用" class="headerlink" title="核心作用"></a>核心作用</h4><ul><li>Properties代表的是一个属性文件，可以把自己对象中的键值对信息存入到一个属性文件中去。</li><li>属性文件:后缀是.properties结尾的文件,里面的内容都是key&#x3D;value，后续做系统配置信息的。</li></ul><h4 id="Api-1"><a href="#Api-1" class="headerlink" title="Api"></a>Api</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220705204907832.png" alt="image-20220705204907832"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//需求: 使用Properties把键值对信息存入到属性文件中去</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//</span><br>        properties.setProperty(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;12345&quot;</span>);<span class="hljs-comment">//这里本质就是put,Map集合的添加,源代码就是put,为了划清界限</span><br>        properties.put(<span class="hljs-string">&quot;admin1&quot;</span>,<span class="hljs-string">&quot;112345&quot;</span>);<br>        properties.put(<span class="hljs-string">&quot;admin2&quot;</span>,<span class="hljs-string">&quot;112345&quot;</span>);<br>        System.out.println(properties);<br>        <span class="hljs-comment">// 两个入参:1 保存到的管道,字符输出流管道 2 注释//把信息驯如到了文件中</span><br>        properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;properties/user.properties&quot;</span>),<span class="hljs-string">&quot;这里可以注释,不写也可以&quot;</span>);<span class="hljs-comment">//这里流会自动关闭</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**&#x27;</span><br><span class="hljs-comment"> * Properties读取属性文件中的键值对信息(读取)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 读取属性文件</span><br>        <span class="hljs-comment">// 创建一个Properties类型的容器对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>        <span class="hljs-comment">// 加载属性文件中的键值对数据到属性对象properties中去</span><br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;Properties/user.properties&quot;</span>));<br><br>        System.out.println(properties);<br>        <span class="hljs-comment">//根据键获取值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin1</span> <span class="hljs-operator">=</span> (String)properties.get(<span class="hljs-string">&quot;admin1&quot;</span>);<span class="hljs-comment">//调用父类方法根据键获取值,默认取出的是OBj类型,需要强转</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;admin&quot;</span>);<span class="hljs-comment">//使用properties带的getProperty,本质也是调用get,但是类型直接就是String</span><br><br>        System.out.println(admin);<br>        System.out.println(admin1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO框架"><a href="#IO框架" class="headerlink" title="IO框架"></a>IO框架</h2><h4 id="commons-io概述"><a href="#commons-io概述" class="headerlink" title="commons-io概述"></a>commons-io概述</h4><ul><li>commons-io是apache开源基金组织提供的一组有关IO操作的类库,可以提高IO功能开发的效率</li><li>commons-io工具包提供了很多有关io操作的类。有两个主要的类FileUtils, IOUtils</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220709215821038.png" alt="image-20220709215821038"></p><ul><li><h4 id="导入commons-io-2-6-jar做开发"><a href="#导入commons-io-2-6-jar做开发" class="headerlink" title="导入commons-io-2.6.jar做开发"></a>导入commons-io-2.6.jar做开发</h4><ul><li>在项目中创建一个文件夹:lib</li><li>将commons-io-2.6.jar文件复制到lib文件夹</li><li>在jar文件上点右键，选择Add as Library(添加到库) -&gt;点击OK</li><li>在类中导包使用</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.io.FileUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsIODemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 文件复制  将文件1复制到1_copy</span><br>        IOUtils.copy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/01-临时文件/1.mp4&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:/01-临时文件/1_copy.mp4&quot;</span>));<br>        <span class="hljs-comment">// 2 文件复制到某个文件夹下copyFileToDirectory(复制文件到文件夹)</span><br>        FileUtils.copyFileToDirectory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/01-临时文件/1.mp4&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/&quot;</span>));<br>        <span class="hljs-comment">// 3 文件夹复制到文件夹copyDirectoryToDirectory</span><br>        FileUtils.copyDirectoryToDirectory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/01-临时文件/Demo/&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/&quot;</span>));<br>        <span class="hljs-comment">// 4 删除文件夹</span><br>        FileUtils.deleteQuietly(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/Demo&quot;</span>));<br>        <span class="hljs-comment">// JDK1.7开始的(复制文件到文件)</span><br>        Files.copy(Path.of(<span class="hljs-string">&quot;D:/01-临时文件/1.mp4&quot;</span>),Path.of(<span class="hljs-string">&quot;D:/01-临时文件/1_copy2.mp4&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h5 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h5><ul><li><p>线程(thread)是一个程序内部的一条执行路径。</p></li><li><p>我们之前启动程序执行后，main方法的执行其实就是一条单独的执行路径。</p></li><li><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220712204828426.png" alt="image-20220712204828426"></p></li><li><p>程序中如果只有一条执行路径，那么这个程序就是单线程的程序。</p></li></ul><h5 id="多线程-1"><a href="#多线程-1" class="headerlink" title="多线程"></a>多线程</h5><ul><li>多线程是指从软硬件上实现多条执行流程的技术。</li></ul><h3 id="多线程的创建"><a href="#多线程的创建" class="headerlink" title="多线程的创建"></a>多线程的创建</h3><h4 id="方式一-继承Thread类"><a href="#方式一-继承Thread类" class="headerlink" title="方式一:继承Thread类"></a>方式一:继承Thread类</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220716104158599.png" alt="image-20220716104158599" style="zoom:50%;" /><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点:"></a>优缺点:</h5><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220716104317639.png" alt="image-20220716104317639" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.create;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  1 多线程的创建方式一:继承Thread类实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 3 new一个新线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTHread</span>();<br>        <span class="hljs-comment">// 4 调用start方法启动线程(执行的还是run方法),/如果直接执行run方法,就还是单线程执行,会先执行run再执行后续,不会同时执行/</span><br><br>        t.start();<span class="hljs-comment">//启动子线程</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程执行输出&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 定义一个线程类继承Thread类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTHread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  2 重写run方法,里面是定义线程要做的事</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程执行输出&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h5 id="不直接调用run方法-而是调用start启动线程"><a href="#不直接调用run方法-而是调用start启动线程" class="headerlink" title="不直接调用run方法,而是调用start启动线程"></a>不直接调用run方法,而是调用start启动线程</h5><ul><li>直接调用run方法会当成普通方法执行,此时相当于还是单线程执行.</li><li>只有调用start方法才是启动一个新的线程执行</li></ul><h5 id="不要把主线程任务放在子线程之前"><a href="#不要把主线程任务放在子线程之前" class="headerlink" title="不要把主线程任务放在子线程之前"></a>不要把主线程任务放在子线程之前</h5><ul><li>这样主线程一直是先跑完的,相当于是一 个 单线程的效果</li></ul><h4 id="方式二-实现Runnable接口"><a href="#方式二-实现Runnable接口" class="headerlink" title="方式二:实现Runnable接口"></a>方式二:实现Runnable接口</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220716110255839.png" alt="image-20220716110255839" style="zoom:50%;" /><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220716110329481.png" alt="image-20220716110329481"></p><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点:"></a>优缺点:</h5> <img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220716124137050.png" alt="image-20220716124137050" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.create;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学会线程的创建方式二,理解他的优缺点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 3 创建一个任务对象</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-comment">// 4 把任务对象交给Thread处理,同时给线程起名</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target,<span class="hljs-string">&quot;一号线程&quot;</span>);<br>        <span class="hljs-comment">// 5 启动线程</span><br>        t.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程启动&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 1 定义一个线程任务类 实现Runnable接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-comment">// 2 重写run方法,定义线程的执行任务- </span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程输出&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方式二拓展-实现Runnable接口-匿名内部类"><a href="#方式二拓展-实现Runnable接口-匿名内部类" class="headerlink" title="方式二拓展:实现Runnable接口(匿名内部类)"></a>方式二拓展:实现Runnable接口(匿名内部类)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.create;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学会线程的创建方式二,理解他的优缺点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo2_other</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        // 3 创建一个任务对象</span><br><span class="hljs-comment">//        Runnable target = new Runnable() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public void run() &#123;</span><br><span class="hljs-comment">//                for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="hljs-comment">//                    System.out.println(&quot;子线程输出&quot; + i);</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;;</span><br><span class="hljs-comment">//        // 4 把任务对象交给Thread处理</span><br><span class="hljs-comment">//        Thread t = new Thread(target);</span><br>        <span class="hljs-comment">// 创建并启动线程(Lambda表达式)</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                System.out.println(<span class="hljs-string">&quot;子线程输出&quot;</span> + i);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 5 启动线程</span><br>        thread.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程启动&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="前两种的问题"><a href="#前两种的问题" class="headerlink" title="前两种的问题"></a>前两种的问题</h5><ul><li>run方法均不能直接返回结果</li><li>不适合需要返回线程执行结果的业务场景</li></ul><h4 id="方式三-实现Callable接口-JDK1-5新增"><a href="#方式三-实现Callable接口-JDK1-5新增" class="headerlink" title="方式三:实现Callable接口(JDK1.5新增)"></a>方式三:实现Callable接口(JDK1.5新增)</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717123924788.png" alt="image-20220717123924788" style="zoom:50%;" /><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717123945336.png" alt="image-20220717123945336"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.create;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.Future;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学会线程创建方式三:实现Callable接口,结合FutureTask完成</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 3 创建Callable任务对象</span><br>        Callable&lt;String&gt; call = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>);<span class="hljs-comment">//100累加</span><br>        <span class="hljs-comment">// 4 把Callable任务对象 交给 FutureTask 对象</span><br>        <span class="hljs-comment">//作用1: 是Runnable的对象(实现了Runnable接口),可以交给Thread</span><br>        <span class="hljs-comment">//作用2: 可以在线程执行完毕后通过调用其get方法得到线程执行完成的结果</span><br>        FutureTask&lt;String&gt; future = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(call);<br>        <span class="hljs-comment">// 5 交给线程处理</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(future);<br>        <span class="hljs-comment">// 6 启动线程</span><br>        thread.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(future.get());<span class="hljs-comment">//子线程执行的结果是5050</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 1 定义一个任务类 实现Callable接口 应该声明线程任务执行完毕输出的数据类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<span class="hljs-comment">//这里声明为String 方法就输出String类型</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<span class="hljs-comment">//这里出错会自动抛出</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;子线程执行的结果是&quot;</span> + sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点:"></a>优缺点:</h5><p>优点:线程任务类只是实现接口,可以继续继承类和实现接口,扩展性强.</p><p>可以在线程执行完毕后去获取线程执行的结果.</p><p>缺点:编码复杂</p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717124328021.png" alt="image-20220717124328021" style="zoom:50%;" /><h2 id="Thread的常用方法"><a href="#Thread的常用方法" class="headerlink" title="Thread的常用方法"></a>Thread的常用方法</h2><h3 id="Thread的常用API"><a href="#Thread的常用API" class="headerlink" title="Thread的常用API"></a>Thread的常用API</h3><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717131830275.png" alt="image-20220717131830275"></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717131930557.png" alt="image-20220717131930557" style="zoom: 67%;" /><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717131809766.png" alt="image-20220717131809766"></p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717153751462.png" alt="image-20220717153751462"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.api;<br><span class="hljs-comment">//定义子线程类继承Thread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">//得到当前线程 在get名称进行打印</span><br><span class="hljs-comment">//            System.out.println(Thread.currentThread().getName()+&quot;输出&quot;+i);</span><br><span class="hljs-comment">//            System.out.println(this.getName()+&quot;输出&quot;+i);</span><br>            System.out.println(getName()+<span class="hljs-string">&quot;输出&quot;</span>+i);<span class="hljs-comment">//三行都一样</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.api;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程的API</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThredadDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        t.setName(<span class="hljs-string">&quot;一号线程&quot;</span>);<span class="hljs-comment">//给线程起名</span><br>        t.start();<span class="hljs-comment">//启动线程</span><br><span class="hljs-comment">//        System.out.println(t.getName());</span><br><br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        t1.setName(<span class="hljs-string">&quot;二号线程&quot;</span>);<br>        t1.start();<br><span class="hljs-comment">//        System.out.println(t1.getName());</span><br><br>        <span class="hljs-comment">//哪个线程执行,就得到哪个线程(当前线程对象)</span><br>        <span class="hljs-comment">//主线程的名称为 main</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        System.out.println(m.getName());<span class="hljs-comment">//当前主线程的名字</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;main线程输出&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.api;<br><span class="hljs-comment">//通过有参构造器直接给线程起名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过构造器起名(有参构造器)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name);<span class="hljs-comment">//将名称传入父类,实际是调用父类有参构造器</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">//得到当前线程 在get名称进行打印</span><br><span class="hljs-comment">//            System.out.println(Thread.currentThread().getName()+&quot;输出&quot;+i);</span><br><span class="hljs-comment">//            System.out.println(this.getName()+&quot;输出&quot;+i);</span><br>            System.out.println(getName()+<span class="hljs-string">&quot;输出&quot;</span>+i);<span class="hljs-comment">//三行都一样</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.api;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程的API</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThredadDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception  &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;一号线程&quot;</span>);<br>        t.start();<br><span class="hljs-comment">//        System.out.println(t.getName());</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;二号线程&quot;</span>);<br>        t1.start();<br><span class="hljs-comment">//        System.out.println(t1.getName());</span><br><br>        <span class="hljs-comment">//哪个线程执行,就得到哪个线程(当前线程对象)</span><br>        <span class="hljs-comment">//主线程的名称为 main</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        m.setName(<span class="hljs-string">&quot;main线程&quot;</span>);<br>        System.out.println(m.getName());<span class="hljs-comment">//当前主线程的名字</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(m.getName() + <span class="hljs-string">&quot;输出&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Thread的构造器"><a href="#Thread的构造器" class="headerlink" title="Thread的构造器"></a>Thread的构造器</h3><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717151350982.png" alt="image-20220717151350982"></p><h4 id="Thread类的线程休眠方法"><a href="#Thread类的线程休眠方法" class="headerlink" title="Thread类的线程休眠方法"></a>Thread类的线程休眠方法</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717152613209.png" alt="image-20220717152613209"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.api;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程休眠</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThredadDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;输出&quot;</span>+i);<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)&#123;<br>                <span class="hljs-comment">//线程休眠</span><br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><ul><li>多个线程同时操作同一个共享资源的时候可能会出现业务安全问题，称为线程安全问题。</li></ul><h3 id="线程同步的核心思想"><a href="#线程同步的核心思想" class="headerlink" title="线程同步的核心思想"></a>线程同步的核心思想</h3><ul><li>加锁，把共享资源进行上锁，每次只能一个线程进入访问完毕以后解锁，然后其他线程才能进来。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//账户类</span><br><span class="hljs-keyword">package</span> com.kong.safe;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String carId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String carId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.carId = carId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCarId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> carId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCarId</span><span class="hljs-params">(String carId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.carId = carId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-comment">// 取钱的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-comment">// 1 获取取钱的人</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">// 2 判断账户余额够不够</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>            <span class="hljs-comment">// 3 取出</span><br>            System.out.println(name + <span class="hljs-string">&quot;取出&quot;</span> + money);<br>            <span class="hljs-comment">// 4 更新余额</span><br>            <span class="hljs-built_in">this</span>.money -= money;<br>            System.out.println(name + <span class="hljs-string">&quot;取出后剩余&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 5 余额不足</span><br>            System.out.println(name + <span class="hljs-string">&quot;取钱,余额不足&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.safe;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取钱的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 接收处理的账户对象</span><br>    <span class="hljs-keyword">private</span> Account acc;<br>    <span class="hljs-comment">// 传入账户类和线程名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawThread</span><span class="hljs-params">(Account acc, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//在线程run方法里运行 账户类 的取钱方法 drawMoney</span><br>        <span class="hljs-comment">// 小明 小红 取钱</span><br>        acc.drawMoney(<span class="hljs-number">10000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.safe;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求:模拟取钱案例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 定义线程类,创建一个共享的账户对象</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;kahao&quot;</span>, <span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">// 2 创建两个线程对象,代表小明;小红同时进来</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小红&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>小红取出10000.0<br>小明取出10000.0<br>小红取出后剩余0.0<br>小明取出后剩余-10000.0</p></blockquote><h3 id="加锁方式"><a href="#加锁方式" class="headerlink" title="加锁方式"></a>加锁方式</h3><h4 id="方式一-同步代码块"><a href="#方式一-同步代码块" class="headerlink" title="方式一:同步代码块"></a>方式一:同步代码块</h4><ul><li>作用:把出现线程安全问题的核心代码给上锁。</li><li>原理:每次只能一个线程进入，执行完毕后自动解锁，其他线程才可以进来执行。</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717181538662.png" alt="image-20220717181538662" style="zoom:50%;" /><h5 id="锁对象要求"><a href="#锁对象要求" class="headerlink" title="锁对象要求"></a>锁对象要求</h5><ul><li>理论上:锁对象只要对于当前同时执行的线程来说是同一个对象即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//账户类</span><br><span class="hljs-keyword">package</span> com.kong.synchronized_code;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String carId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String carId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.carId = carId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCarId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> carId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCarId</span><span class="hljs-params">(String carId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.carId = carId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><span class="hljs-comment">//静态方法可以直接类名.方法名调用,所以直接锁类名.class 多人调用只有一个在运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (Account.class)&#123;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 取钱的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-comment">// 1 获取取钱的人</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">// 同步代码块 ctrl+alt+t</span><br><span class="hljs-comment">//        synchronized (&quot;kong&quot;) &#123;//用字符串会导致别的账户也需要等待锁,别的账户运行时锁是同一个</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<span class="hljs-comment">//这里this是账户类(acc调用的这个方法)// ,每个人的账户都不同,所以锁不同,不会互相影响</span><br>            <span class="hljs-comment">// 2 判断账户余额够不够</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>                <span class="hljs-comment">// 3 取出</span><br>                System.out.println(name + <span class="hljs-string">&quot;取出&quot;</span> + money);<br>                <span class="hljs-comment">// 4 更新余额</span><br>                <span class="hljs-built_in">this</span>.money -= money;<br>                System.out.println(name + <span class="hljs-string">&quot;取出后剩余&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 5 余额不足</span><br>                System.out.println(name + <span class="hljs-string">&quot;取钱,余额不足&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.synchronized_code;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取钱的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 接收处理的账户对象</span><br>    <span class="hljs-keyword">private</span> Account acc;<br>    <span class="hljs-comment">// 传入账户类和线程名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawThread</span><span class="hljs-params">(Account acc, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//在线程run方法里运行 账户类 的取钱方法 drawMoney</span><br>        <span class="hljs-comment">// 小明 小红 取钱</span><br>        acc.drawMoney(<span class="hljs-number">10000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.synchronized_code;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求:模拟取钱案例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 定义线程类,创建一个共享的账户对象</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;kahao&quot;</span>, <span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">// 2 创建两个线程对象,代表小明;小红同时进来</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小红&quot;</span>).start();<br><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;hao&quot;</span>, <span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">// 2 创建两个线程对象,代表小明;小红同时进来</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc1, <span class="hljs-string">&quot;明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc1, <span class="hljs-string">&quot;红&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>小明取出10000.0<br>明取出10000.0<br>小明取出后剩余0.0<br>明取出后剩余0.0<br>红取钱,余额不足<br>小红取钱,余额不足</p></blockquote><h5 id="锁对象使用任意唯一的对象好不好"><a href="#锁对象使用任意唯一的对象好不好" class="headerlink" title="锁对象使用任意唯一的对象好不好"></a>锁对象使用任意唯一的对象好不好</h5><ul><li>不好,会影响其他无关线程的执行</li></ul><h5 id="锁对象的规范要求"><a href="#锁对象的规范要求" class="headerlink" title="锁对象的规范要求"></a>锁对象的规范要求</h5><ul><li>规范上:建议使用共享资源作为锁对象。</li><li>对于实例方法建议使用this作为锁对象。</li><li>对于静态方法建议使用字节码(类名.class)对象作为锁对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态方法可以直接类名.方法名调用,所以直接锁类名.class 多人调用只有一个在运行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">synchronized</span> (Account.class)&#123;<br>...<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="同步代码块如何实现线程安全"><a href="#同步代码块如何实现线程安全" class="headerlink" title="同步代码块如何实现线程安全"></a>同步代码块如何实现线程安全</h5><ul><li>对出现问题的核心代码使用synchronized进行加锁</li><li>每次只能一个线程占锁进入访问</li></ul><h4 id="方式二-同步方法"><a href="#方式二-同步方法" class="headerlink" title="方式二:同步方法"></a>方式二:同步方法</h4><ul><li><p>作用:把出现线程安全问题的核心方法给上锁。</p></li><li><p>原理:每次只能一个线程进入，执行完毕以后自动解锁，其他线程才可以进来执行。</p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717193824300.png" alt="image-20220717193824300" style="zoom:50%;" /></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//账户类</span><br><span class="hljs-keyword">package</span> com.kong.synchronized_lock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String carId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String carId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.carId = carId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>get()set()...<br><br>    <span class="hljs-comment">// 取钱的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<span class="hljs-comment">//在方法上添加synchronized修饰</span><br>        <span class="hljs-comment">// 1 获取取钱的人</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">// 2 判断账户余额够不够</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>            <span class="hljs-comment">// 3 取出</span><br>            System.out.println(name + <span class="hljs-string">&quot;取出&quot;</span> + money);<br>            <span class="hljs-comment">// 4 更新余额</span><br>            <span class="hljs-built_in">this</span>.money -= money;<br>            System.out.println(name + <span class="hljs-string">&quot;取出后剩余&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 5 余额不足</span><br>            System.out.println(name + <span class="hljs-string">&quot;取钱,余额不足&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h5><ul><li>同步方法其实底层也是有隐式锁对象的，只是锁的范围是整个方法代码。</li><li>如果方法是实例方法:同步方法默认用this作为的锁对象。但是代码要高度面向对象!</li><li>如果方法是静态方法:同步方法默认用类名.class作为的锁对象。</li></ul><h4 id="方式三-Lock锁"><a href="#方式三-Lock锁" class="headerlink" title="方式三:Lock锁"></a>方式三:Lock锁</h4><ul><li>为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock，更加灵活、方便。</li><li>Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作。</li><li>Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来构建Lock锁对象。</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717195136886.png" alt="image-20220717195136886" style="zoom:80%;" align="left"/>  <img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717200523942.png" alt="image-20220717200523942" style="zoom: 80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//账户类</span><br><span class="hljs-keyword">package</span> com.kong.synchronized_lock;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String carId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">LOCK</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<span class="hljs-comment">//final 锁对象唯一不可替换</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String carId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.carId = carId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br>...<br>    <span class="hljs-comment">// 取钱的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<span class="hljs-comment">//在方法</span><br>        <span class="hljs-comment">// 1 获取取钱的人</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">// 2 判断账户余额够不够</span><br>        <br>        LOCK.lock();<span class="hljs-comment">//上锁</span><br>        <br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//这里try catch因为防止方法里出错,无法执行解锁</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>                <span class="hljs-comment">// 3 取出</span><br>                System.out.println(name + <span class="hljs-string">&quot;取出&quot;</span> + money);<br>                <span class="hljs-comment">// 4 更新余额</span><br>                <span class="hljs-built_in">this</span>.money -= money;<br>                System.out.println(name + <span class="hljs-string">&quot;取出后剩余&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 5 余额不足</span><br>                System.out.println(name + <span class="hljs-string">&quot;取钱,余额不足&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <br>        LOCK.unlock();<span class="hljs-comment">//解锁</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.synchronized_lock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取钱的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 接收处理的账户对象</span><br>    <span class="hljs-keyword">private</span> Account acc;<br>    <span class="hljs-comment">// 传入账户类和线程名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawThread</span><span class="hljs-params">(Account acc, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//在线程run方法里运行 账户类 的取钱方法 drawMoney</span><br>        <span class="hljs-comment">// 小明 小红 取钱</span><br>        acc.drawMoney(<span class="hljs-number">10000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.synchronized_lock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需求:模拟取钱案例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 定义线程类,创建一个共享的账户对象</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;kahao&quot;</span>, <span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">// 2 创建两个线程对象,代表小明;小红同时进来</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小红&quot;</span>).start();<span class="hljs-comment">// 1 定义线程类,创建一个共享的账户对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><ul><li>所谓线程通信就是线程间相互发送数据，线程通信通常通过共享一个数据的方式实现。</li><li>线程间会根据共享数据的情况决定自己该怎么做，以及通知其他线程怎么做。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220717203726180.png" alt="image-20220717203726180"></p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>上述方法应该使用当前同步锁对象进行调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//账户类</span><br><span class="hljs-keyword">package</span> com.kong.thread_communication;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String carId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String carId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.carId = carId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCarId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> carId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCarId</span><span class="hljs-params">(String carId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.carId = carId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-comment">//取钱方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.money &gt;= money)&#123;<br>                <span class="hljs-comment">//钱够:可取</span><br>                <span class="hljs-built_in">this</span>.money -= money;<br>                System.out.println(name+<span class="hljs-string">&quot;取钱,取&quot;</span>+money+<span class="hljs-string">&quot;成功!余额是:&quot;</span>+<span class="hljs-built_in">this</span>.money);<br>                <span class="hljs-built_in">this</span>.notifyAll();<span class="hljs-comment">//唤醒所有线程</span><br>                <span class="hljs-comment">//先进行唤醒,再进行等待,因为自己等待后无法在唤醒别人</span><br>                <span class="hljs-built_in">this</span>.wait();<span class="hljs-comment">//锁对象让当前线程进入等待</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//钱不够</span><br>                <span class="hljs-comment">//唤醒别人</span><br><span class="hljs-comment">//                this.notifyAll();//唤醒所有线程</span><br>                <span class="hljs-comment">//先进行唤醒,再进行等待,因为自己等待后无法在唤醒别人</span><br>                <span class="hljs-built_in">this</span>.wait();<span class="hljs-comment">//锁对象让当前线程进入等待</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//存钱方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deposit</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.money == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//没钱 ;存钱</span><br>                <span class="hljs-built_in">this</span>.money += money;<br>                System.out.println(name+<span class="hljs-string">&quot;存钱,存&quot;</span>+money+<span class="hljs-string">&quot;成功!余额是:&quot;</span>+<span class="hljs-built_in">this</span>.money);<br>                <span class="hljs-comment">//有钱之后,唤醒别人,等待自己</span><br>                <span class="hljs-built_in">this</span>.notifyAll();<span class="hljs-comment">//唤醒所有线程</span><br>                <span class="hljs-comment">//先进行唤醒,再进行等待,因为自己等待后无法在唤醒别人</span><br>                <span class="hljs-built_in">this</span>.wait();<span class="hljs-comment">//锁对象让当前线程进入等待</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//有钱</span><br>                <span class="hljs-comment">//唤醒别人</span><br><span class="hljs-comment">//                this.notifyAll();//唤醒所有线程</span><br>                <span class="hljs-comment">//先进行唤醒,再进行等待,因为自己等待后无法在唤醒别人</span><br>                <span class="hljs-built_in">this</span>.wait();<span class="hljs-comment">//锁对象让当前线程进入等待</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.thread_communication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取钱的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 接收处理的账户对象</span><br>    <span class="hljs-keyword">private</span> Account acc;<br>    <span class="hljs-comment">// 传入账户类和线程名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawThread</span><span class="hljs-params">(Account acc, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//小明 小红 取钱</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            acc.drawMoney(<span class="hljs-number">10000</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.thread_communication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取存钱的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepositThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 接收处理的账户对象</span><br>    <span class="hljs-keyword">private</span> Account acc;<br>    <span class="hljs-comment">// 传入账户类和线程名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DepositThread</span><span class="hljs-params">(Account acc, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1 2 3 存钱</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            acc.deposit(<span class="hljs-number">10000</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.thread_communication;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 了解线程通信的流程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//3个人存钱 2个人取钱 模拟线程通信思想(一存 一取)</span><br>        <span class="hljs-comment">// 1 创建账户对象,五个人共同操作的账户</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;kahao&quot;</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//这里五个人用的是同一个账户,也就是用同一把锁,只能一个人操作</span><br>        <span class="hljs-comment">// 2 创建2个取钱线程 代表小明和小红</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc,<span class="hljs-string">&quot;小明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc,<span class="hljs-string">&quot;小红&quot;</span>).start();<br>        <span class="hljs-comment">// 3 创建3个存钱线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(acc,<span class="hljs-string">&quot;存1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(acc,<span class="hljs-string">&quot;存2&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(acc,<span class="hljs-string">&quot;存3&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>存1存钱,存10000.0成功!余额是:10000.0<br>小红取钱,取10000.0成功!余额是:0.0<br>存2存钱,存10000.0成功!余额是:10000.0<br>小明取钱,取10000.0成功!余额是:0.0<br>…</p></blockquote><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><ul><li>线程池就是一个可以复用线程的技术</li></ul><h5 id="谁代表线程池"><a href="#谁代表线程池" class="headerlink" title="谁代表线程池"></a>谁代表线程池</h5><ul><li>JDK5.0起提供了代表线程池的接口: ExecutorService</li></ul><h5 id="如何得到线程池对象"><a href="#如何得到线程池对象" class="headerlink" title="如何得到线程池对象"></a>如何得到线程池对象</h5><ul><li>方式一:使用ExecutorService的实现类ThreadPoolExecutor自创建一个线程池对象</li><li>方式二:使用Executors(线程池的工具类）调用方法返回不同特点的线程池对象</li></ul><h3 id="ThreadPoolExecutor创建线程池"><a href="#ThreadPoolExecutor创建线程池" class="headerlink" title="ThreadPoolExecutor创建线程池"></a>ThreadPoolExecutor创建线程池</h3><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220718210945321.png" alt="image-20220718210945321"></p><h5 id="什么时候创建临时线程"><a href="#什么时候创建临时线程" class="headerlink" title="什么时候创建临时线程"></a>什么时候创建临时线程</h5><ul><li>新任务提交时发现核心线程都在忙，任务队列也满了，并且还可以创建临时线程，此时才会创建临时线程。</li></ul><h5 id="什么时候会开始拒绝任务"><a href="#什么时候会开始拒绝任务" class="headerlink" title="什么时候会开始拒绝任务"></a>什么时候会开始拒绝任务</h5><ul><li>核心线程和临时线程都在忙，任务队列也满了，新的任务过来的时候才会开始任务拒绝。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220718212709468.png" alt="image-20220718212709468"></p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220718212736249.png" alt="image-20220718212736249"></p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220718212802992.png" alt="image-20220718212802992"></p><h4 id="线程池处理Runnable任务"><a href="#线程池处理Runnable任务" class="headerlink" title="线程池处理Runnable任务"></a>线程池处理Runnable任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//任务类</span><br><span class="hljs-keyword">package</span> com.kong.threadpool;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;输出了:HelloWorld:&quot;</span> + i);<br><br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;休眠&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">10000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.threadpool;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义一个线程池对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolDemo</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * public ThreadPoolExecutor(int corePoolSize,//核心线程数量</span><br><span class="hljs-comment">     *                               int maximumPoolSize,//最大线程数</span><br><span class="hljs-comment">     *                               long keepAliveTime,//临时线程最大存活时间</span><br><span class="hljs-comment">     *                               TimeUnit unit,//时间单位</span><br><span class="hljs-comment">     *                               BlockingQueue&lt;Runnable&gt; workQueue,//任务队列</span><br><span class="hljs-comment">     *                               ThreadFactory threadFactory, //指定线程工厂</span><br><span class="hljs-comment">     *                               RejectedExecutionHandler handler)//新任务策略(任务满时)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 创建线程池对象</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">5</span>), Executors.defaultThreadFactory(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br>        <span class="hljs-comment">// 2 给线程池处理</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<span class="hljs-comment">//创建任务对象</span><br>        <span class="hljs-comment">//核心线程 3</span><br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br>        <span class="hljs-comment">//任务队列 new ArrayBlockingQueue&lt;&gt;(5)</span><br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br>        <span class="hljs-comment">//最大线程 5 核心+2(临时线程)</span><br>        pool.execute(target);<br>        pool.execute(target);<br>        <span class="hljs-comment">//超出 报错</span><br><span class="hljs-comment">//        pool.execute(target);</span><br>        <span class="hljs-comment">// 关闭线程池(开发一般不会使用)</span><br><span class="hljs-comment">//        pool.shutdownNow();// 立即关闭,即使没有完成</span><br>        pool.shutdown();<span class="hljs-comment">//会等待全部任务执行完毕再关闭</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程池处理Callable任务"><a href="#线程池处理Callable任务" class="headerlink" title="线程池处理Callable任务"></a>线程池处理Callable任务</h4><p> <img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721103630383.png" alt="image-20220721103630383"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//任务类</span><br><span class="hljs-keyword">package</span> com.kong.threadpool;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><br><span class="hljs-comment">// 1 定义一个任务类 实现Callable接口 应该声明线程任务执行完毕输出的数据类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<span class="hljs-comment">//这里声明为String 方法就输出String类型</span><br>    <span class="hljs-comment">//计算1-n的和</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<span class="hljs-comment">//这里出错会自动抛出</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Thread.currentThread().getName()+<span class="hljs-string">&quot;子线程执行 1-&quot;</span>+n+<span class="hljs-string">&quot;的结果是&quot;</span> + sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.threadpool;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义一个线程池对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolDemo1</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * public ThreadPoolExecutor(int corePoolSize,</span><br><span class="hljs-comment">     *                               int maximumPoolSize,</span><br><span class="hljs-comment">     *                               long keepAliveTime,</span><br><span class="hljs-comment">     *                               TimeUnit unit,</span><br><span class="hljs-comment">     *                               BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-comment">     *                               ThreadFactory threadFactory,</span><br><span class="hljs-comment">     *                               RejectedExecutionHandler handler)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 创建线程池对象</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">5</span>), Executors.defaultThreadFactory(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br>        <span class="hljs-comment">// 2 给线程池处理</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Callable&lt;String&gt; callable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>);<br>            Future&lt;String&gt; f1 = pool.submit(callable);<br>            System.out.println(f1.get());<br>            Future&lt;String&gt; f2 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">200</span>));<br>            System.out.println(f2.get());<br>            Future&lt;String&gt; f3 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">300</span>));<br>            System.out.println(f3.get());<br>            Future&lt;String&gt; f4 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">400</span>));<br>            System.out.println(f4.get());<br>            Future&lt;String&gt; f5 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">500</span>));<br>            System.out.println(f5.get());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Executors工具类实现线程池"><a href="#Executors工具类实现线程池" class="headerlink" title="Executors工具类实现线程池"></a>Executors工具类实现线程池</h3><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721123619989.png" alt="image-20220721123619989"></p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721123922562.png" alt="image-20220721123922562"></p><h4 id="Executors使用可能存在的问题"><a href="#Executors使用可能存在的问题" class="headerlink" title="Executors使用可能存在的问题"></a>Executors使用可能存在的问题</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721133200887.png" alt="image-20220721133200887"></p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721134025122.png" alt="image-20220721134025122" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.threadpool;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Executors自定义一个线程池对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 创建固定线程数的线程池</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br><br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><ul><li>定时器是控制任务延时调用,或者周期调用的技术</li><li>作用:闹钟 定时邮件发送</li></ul><h5 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h5><p>方式一:Timer</p><p>方式二:ScheduledExecutorService</p><h3 id="Timer定时器"><a href="#Timer定时器" class="headerlink" title="Timer定时器"></a>Timer定时器</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721135509234.png" alt="image-20220721135509234" style="zoom: 67%;" /><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721135549702.png" alt="image-20220721135549702"></p><h4 id="特点和存在的问题"><a href="#特点和存在的问题" class="headerlink" title="特点和存在的问题"></a>特点和存在的问题</h4><ul><li>Timer是单线程，处理多个任务按照顺序执行，存在延时与设置定时器的时间有出入。</li><li>可能因为其中的某个任务的异常使Timer线程死掉，从而影响后续任务执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.timer;<br><br><span class="hljs-keyword">import</span> javax.xml.crypto.Data;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Timer 定时器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimerDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 创建Timer对象</span><br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>        <span class="hljs-comment">// 2 调用方法 处理定时任务</span><br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行A一次&quot;</span> + LocalTime.now());<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">2000</span>);<br>                    <span class="hljs-comment">//两个任务用的是统一个定时器线程,所以延时会干扰其他任务,同样一个任务报错,其他都无法继续执行</span><br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-number">2000</span>, <span class="hljs-number">1000</span>);<br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行B一次&quot;</span> + LocalTime.now());<br>            &#125;<br>        &#125;, <span class="hljs-number">2000</span>, <span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ScheduledExecutorService定时器"><a href="#ScheduledExecutorService定时器" class="headerlink" title="ScheduledExecutorService定时器"></a>ScheduledExecutorService定时器</h3><ul><li>ScheduledExecutorService是jdk1.5中引入了并发包，目的是为了弥补Timer的缺陷，ScheduledExecutorService内部为线程池。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721142212851.png" alt="image-20220721142212851"></p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721142238044.png" alt="image-20220721142238044"></p><h4 id="ScheduledExecutorService的优点"><a href="#ScheduledExecutorService的优点" class="headerlink" title="ScheduledExecutorService的优点"></a>ScheduledExecutorService的优点</h4><ul><li>基于线程池，某个任务的执行情况不会影响其他定时任务的执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.timer;<br><br><span class="hljs-keyword">import</span> com.kong.threadpool.MyRunnable;<br><br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ScheduledExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Timer 定时器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimerDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 创建 ScheduledExecutorService线程池,做定时器</span><br>        <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 2 开启定时任务</span><br>        pool.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;aaa执行一次&quot;</span> + LocalTime.now());<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">10000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>, TimeUnit.SECONDS);<br><span class="hljs-comment">//延迟时间,间隔多久重复执行</span><br>        pool.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;bbb执行一次&quot;</span> + LocalTime.now());<br>            &#125;<br>        &#125;,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>, TimeUnit.SECONDS);<br>        pool.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;ccc执行一次&quot;</span> + LocalTime.now());<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>, TimeUnit.SECONDS);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="并发-并行"><a href="#并发-并行" class="headerlink" title="并发 并行"></a>并发 并行</h2><ul><li>正在运行的程序（软件）就是一个独立的进程，线程是属于进程的，多个线程其实是并发与并行同时进行的。</li></ul><h5 id="并发的理解："><a href="#并发的理解：" class="headerlink" title="并发的理解："></a>并发的理解：</h5><ul><li>CPU同时处理线程的数量有限。</li><li>CPU会轮询为系统的每个线程服务，由于CPU切换的速度很快，给我们的感觉这些线程在同时执行，这就是并发。</li></ul><h5 id="并行的理解："><a href="#并行的理解：" class="headerlink" title="并行的理解："></a>并行的理解：</h5><ul><li>在同一个时刻上，同时有多个线程在被CPU处理并执行。</li></ul><h5 id="并发：CPU分时轮询的执行线程。"><a href="#并发：CPU分时轮询的执行线程。" class="headerlink" title="并发：CPU分时轮询的执行线程。"></a>并发：CPU分时轮询的执行线程。</h5><h5 id="并行：同一个时刻同时在执行。"><a href="#并行：同一个时刻同时在执行。" class="headerlink" title="并行：同一个时刻同时在执行。"></a>并行：同一个时刻同时在执行。</h5><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><h5 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h5><ul><li>线程的状态：也就是线程从生到死的过程，以及中间经历的各种状态及状态转换。</li><li>理解线程的状态有利于提升并发编程的理解能力。</li></ul><h5 id="Java线程的状态"><a href="#Java线程的状态" class="headerlink" title="Java线程的状态"></a>Java线程的状态</h5><ul><li>Java总共定义了6种状态</li><li>6种状态都定义在Thread类的内部枚举类中。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721204438003.png" alt="image-20220721204438003"></p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721204503997.png" alt="image-20220721204503997"></p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h5 id="什么是网络编程？"><a href="#什么是网络编程？" class="headerlink" title="什么是网络编程？"></a>什么是网络编程？</h5><ul><li>网络编程可以让程序与网络上的其他设备中的程序进行数据交互。</li></ul><h5 id="网络通信基本模式"><a href="#网络通信基本模式" class="headerlink" title="网络通信基本模式"></a>网络通信基本模式</h5><ul><li>常见的通信模式有如下2种形式：Client–Server(CS)、Browser,&#x2F;Server(BS)</li></ul><h5 id="实现网络编程关键的三要素"><a href="#实现网络编程关键的三要素" class="headerlink" title="实现网络编程关键的三要素"></a>实现网络编程关键的三要素</h5><ul><li>IP地址：设备在网络中的地址，是唯一的标识。</li><li>端口：应用程序在设备中唯一的标识。</li><li>协议：数据在网络中传输的规则，常见的协议有UDP协议和TCP协议。</li></ul><h5 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h5><ul><li><p>IP(Internet Protocol):全称”互联网协议地址”，是分配给上网设备的唯一标志。</p></li><li><p>常见的IP分类为：IPv4和IPV6</p></li><li><p>IPv6:128位(16字节)</p></li></ul><h5 id="IP常用命令"><a href="#IP常用命令" class="headerlink" title="IP常用命令"></a>IP常用命令</h5><ul><li>ipconfig:查看本机ip地址</li><li>ping IP地址:检查网络是否连通</li></ul><h5 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h5><ul><li>本机IP:127.0.0.1或者localhost:称为回送地址也可称本地回环地址,只会寻找当前所在本机</li></ul><h3 id="IP地址操作类-InetAddress"><a href="#IP地址操作类-InetAddress" class="headerlink" title="IP地址操作类-InetAddress"></a>IP地址操作类-InetAddress</h3><h4 id="InetAddress的使用"><a href="#InetAddress的使用" class="headerlink" title="InetAddress的使用"></a>InetAddress的使用</h4><ul><li>此类表示Internet协议(IP)地址。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721215614685.png" alt="image-20220721215614685"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.inetAddress;<br><br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InetAddressDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 1 获取本机ip地址</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip1</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>        System.out.println(ip1);<span class="hljs-comment">//(主机名称/ip地址)Pro-16/192.168.50.71</span><br>        System.out.println(ip1.getHostName());<span class="hljs-comment">//(主机名)Pro-16</span><br>        System.out.println(ip1.getHostAddress());<span class="hljs-comment">//(ip地址)192.168.50.71</span><br><br>        <span class="hljs-comment">// 2 获取域名对象</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip2</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>        System.out.println(ip2.getHostName());<br>        System.out.println(ip2.getHostAddress());<br><br>        <span class="hljs-comment">// 3 获取公网ip地址</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip3</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;180.101.49.11&quot;</span>);<br>        System.out.println(ip3.getHostName());<br>        System.out.println(ip3.getHostAddress());<br><br>        <span class="hljs-comment">// 4 判断是都能通: ping 5s之内测试是否可通</span><br>        System.out.println(ip3.isReachable(<span class="hljs-number">5000</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><ul><li>端口号：标识正在计算机设备上运行的进程（程序），被规定为一个16位的二进制，范围是0~65535。</li></ul><h5 id="端口类型"><a href="#端口类型" class="headerlink" title="端口类型"></a>端口类型</h5><ul><li>周知端口：0~1023，被预先定义的知名应用占用(如：HTTP占用80,FTP占用21)</li><li>注册端口：1024~49151，分配给用户进程或某些应用程序。(如：Tomcat占用8080,MySQL占用3306)</li><li>动态端口：49152到65535，之所以称为动态端口，是因为它一般不固定分配某种进程，而是动态分配。</li></ul><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><h5 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h5><ul><li>连接和通信数据的规则被称为网络通信协议</li></ul><h5 id="网络通信协议有两套参考模型"><a href="#网络通信协议有两套参考模型" class="headerlink" title="网络通信协议有两套参考模型"></a>网络通信协议有两套参考模型</h5><ul><li>OS参考模型：世界互联协议标准，全球通信规范，由于此模型过于理想化，未能在因特网上进行广泛推广。</li><li>TCP&#x2F;IP参考模型(或TCP&#x2F;IP协议)：事实上的国际标准。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220721222243107.png" alt="image-20220721222243107"></p><h5 id="传输层的2个常见协议"><a href="#传输层的2个常见协议" class="headerlink" title="传输层的2个常见协议"></a>传输层的2个常见协议</h5><ul><li>TCP(Transmission Control Protocol):传输控制协议</li><li>UDP(User Datagram Protocol):用户数据报协议</li></ul><h3 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h3><h5 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h5><ul><li>UDP是一种无连接、不可靠传输的协议。</li><li>将数据源P、目的地P和端口封装成数据包，不需要建立连接</li><li>每个数据包的大小限制在64KB内</li><li>发送不管对方是否准备好，接收方收到也不确认，故是不可靠的</li><li>可以广播发送，发送数据结束时无需释放资源，开销小，速度快。</li></ul><h5 id="UDP协议通信场景"><a href="#UDP协议通信场景" class="headerlink" title="UDP协议通信场景"></a>UDP协议通信场景</h5><ul><li>语音通话，视频会话等。</li></ul><h5 id="DatagramPacket-数据包对象"><a href="#DatagramPacket-数据包对象" class="headerlink" title="DatagramPacket:数据包对象"></a>DatagramPacket:数据包对象</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220722093504065.png" alt="image-20220722093504065"></p><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220722093540848.png" alt="image-20220722093540848"></p><h5 id="DatagramSocket-发送端和接收端对象"><a href="#DatagramSocket-发送端和接收端对象" class="headerlink" title="DatagramSocket:发送端和接收端对象"></a>DatagramSocket:发送端和接收端对象</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220722093653936.png" alt="image-20220722093653936"></p><h5 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220722093741868.png" alt="image-20220722093741868"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.udp;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建发送端对象:发送端自带默认的端口号</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<span class="hljs-comment">//也可以自己指定端口号</span><br><br>        <span class="hljs-comment">// 2 创建数据包对象封装数据</span><br>        <span class="hljs-comment">//参数一:封装要发送的数据 参数二:封装数据的大小 参数三:服务端的IP地址 参数四:封装数据的端口号</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(<span class="hljs-string">&quot;hello&quot;</span>.getBytes(), <span class="hljs-string">&quot;hello&quot;</span>.getBytes().length,<br>                InetAddress.getLocalHost(), <span class="hljs-number">8888</span>);<br><br>        <span class="hljs-comment">// 3 发送数据</span><br>        socket.send(packet);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.udp;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接收端(服务端)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeverDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建接收端对象:注册端口</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-comment">// 2 创建数据包对象接收数据</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">64</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br><br>        <span class="hljs-comment">// 3 等待接收数据</span><br>        socket.receive(packet);<br><br>        <span class="hljs-comment">// 4 获取数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//获取接收数据的长度</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf,<span class="hljs-number">0</span>,len);<span class="hljs-comment">//将读取到的数字节转换成字符串</span><br>        System.out.println(<span class="hljs-string">&quot;收到:&quot;</span>+rs);<br><br>        <span class="hljs-comment">//获取发送端的ip和端口</span><br>        System.out.println(packet.getSocketAddress());<br>        System.out.println(packet.getAddress());<span class="hljs-comment">//获取发送端的ip地址</span><br>        System.out.println(packet.getPort());<span class="hljs-comment">//获取发送端的端口号</span><br><br>        <span class="hljs-comment">// 5 关闭资源</span><br>        socket.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="UDP多发多收"><a href="#UDP多发多收" class="headerlink" title="UDP多发多收"></a>UDP多发多收</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.udp2;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送端 多发 多收</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建发送端对象:发送端自带默认的端口号</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">2111</span>);<span class="hljs-comment">//也可以自己指定端口号</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入:&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-comment">//判断输入 exit 退出</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br>                System.out.println(<span class="hljs-string">&quot;成功退出&quot;</span>);<br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 2 创建数据包对象封装数据</span><br>            <span class="hljs-comment">//参数一:封装要发送的数据 参数二:封装数据的大小 参数三:服务端的IP地址 参数四:封装数据的端口号</span><br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(msg.getBytes(), msg.getBytes().length,<br>                    InetAddress.getLocalHost(), <span class="hljs-number">8888</span>);<br><br>            <span class="hljs-comment">// 3 发送数据</span><br>            socket.send(packet);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.udp2;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接收端(服务端)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeverDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建接收端对象:注册端口</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-comment">// 2 创建数据包对象接收数据</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">64</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 3 等待接收数据</span><br>            socket.receive(packet);<br><br>            <span class="hljs-comment">// 4 获取数据</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//获取接收数据的长度</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf,<span class="hljs-number">0</span>,len);<span class="hljs-comment">//将读取到的数字节转换成字符串</span><br>            System.out.println(<span class="hljs-string">&quot;收到来自&quot;</span>+packet.getSocketAddress()+<span class="hljs-string">&quot;:&quot;</span>+rs);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="UDP通信广播-组播"><a href="#UDP通信广播-组播" class="headerlink" title="UDP通信广播 组播"></a>UDP通信广播 组播</h4><h5 id="UDP的三种通信方式"><a href="#UDP的三种通信方式" class="headerlink" title="UDP的三种通信方式"></a>UDP的三种通信方式</h5><ul><li>单播：单台主机与单台主机之间的通信。</li><li>广播：当前主机与所在网络中的所有主机通信。</li><li>组播：当前主机与选定的一组主机的通信。</li></ul><h5 id="UDP如何实现广播"><a href="#UDP如何实现广播" class="headerlink" title="UDP如何实现广播"></a>UDP如何实现广播</h5><ul><li>使用广播地址：255.255.255.255</li><li>具体操作：<ol><li>发送端发送的数据包的目的地写的是广播地址、且指定端口。(255.255.255.255,9999)</li><li>本机所在网段的其他主机的程序只要匹配端口成功即就可以收到消息了。(9999)</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.udp3;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接收端(服务端)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeverDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建接收端对象:注册端口</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9999</span>);<span class="hljs-comment">//广播消息这里只需匹配地址就可接收到广播消息</span><br><br>        <span class="hljs-comment">// 2 创建数据包对象接收数据</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">64</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 3 等待接收数据</span><br>            socket.receive(packet);<br><br>            <span class="hljs-comment">// 4 获取数据</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//获取接收数据的长度</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf,<span class="hljs-number">0</span>,len);<span class="hljs-comment">//将读取到的数字节转换成字符串</span><br>            System.out.println(<span class="hljs-string">&quot;收到来自&quot;</span>+packet.getSocketAddress()+<span class="hljs-string">&quot;:&quot;</span>+rs);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.udp3;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送端 多发 多收</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建发送端对象:发送端自带默认的端口号</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<span class="hljs-comment">//也可以自己指定端口号</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入:&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-comment">//判断输入 exit 退出</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br>                System.out.println(<span class="hljs-string">&quot;成功退出&quot;</span>);<br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 2 创建数据包对象封装数据</span><br>            <span class="hljs-comment">//参数一:封装要发送的数据 参数二:封装数据的大小 参数三:服务端的IP地址 参数四:封装数据的端口号</span><br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(msg.getBytes(), msg.getBytes().length,<br>                    InetAddress.getByName(<span class="hljs-string">&quot;255.255.255.255&quot;</span>), <span class="hljs-number">9999</span>);<span class="hljs-comment">//广播消息 地址和端口号255.255.255.255;9999</span><br><br>            <span class="hljs-comment">// 3 发送数据</span><br>            socket.send(packet);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="UDP如何实现组播"><a href="#UDP如何实现组播" class="headerlink" title="UDP如何实现组播"></a>UDP如何实现组播</h5><ul><li>使用组播地址：224.0.0.0~239.255.255.255</li><li>具体操作：<ol><li>发送端的数据包的目的地是组播IP(例如：224.0.1.1，端口：9999)</li><li>接收端必须绑定该组播IP(224.0.1.1),端口还要对应发送端的目的端口9999，这样即可接收该组播消息。</li><li>DatagramSocket的子类MulticastSocket可以在接收端绑定组播IP。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.udp4;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送端 多发 多收</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建发送端对象:发送端自带默认的端口号</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<span class="hljs-comment">//也可以自己指定端口号</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入:&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-comment">//判断输入 exit 退出</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br>                System.out.println(<span class="hljs-string">&quot;成功退出&quot;</span>);<br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 2 创建数据包对象封装数据 组播</span><br>            <span class="hljs-comment">//参数一:封装要发送的数据 参数二:封装数据的大小 参数三:服务端的IP地址 参数四:封装数据的端口号</span><br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(msg.getBytes(), msg.getBytes().length,<br>                    InetAddress.getByName(<span class="hljs-string">&quot;224.0.1.1&quot;</span>), <span class="hljs-number">9999</span>);<br><br>            <span class="hljs-comment">// 3 发送数据</span><br>            socket.send(packet);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.udp4;<br><br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接收端(服务端) 组播</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeverDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建接收端对象:注册端口</span><br>        <span class="hljs-type">MulticastSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MulticastSocket</span>(<span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">// 把当前接收端加入组播组:绑定对应的组播消息的组播IP</span><br><span class="hljs-comment">//        socket.joinGroup(InetAddress.getByName(&quot;224.0.1.1&quot;));</span><br>        socket.joinGroup(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(InetAddress.getByName(<span class="hljs-string">&quot;224.0.1.1&quot;</span>),<span class="hljs-number">9999</span>),<br>                NetworkInterface.getByInetAddress(InetAddress.getLocalHost()));<br>        <span class="hljs-comment">// 2 创建数据包对象接收数据</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">64</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 3 等待接收数据</span><br>            socket.receive(packet);<br><br>            <span class="hljs-comment">// 4 获取数据</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//获取接收数据的长度</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf,<span class="hljs-number">0</span>,len);<span class="hljs-comment">//将读取到的数字节转换成字符串</span><br>            System.out.println(<span class="hljs-string">&quot;收到来自&quot;</span>+packet.getSocketAddress()+<span class="hljs-string">&quot;:&quot;</span>+rs);<br>        &#125;<br><br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h3><h5 id="TCP协议特点"><a href="#TCP协议特点" class="headerlink" title="TCP协议特点"></a>TCP协议特点</h5><ul><li>使用TcP协议，必须双方先建立连接，它是一种面向连接的可靠通信协议。</li><li>传输前，采用“三次握手”方式建立连接，所以是可靠的。</li><li>在连接中可进行大数据量的传输。</li><li>连接、发送数据都需要确认，且传输完毕后，还需释放已建立的连接，通信效率较低。</li></ul><h5 id="TCP协议通信场景"><a href="#TCP协议通信场景" class="headerlink" title="TCP协议通信场景"></a>TCP协议通信场景</h5><ul><li>对信息安全要求较高的场景，例如：文件下载、金融等数据通信。</li></ul><h4 id="Socket-发送端"><a href="#Socket-发送端" class="headerlink" title="Socket 发送端"></a>Socket 发送端</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220722153040972.png" alt="image-20220722153040972"></p><h5 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220722153113139.png" alt="image-20220722153113139"></p><h4 id="SeverSocket-服务端"><a href="#SeverSocket-服务端" class="headerlink" title="SeverSocket 服务端"></a>SeverSocket 服务端</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220722161241479.png" alt="image-20220722161241479"></p><h5 id="成员方法-2"><a href="#成员方法-2" class="headerlink" title="成员方法"></a>成员方法</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220722161257403.png" alt="image-20220722161257403"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.socket;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 完成Socket网络编程入门案例的客户端开发 实现一收一发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;===客户端===&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1 创建Socket通信管道请求有服务端的连接</span><br>            <span class="hljs-comment">//参数一:服务端的IP地址 参数二:服务端的端口号</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">7777</span>);<br>            <span class="hljs-comment">// 2 从Socket通信管道得到一个字节输出流,负责发送数据</span><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-comment">// 3 把低级字节流包装成打印流</span><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            <span class="hljs-comment">// 4 发送消息</span><br>            ps.println(<span class="hljs-string">&quot;你好,我是客户端&quot;</span>);<br>            ps.flush();<br>            <span class="hljs-comment">// 5 关闭资源(不建议关闭)</span><br><span class="hljs-comment">//            ps.close();</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.socket;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开发Socket网络编程入门代码的服务器 实现接收消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SevreDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;===服务端===&quot;</span>);<br>            <span class="hljs-comment">// 1 注册端口</span><br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">7777</span>);<br>            <span class="hljs-comment">// 2 必须调用accept()方法 等待接收客户端的Socket连接请求,建立Socket通信管道</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            <span class="hljs-comment">// 3 从Socket通信管道得到一个字节输入流,负责接收数据</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-comment">// 4 把低级字节流包装成高级字符流(使用转换流将字节流转换成字符流)</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>            <span class="hljs-comment">// 5 按照行读取消息</span><br>            String msg;<br>            <span class="hljs-keyword">if</span> ((msg = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;说:&quot;</span> + msg);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TCP多收多发"><a href="#TCP多收多发" class="headerlink" title="TCP多收多发"></a>TCP多收多发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.socket2;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 完成Socket网络编程入门案例的客户端开发 实现多收多发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;===客户端===&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1 创建Socket通信管道请求有服务端的连接</span><br>            <span class="hljs-comment">//参数一:服务端的IP地址 参数二:服务端的端口号</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">7777</span>);<br>            <span class="hljs-comment">// 2 从Socket通信管道得到一个字节输出流,负责发送数据</span><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-comment">// 3 把低级字节流包装成打印流</span><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            <span class="hljs-comment">// 4 发送消息</span><br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-comment">//将发送消息进行循环</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请说:&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> in.nextLine();<br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//输入exit退出</span><br>                &#125;<br>                ps.println(msg);<br>                ps.flush();<br>            &#125;<br>            <span class="hljs-comment">// 5 关闭资源(不建议关闭)</span><br><span class="hljs-comment">//            ps.close();</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.socket2;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开发Socket网络编程入门代码的服务器 实现多收多发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SevreDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;===服务端===&quot;</span>);<br>            <span class="hljs-comment">// 1 注册端口</span><br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">7777</span>);<br>            <span class="hljs-comment">// 2 必须调用accept()方法 等待接收客户端的Socket连接请求,建立Socket通信管道</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            <span class="hljs-comment">// 3 从Socket通信管道得到一个字节输入流,负责接收数据</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-comment">// 4 把低级字节流包装成高级字符流(使用转换流将字节流转换成字符流)</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>            <span class="hljs-comment">// 5 按照行读取消息</span><br>            String msg;<br>            <span class="hljs-keyword">while</span> ((msg = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//将接收消息也进行循环,持续进行接收</span><br>                System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;说:&quot;</span> + msg);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h5><ul><li>客户端循环发送</li><li>服务端循环接收</li></ul><h5 id="现在还不可同时接收多个客户端的消息"><a href="#现在还不可同时接收多个客户端的消息" class="headerlink" title="现在还不可同时接收多个客户端的消息"></a>现在还不可同时接收多个客户端的消息</h5><ul><li>目前服务端是单线程,每次只能处理一个客户端的消息</li></ul><h4 id="TCP通信-同时接收多个客户的消息-重点"><a href="#TCP通信-同时接收多个客户的消息-重点" class="headerlink" title="TCP通信-同时接收多个客户的消息[重点]"></a>TCP通信-同时接收多个客户的消息<font color='red'>[重点]</font></h4><h5 id="如何可以同时接收多个客户端的消息"><a href="#如何可以同时接收多个客户端的消息" class="headerlink" title="如何可以同时接收多个客户端的消息"></a>如何可以同时接收多个客户端的消息</h5><ul><li>引入多线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//线程类</span><br><span class="hljs-keyword">package</span> com.kong.socket2;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeverReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<span class="hljs-comment">//创建Socket类型的对象</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SeverReaderThread</span><span class="hljs-params">(Socket socket)</span> &#123;<span class="hljs-comment">//有参数构造器接收socket对象</span><br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//运行任务</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 3 从Socket通信管道得到一个字节输入流,负责接收数据</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-comment">// 4 把低级字节流包装成高级字符流(使用转换流将字节流转换成字符流)</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>            <span class="hljs-comment">// 5 按照行读取消息</span><br>            String msg;<br>            <span class="hljs-keyword">while</span> ((msg = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//将接收消息也进行循环,持续进行接收</span><br>                System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;说:&quot;</span> + msg);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">//            throw new RuntimeException(e);</span><br>            System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;下线!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//发送端</span><br><span class="hljs-keyword">package</span> com.kong.socket2;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 完成Socket网络编程入门案例的客户端开发 实现多收多发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;===客户端===&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1 创建Socket通信管道请求有服务端的连接</span><br>            <span class="hljs-comment">//参数一:服务端的IP地址 参数二:服务端的端口号</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">7777</span>);<br>            <span class="hljs-comment">// 2 从Socket通信管道得到一个字节输出流,负责发送数据</span><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-comment">// 3 把低级字节流包装成打印流</span><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            <span class="hljs-comment">// 4 发送消息</span><br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-comment">//将发送消息进行循环</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请说:&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> in.nextLine();<br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//输入exit退出</span><br>                &#125;<br>                ps.println(msg);<br>                ps.flush();<br>            &#125;<br>            <span class="hljs-comment">// 5 关闭资源(不建议关闭)</span><br><span class="hljs-comment">//            ps.close();</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接收端</span><br><span class="hljs-keyword">package</span> com.kong.socket2;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现接收多个客户端的消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SevreDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;===服务端===&quot;</span>);<br>            <span class="hljs-comment">// 1 注册端口</span><br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">7777</span>);<br>            <span class="hljs-comment">// 定义一个死循环由主线程不断的接收客户端的Socket管道连接</span><br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 2 每接收到一个客户端的Socket管道,交给一个独立的子线程负责读取消息</span><br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>                System.out.println(socket.getRemoteSocketAddress()+<span class="hljs-string">&quot;上线!&quot;</span>);<br>                <span class="hljs-comment">// 3 开始创建独立线程处理Socket</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeverReaderThread</span>(socket).start();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="线程池优化"><a href="#线程池优化" class="headerlink" title="线程池优化"></a>线程池优化</h5><ul><li>上述方法会一直创建线程</li></ul><h6 id="引入线程池处理多个客户端消息"><a href="#引入线程池处理多个客户端消息" class="headerlink" title="引入线程池处理多个客户端消息"></a>引入线程池处理多个客户端消息</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//任务类</span><br><span class="hljs-keyword">package</span> com.kong.socket3;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeverReaderRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SeverReaderRunnable</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 3 从Socket通信管道得到一个字节输入流,负责接收数据</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-comment">// 4 把低级字节流包装成高级字符流(使用转换流将字节流转换成字符流)</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>            <span class="hljs-comment">// 5 按照行读取消息</span><br>            String msg;<br>            <span class="hljs-keyword">while</span> ((msg = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//将接收消息也进行循环,持续进行接收</span><br>                System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;说:&quot;</span> + msg);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">//            throw new RuntimeException(e);</span><br>            System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;下线!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.socket3;<br><br><span class="hljs-keyword">import</span> com.kong.socket2.SeverReaderThread;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现接收多个客户端的消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SevreDemo2</span> &#123;<br>    <span class="hljs-comment">// 使用静态变量记住一个线程池对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-comment">//核心任务3个，最大任务5个，等待时间6秒</span><br>            TimeUnit.SECONDS,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">2</span>), Executors.defaultThreadFactory(),<span class="hljs-comment">//队列大小2，线程工厂</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;===服务端===&quot;</span>);<br>            <span class="hljs-comment">// 1 注册端口</span><br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">6666</span>);<br>            <span class="hljs-comment">// 定义一个死循环由主线程不断的接收客户端的Socket管道连接</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 2 每接收到一个客户端的Socket管道,交给一个独立的子线程负责读取消息</span><br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>                System.out.println(socket.getRemoteSocketAddress()+<span class="hljs-string">&quot;上线!&quot;</span>);<br>                <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeverReaderRunnable</span>(socket);<span class="hljs-comment">//得到Runnable任务对象</span><br>                pool.execute(target);<span class="hljs-comment">//执行任务对象</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.socket3;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用线程池优化 实现多发多收</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;===客户端===&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1 创建Socket通信管道请求有服务端的连接</span><br>            <span class="hljs-comment">//参数一:服务端的IP地址 参数二:服务端的端口号</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6666</span>);<br>            <span class="hljs-comment">// 2 从Socket通信管道得到一个字节输出流,负责发送数据</span><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-comment">// 3 把低级字节流包装成打印流</span><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            <span class="hljs-comment">// 4 发送消息</span><br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-comment">//将发送消息进行循环</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请说:&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> in.nextLine();<br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//输入exit退出</span><br>                &#125;<br>                ps.println(msg);<br>                ps.flush();<br>            &#125;<br>            <span class="hljs-comment">// 5 关闭资源(不建议关闭)</span><br><span class="hljs-comment">//            ps.close();</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TCP通信案例-即时通信-客户端和客户端"><a href="#TCP通信案例-即时通信-客户端和客户端" class="headerlink" title="TCP通信案例-即时通信(客户端和客户端)"></a>TCP通信案例-即时通信(客户端和客户端)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.socket4;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用线程池优化 实现多发多收</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;===客户端===&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1 创建Socket通信管道请求有服务端的连接</span><br>            <span class="hljs-comment">//参数一:服务端的IP地址 参数二:服务端的端口号</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6666</span>);<br>            <span class="hljs-comment">// 创建一个独立的线程负责客户端读消息&#x27;</span><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientReaderThread</span>(socket);<br>            thread.start();<br>            <span class="hljs-comment">// 2 从Socket通信管道得到一个字节输出流,负责发送数据</span><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-comment">// 3 把低级字节流包装成打印流</span><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            <span class="hljs-comment">// 4 发送消息</span><br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-comment">//将发送消息进行循环</span><br>            <span class="hljs-comment">// ******这里将消息发出******</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请说:&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> in.nextLine();<br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br><span class="hljs-comment">//                    socket.close();//输入exit退出</span><br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//输入exit退出</span><br>                &#125;<br>                ps.println(msg);<span class="hljs-comment">//发出消息</span><br>                ps.flush();<span class="hljs-comment">//刷新缓冲区</span><br>            &#125;<br>            <span class="hljs-comment">// 5 关闭资源(不建议关闭)</span><br><span class="hljs-comment">//            ps.close();</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//单独读消息的线程类</span><br><span class="hljs-comment">//******这里是一直读取消息******</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<span class="hljs-comment">//将socket拿入类中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientReaderThread</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 3 从Socket通信管道得到一个字节输入流,负责接收数据  将socket得到的消息流取出</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-comment">// 4 把低级字节流包装成高级字符流(使用转换流将字节流转换成字符流)  将流包装</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>            <span class="hljs-comment">// 5 按照行读取消息</span><br>            String msg;<br>            <span class="hljs-keyword">while</span> ((msg = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//将接收消息也进行循环,持续进行接收</span><br>                System.out.println(<span class="hljs-string">&quot;收到消息:&quot;</span> + msg);<span class="hljs-comment">//读取消息并输出</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">//            throw new RuntimeException(e);</span><br>            System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;服务端把你踢出去了!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.socket4;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.kong.socket4.ServerDemo2.allOnlineSockets;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现接收多个客户端的消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerDemo2</span> &#123;<br>    <span class="hljs-comment">// 定义静态List集合存储当前全部在线的Socket管道</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;Socket&gt; allOnlineSockets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">//定义静态线程池</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-comment">//核心任务1个，最大任务2个，等待时间6秒</span><br>            TimeUnit.SECONDS,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>), Executors.defaultThreadFactory(),<span class="hljs-comment">//队列大小1，线程工厂</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;===服务端===&quot;</span>);<br>            <span class="hljs-comment">// 1 注册端口</span><br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">6666</span>);<br>            <span class="hljs-comment">// 定义一个死循环由主线程不断的接收客户端的Socket管道连接</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 2 每接收到一个客户端的Socket管道,交给一个独立的子线程负责读取消息</span><br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>                System.out.println(socket.getRemoteSocketAddress()+<span class="hljs-string">&quot;上线!&quot;</span>);<br>                allOnlineSockets.add(socket);<span class="hljs-comment">//管道添加进集合;上线完成</span><br>                <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReaderRunnable</span>(socket);<span class="hljs-comment">//得到Runnable任务对象</span><br>                pool.execute(target);<span class="hljs-comment">//执行任务对象</span><br><span class="hljs-comment">//                Thread thread = new Thread(target);//创建线程对象</span><br><span class="hljs-comment">//                thread.start();//启动线程</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReaderRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReaderRunnable</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 3 从Socket通信管道得到一个字节输入流,负责接收数据</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-comment">// 4 把低级字节流包装成高级字符流(使用转换流将字节流转换成字符流)</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<span class="hljs-comment">//字符缓冲输入流</span><br>            <span class="hljs-comment">// 5 按照行读取消息</span><br>            String msg;<br>            <span class="hljs-keyword">while</span> ((msg = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//将接收消息也进行循环,持续进行接收</span><br>                System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;说:&quot;</span> + msg);<br>                <span class="hljs-comment">//把收到的消息进行端口转发给全部客户端socket管道</span><br>                sendMsgToAll(msg);<span class="hljs-comment">//将功能独立方法</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">//            throw new RuntimeException(e);</span><br>            System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;下线!&quot;</span>);<br>            allOnlineSockets.remove(socket);<span class="hljs-comment">//下线完成,管道从集合中移除</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//******这里是将消息转发给全部客户端的方法******</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsgToAll</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span>(Socket socket:allOnlineSockets)&#123;<br>                <span class="hljs-comment">//如果是自己发的消息,就不要转发给自己</span><br>                <span class="hljs-keyword">if</span>(socket == <span class="hljs-built_in">this</span>.socket)&#123;<br>                    <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//跳过当前循环,直接下一次</span><br>                &#125;<br>                <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(socket.getOutputStream());<span class="hljs-comment">//将管道输出流包装成打印流</span><br>                ps.println(msg);<span class="hljs-comment">//按行输出消息</span><br>                ps.flush();<span class="hljs-comment">//刷新输出流</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现BS开发"><a href="#实现BS开发" class="headerlink" title="实现BS开发"></a>实现BS开发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.bs;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.kong.socket4.ServerDemo2.allOnlineSockets;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReaderRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReaderRunnable</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//响应消息给浏览器显示</span><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(socket.getOutputStream());<span class="hljs-comment">//打印流</span><br>            <span class="hljs-comment">//必须按照HTTP协议格式进行,否则浏览器不认识消息</span><br>            ps.println(<span class="hljs-string">&quot;HTTP/1.1 200 OK&quot;</span>);<br>            ps.println(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br>            ps.println();<span class="hljs-comment">//必须发送一个空行,表示结束头部</span><br>            <span class="hljs-comment">//响应消息给浏览器显示</span><br>            ps.println(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red;font-size:90px;&#x27;&gt;这里是服务器响应消息&lt;/span&gt;&quot;</span>);<br>            ps.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.bs;<br><br><br><span class="hljs-keyword">import</span> com.kong.socket2.ServerReaderThread;<br><br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">// bs架构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BSseverDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-comment">//核心任务1个，最大任务2个，等待时间6秒</span><br>            TimeUnit.SECONDS,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>), Executors.defaultThreadFactory(),<span class="hljs-comment">//队列大小1，线程工厂</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1 创建服务端对象:注册端口</span><br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 2 等待客户端连接</span><br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>                <span class="hljs-comment">// 3 交给线程池</span><br>                pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReaderRunnable</span>(socket));<br>            &#125;<br>            <span class="hljs-comment">// 5 关闭资源</span><br><span class="hljs-comment">//            serverSocket.close();</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul><li>单元测试就是针对最小的功能单元编写测试代码，Java程序最小的功能单元是方法，因此，单元测试就是针对Java<br>方法的测试，进而检查方法的正确性。</li></ul><h5 id="目前测试方法是怎么进行的，存在什么问题"><a href="#目前测试方法是怎么进行的，存在什么问题" class="headerlink" title="目前测试方法是怎么进行的，存在什么问题"></a>目前测试方法是怎么进行的，存在什么问题</h5><ul><li>只有一个main方法，如果一个方法的测试失败了，其他方法测试会受到影响。</li><li>无法得到测试的结果报告，需要程序员自己去观察测试是否成功。</li><li>无法实现自动化测试。</li></ul><h3 id="Junit单元测试框架"><a href="#Junit单元测试框架" class="headerlink" title="Junit单元测试框架"></a>Junit单元测试框架</h3><ul><li>Unit是使用ava语言实现的单元测试框架，它是开源的，Java开发者都应当学习并使用Unit编写单元测试。</li><li>此外，几乎所有的IDE工具都集成了Unit,这样我们就可以直接在IDE中编写并运行Unit测试，JUnit目前最新版本是5。</li></ul><h4 id="Junit优点"><a href="#Junit优点" class="headerlink" title="Junit优点"></a>Junit优点</h4><ul><li>Junit可以灵活的选择执行哪些测试方法，可以一键执行全部测试方法。</li><li>Junit可以生成全部方法的测试报告。</li><li>单元测试中的某个方法测试失败了，不会影响其他测试方法的测试。</li></ul><h3 id="单元测试快速入门"><a href="#单元测试快速入门" class="headerlink" title="单元测试快速入门"></a>单元测试快速入门</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220724200652714.png" alt="image-20220724200652714" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.junit;<br><span class="hljs-comment">//单元测试-junit框架</span><br><span class="hljs-comment">//业务方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginName</span><span class="hljs-params">(String loginName,String passWord)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(loginName) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(passWord))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;登录成功&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;登录失败&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectNames</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.junit;<br><br><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TextUserService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试方法</span><br><span class="hljs-comment">     * 注意点:</span><br><span class="hljs-comment">     * 1 必须是公开的 无参数 无返回值的</span><br><span class="hljs-comment">     * 2 测试方法必须使用<span class="hljs-doctag">@Test</span>注解标记</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//alt+enter 添加junit4</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testloginName</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//右击运行测试方法</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<span class="hljs-comment">//创建UserService对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> userService.loginName(<span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        System.out.println(loginName);<span class="hljs-comment">//这里打印的是实际结果</span><br>        <span class="hljs-comment">//进行预期结果的正确性测试:断言.assertEquals(预期结果,实际结果)预期结果必须和业务方法内容一致/登录成功/</span><br>        Assert.assertEquals(<span class="hljs-string">&quot;可能出现问题&quot;</span>, <span class="hljs-string">&quot;登录成功&quot;</span>, loginName);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//这里方法没有返回值 所以不需断言</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testselectNames</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>        userService.selectNames();<span class="hljs-comment">//直接调用方法</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JUnits单元测试的实现过程是什么样的？"><a href="#JUnits单元测试的实现过程是什么样的？" class="headerlink" title="JUnits单元测试的实现过程是什么样的？"></a>JUnits单元测试的实现过程是什么样的？</h4><ul><li>必须导入Junit框架的jar包。</li><li>定义的测试方法必须是无参数无返回值，且公开的方法。</li><li>测试方法使用@Test注解标记。</li></ul><h4 id="JUnit测试某个方法，测试全部方法怎么处理？成功的标志是什么"><a href="#JUnit测试某个方法，测试全部方法怎么处理？成功的标志是什么" class="headerlink" title="JUnit测试某个方法，测试全部方法怎么处理？成功的标志是什么"></a>JUnit测试某个方法，测试全部方法怎么处理？成功的标志是什么</h4><ul><li>测试某个方法直接右键该方法启动测试。</li><li>测试全部方法，可以选择类或者模块启动。</li><li>红色失败，绿色通过。</li></ul><h3 id="单元测试常用注解-Junit-4"><a href="#单元测试常用注解-Junit-4" class="headerlink" title="单元测试常用注解(Junit 4)"></a>单元测试常用注解(Junit 4)</h3><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220724203354933.png" alt="image-20220724203354933"></p><ul><li>开始执行的方法:初始化资源</li><li>执行完之后的方法:释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.junit;<br><br><span class="hljs-keyword">import</span> org.junit.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TextUserService</span> &#123;<br>    <span class="hljs-comment">//修饰实例方法</span><br>    <span class="hljs-meta">@Before</span> <span class="hljs-comment">//在测试方法执行前执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before执行一次&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@After</span> <span class="hljs-comment">//在测试方法执行后执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;after执行一次&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//修饰静态方法</span><br>    <span class="hljs-meta">@BeforeClass</span> <span class="hljs-comment">//在类执行前执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeClass</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;beforeClass执行一次&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterClass</span> <span class="hljs-comment">//在类执行后执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterClass</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterClass执行一次&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试方法</span><br><span class="hljs-comment">     * 注意点:</span><br><span class="hljs-comment">     * 1 必须是公开的 无参数 无返回值的</span><br><span class="hljs-comment">     * 2 测试方法必须使用<span class="hljs-doctag">@Test</span>注解标记</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//alt+enter 添加junit4</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testloginName</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//右击运行测试方法</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<span class="hljs-comment">//创建UserService对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> userService.loginName(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        System.out.println(loginName);<span class="hljs-comment">//这里打印的是实际结果</span><br>        <span class="hljs-comment">//进行预期结果的正确性测试:断言.assertEquals(预期结果,实际结果)预期结果必须和业务方法内容一致/登录成功/</span><br>        Assert.assertEquals(<span class="hljs-string">&quot;可能出现问题&quot;</span>, <span class="hljs-string">&quot;登录成功&quot;</span>, loginName);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//这里方法没有返回值 所以不需断言</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testselectNames</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>        userService.selectNames();<span class="hljs-comment">//直接调用方法</span><br>    &#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="Junit-5常用注解"><a href="#Junit-5常用注解" class="headerlink" title="Junit 5常用注解"></a>Junit 5常用注解</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220724204117159.png" alt="image-20220724204117159"></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h3><ul><li>反射是指对于任何一个Clss类，在”运行的时候”都可以直接得到这个类全部成分。</li><li>在运行时，可以直接得到这个类的构造器对象：Constructor</li><li>在运行时，可以直接得到这个类的成员变量对象：Field</li><li>在运行时，可以直接得到这个类的成员方法对象：Method</li><li>这种运行时动态获取类信息以及动态调用类中成分的能力称为va语言的反射机制。</li></ul><h4 id="反射的关键"><a href="#反射的关键" class="headerlink" title="反射的关键"></a>反射的关键</h4><ul><li>反射的第一步都是先得到编译后的Class类对象，然后就可以得到Class的全部成分。</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220724205548532.png" alt="image-20220724205548532" style="zoom:50%;" /><h3 id="反射获取对象"><a href="#反射获取对象" class="headerlink" title="反射获取对象"></a>反射获取对象</h3><h4 id="反射第一步-获取Class类的对象"><a href="#反射第一步-获取Class类的对象" class="headerlink" title="反射第一步:获取Class类的对象"></a>反射第一步:获取Class类的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反射第一步:获取Class对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 Class类中的一个静态方法 forName(全限名:包名+类名)</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.kong.reflect.Student&quot;</span>);<br>        System.out.println(c);<span class="hljs-comment">//com.kong.reflect.Student</span><br>        <span class="hljs-comment">// 2 类名.class</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Student.class;<br>        System.out.println(c2);<span class="hljs-comment">//com.kong.reflect.Student</span><br>        <span class="hljs-comment">// 3 对象.getClass() 获取对象对应类的Class对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> s.getClass();<br>        System.out.println(c3);<span class="hljs-comment">//com.kong.reflect.Student</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第二步-获得Constructor对象-构造器对象"><a href="#第二步-获得Constructor对象-构造器对象" class="headerlink" title="第二步:获得Constructor对象(构造器对象)"></a>第二步:获得Constructor对象(构造器对象)</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220724213856681.png" alt="image-20220724213856681"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br><span class="hljs-comment">//    private Student() &#123;</span><br><span class="hljs-comment">//        System.out.println(&quot;无参构造器&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造器&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;有参构造器&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_constructor;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudent</span> &#123;<br>    <span class="hljs-comment">//getConstructors获取类中全部构造器对象(public 修饰的构造器)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStudent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1 获取类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br>        <span class="hljs-comment">// 2 获取类中全部构造器对象(public 修饰的构造器)</span><br>        Constructor[] constructors = c.getConstructors();<span class="hljs-comment">//获得构造器对象数组</span><br>        <span class="hljs-comment">// 3 遍历构造器</span><br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+constructor.getParameterCount());<span class="hljs-comment">//构造器名称和参数个数</span><br>            <span class="hljs-comment">//com.kong.reflect_constructor.Student-&gt;2</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//getDeclaredConstructors获取类中全部构造器对象(包括私有和受保护的构造器)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStudent1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1 获取类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br>        <span class="hljs-comment">// 2 获取类中全部构造器对象</span><br>        Constructor[] constructors = c.getDeclaredConstructors();<span class="hljs-comment">//获得构造器对象数组</span><br>        <span class="hljs-comment">// 3 遍历构造器</span><br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+constructor.getParameterCount());<span class="hljs-comment">//构造器名称和参数个数</span><br>            <span class="hljs-comment">//com.kong.reflect_constructor.Student-&gt;0</span><br>            <span class="hljs-comment">//com.kong.reflect_constructor.Student-&gt;2</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//getConstructor(参数类型.class)获取单个构造器对象(public 修饰的构造器)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStudent2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>        <span class="hljs-comment">// 1 获取类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br>        <span class="hljs-comment">// 2 获得某个构造器对象(无参构造器 不填参数)</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getConstructor(String.class,<span class="hljs-type">int</span>.class);<span class="hljs-comment">//根据构造器参数类型 获得单个构造器对象</span><br>        System.out.println(constructor.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+constructor.getParameterCount());<span class="hljs-comment">//构造器名称和参数个数</span><br>        <span class="hljs-comment">//com.kong.reflect_constructor.Student-&gt;2</span><br>    &#125;<br>    <span class="hljs-comment">//getDeclaredConstructor(参数类型.class)获取单个构造器对象(包括私有和受保护的构造器)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStudent3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>        <span class="hljs-comment">// 1 获取类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br>        <span class="hljs-comment">// 2 获得某个构造器对象(无参构造器 不填参数)</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor();<span class="hljs-comment">//根据构造器参数类型 获得单个构造器对象</span><br>        System.out.println(constructor.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+constructor.getParameterCount());<span class="hljs-comment">//构造器名称和参数个数</span><br>        <span class="hljs-comment">//com.kong.reflect_constructor.Student-&gt;0</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第三步-创建对象"><a href="#第三步-创建对象" class="headerlink" title="第三步:创建对象"></a>第三步:创建对象</h4><h5 id="Constructor类中用于创建对象的方法"><a href="#Constructor类中用于创建对象的方法" class="headerlink" title="Constructor类中用于创建对象的方法"></a>Constructor类中用于创建对象的方法</h5><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220724222600045.png" alt="image-20220724222600045"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_constructor;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudent2</span> &#123;<br>    <span class="hljs-comment">// 1 调用构造器得到对象返回</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStudent3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1.1 获取类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br>        <span class="hljs-comment">// 1.2 获得某个构造器对象(无参构造器不填参数)</span><br>        <span class="hljs-comment">//无参</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor();<span class="hljs-comment">//根据构造器参数类型 获得单个构造器对象</span><br>        System.out.println(constructor.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+constructor.getParameterCount());<span class="hljs-comment">//构造器名称和参数个数</span><br>        <span class="hljs-comment">//com.kong.reflect_constructor.Student-&gt;0</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) constructor.newInstance();<span class="hljs-comment">//默认返回object类型,强转成已知Student类型</span><br>        System.out.println(student);<span class="hljs-comment">//Student&#123;name=&#x27;null&#x27;, age=0&#125;</span><br>        <span class="hljs-comment">//如果构造器为私有构造器(不能创建对象),可以暴力反射</span><br><span class="hljs-comment">//        constructor.setAccessible(true);//设置构造器可访问(本次有效)</span><br><span class="hljs-comment">//        Student student2 = (Student) constructor.newInstance();//默认返回object类型,强转成已知Student类型</span><br>        <span class="hljs-comment">//有参</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor2</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(String.class,<span class="hljs-type">int</span>.class);<span class="hljs-comment">//根据构造器参数类型 获得单个构造器对象</span><br>        System.out.println(constructor2.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+constructor2.getParameterCount());<span class="hljs-comment">//构造器名称和参数个数</span><br>        <span class="hljs-comment">//com.kong.reflect_constructor.Student-&gt;2</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> (Student) constructor2.newInstance(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>);<span class="hljs-comment">//默认返回object类型,强转成已知Student类型</span><br>        System.out.println(student2);<span class="hljs-comment">//Student&#123;name=&#x27;张三&#x27;, age=18&#125;</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射获取成员变量对象"><a href="#反射获取成员变量对象" class="headerlink" title="反射获取成员变量对象"></a>反射获取成员变量对象</h3><ol><li><h5 id="获得class对象"><a href="#获得class对象" class="headerlink" title="获得class对象"></a>获得class对象</h5></li><li><h5 id="获得Field对象"><a href="#获得Field对象" class="headerlink" title="获得Field对象"></a>获得Field对象</h5></li></ol><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220724230109699.png" alt="image-20220724230109699"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String schoolName;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">COUNTRY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;中国&quot;</span>;<br><br><span class="hljs-comment">//    private Student() &#123;</span><br><span class="hljs-comment">//        System.out.println(&quot;无参构造器&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造器&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;有参构造器&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_field;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FieldDemo1</span> &#123;<br>    <span class="hljs-comment">// 1 获取全部成员变量对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDeclaredFields</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// a 定位Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br>        <span class="hljs-comment">// b 定位全部成员变量(包括私有成员变量)不加Declared就只能获取public成员变量</span><br>        Field[] fields = c.getDeclaredFields();<br>        <span class="hljs-comment">// c 遍历</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field.getName() + <span class="hljs-string">&quot;-&gt;&quot;</span> + field.getType());<span class="hljs-comment">//名称和类型</span><br><span class="hljs-comment">//            name-&gt;class java.lang.String</span><br><span class="hljs-comment">//            age-&gt;int</span><br><span class="hljs-comment">//            schoolName-&gt;class java.lang.String</span><br><span class="hljs-comment">//            COUNTRY-&gt;class java.lang.String</span><br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 2 获取某个成员变量对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getField</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// a 定位Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br>        <span class="hljs-comment">// b 根据名称定位某个成员变量(包括私有成员变量)不加Declared就只能获取public成员变量</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">// c 输出</span><br>        System.out.println(field.getName() + <span class="hljs-string">&quot;-&gt;&quot;</span> + field.getType());<span class="hljs-comment">//名称和类型</span><br>        <span class="hljs-comment">//name-&gt;class java.lang.String</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><h5 id="给成员对象赋值取值"><a href="#给成员对象赋值取值" class="headerlink" title="给成员对象赋值取值"></a>给成员对象赋值取值</h5></li></ol><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220724233102696.png" alt="image-20220724233102696"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_field;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FieldDemo2</span> &#123;<br>    <span class="hljs-comment">// 获取某个成员变量对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getField</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// a 定位Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br>        <span class="hljs-comment">// b 根据名称定位某个成员变量(包括私有成员变量)不加Declared就只能获取public成员变量</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <br>        field.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//暴力反射,因为name为私有,否则无法赋值</span><br>        <br>        <span class="hljs-comment">// c 赋值</span><br>        System.out.println(field.getName() + <span class="hljs-string">&quot;-&gt;&quot;</span> + field.getType());<span class="hljs-comment">//名称和类型</span><br>        <span class="hljs-comment">//name-&gt;class java.lang.String</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<span class="hljs-comment">//创建学生对象</span><br>        field.set(student,<span class="hljs-string">&quot;小明&quot;</span>);<br>        System.out.println(student);<span class="hljs-comment">//Student&#123;name=&#x27;小明&#x27;, age=0&#125;</span><br>        <span class="hljs-comment">// d 取值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String)field.get(student);<span class="hljs-comment">//object-&gt;String</span><br>        System.out.println(name);<span class="hljs-comment">//小明</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射获取方法对象"><a href="#反射获取方法对象" class="headerlink" title="反射获取方法对象"></a>反射获取方法对象</h3><ol><li>获得class对象</li><li>获得Method对象</li></ol><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220724233447960.png" alt="image-20220724233447960"></p><p>​3.运行方法</p><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220724235441194.png" alt="image-20220724235441194"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗跑的快&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗吃骨头&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">eat</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;有参方法打印&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;狗吃&quot;</span>+name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inAddr</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;公开静态方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_method;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo1</span> &#123;<br>    <span class="hljs-comment">// 1 获得类中所有成员方法对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDeclaredMethods</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// a 获取class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Dog.class;<br>        <span class="hljs-comment">// b 提取全部方法:包括私有</span><br>        Method[] methods = c.getDeclaredMethods();<br>        <span class="hljs-comment">// c 遍历方法</span><br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method.getName()+<span class="hljs-string">&quot;返回值类型:&quot;</span>+method.getReturnType()+<span class="hljs-string">&quot;参数个数:&quot;</span>+method.getParameterCount());<br>            <span class="hljs-comment">//获取方法名和返回值类型和参数个数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 2 根据方法名提取单个方法对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDeclaredMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// a 获取class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Dog.class;<br>        <span class="hljs-comment">// b 提取单个方法:包括私有</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;eat&quot;</span>);<span class="hljs-comment">//无参方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;eat&quot;</span>,String.class);<span class="hljs-comment">//有参方法</span><br>        System.out.println(method1.getName()+<span class="hljs-string">&quot;返回值类型:&quot;</span>+method1.getReturnType()+<span class="hljs-string">&quot;参数个数:&quot;</span>+method1.getParameterCount());<br>        method.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//暴力反射 设置方法可访问 set无参是私有的方法</span><br>        <span class="hljs-comment">// c 触发方法的执行</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> method.invoke(dog);<span class="hljs-comment">//运行dog无参方法;没返回值 接的就是null</span><br>        System.out.println(o);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> method1.invoke(dog,<span class="hljs-string">&quot;有参骨头&quot;</span>);<span class="hljs-comment">//运行dog有参方法;</span><br>        System.out.println(o1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射的作用-绕过编译阶段为集合添加数据"><a href="#反射的作用-绕过编译阶段为集合添加数据" class="headerlink" title="反射的作用-绕过编译阶段为集合添加数据"></a>反射的作用-绕过编译阶段为集合添加数据</h3><ul><li>反射是作用在运行时的技术，此时集合的泛型将不能产生约束了，此时是可以为集合存入其他任意类型的元素的</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220725093230063.png" alt="image-20220725093230063" style="zoom:50%;" /><ul><li>泛型只是在编译阶段可以约束集合只能操作某种数据类型，在<font color='red'>编译成Class文件进入运行阶段</font>的时候，其真实类型都是<br>ArrayList了，泛型相当于被擦除了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_genericity;<br><br><span class="hljs-keyword">import</span> org.w3c.dom.ls.LSOutput;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//需求:反射实现泛型擦除后,加入其它类型的元素</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        ArrayList&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        System.out.println(list.getClass());<span class="hljs-comment">//class java.util.ArrayList</span><br>        System.out.println(list2.getClass());<span class="hljs-comment">//class java.util.ArrayList</span><br>        <span class="hljs-comment">//可以得到 两个集合的Class文件相同</span><br>        System.out.println(list.getClass() == list2.getClass());<span class="hljs-comment">//true</span><br>        list2.add(<span class="hljs-number">11</span>);<br>        list2.add(<span class="hljs-number">22</span>);<br><span class="hljs-comment">//        list2.add(&quot;一&quot;);</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> list2.getClass();<br>        <span class="hljs-comment">//定位c类中的add方法 原方法 public boolean add(E e) 所以参数类型为Object</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;add&quot;</span>,Object.class);<br><span class="hljs-comment">//        往集合里添加字符串</span><br>        add.invoke(list2,<span class="hljs-string">&quot;一&quot;</span>);<br>        System.out.println(list2);<span class="hljs-comment">//[11, 22, 一]</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射的作用-通用框架的底层原理"><a href="#反射的作用-通用框架的底层原理" class="headerlink" title="反射的作用-通用框架的底层原理"></a>反射的作用-通用框架的底层原理</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul><li>给你任意一个对象，在不清楚对象字段的情况可以，可以把对象的字段名称和对应值存储到文件中去</li></ul><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><ul><li>定义一个方法，可以接收任意类的对象。</li><li>每次收到一个对象后，需要解析这个对象的全部成员变量咎称。</li><li>这个对象可能是任意的，那么怎么样才可以知道这个对象的全部成员变量名称呢？</li><li>使用反射获取对象的Class类对象，然后获取全部成员变量信息。</li><li>遍历成员变量信息，然后提取本成员变量在对象中的具体值</li><li>存入成员变量名称和值到文件中去即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_framework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">char</span> sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(<span class="hljs-type">char</span> sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_framework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(<span class="hljs-type">char</span> sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">char</span> sex, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_framework;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.FilterOutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存任意类型的变量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span><span class="hljs-comment">//打印流(连续写);放在try()自动释放资源</span><br>                (<span class="hljs-string">&quot;junit-reflect-annotation-proxy-app/src/com/kong/reflect_framework/data.txt&quot;</span>, <span class="hljs-literal">true</span>));) &#123;<br>            <span class="hljs-comment">// 1 提取这个对象的全部成员变量(反射)</span><br>            <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> obj.getClass();<br>            ps.println(<span class="hljs-string">&quot;===========&quot;</span>+c.getSimpleName()+<span class="hljs-string">&quot;===========&quot;</span>);<span class="hljs-comment">//获取类名 getName 全限名(包名+类名)</span><br>            <span class="hljs-comment">// 2 提取全部成员变量</span><br>            Field[] fields = c.getDeclaredFields();<br>            <span class="hljs-comment">// 3 获取成员变量的信息</span><br>            <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> field.getName();<span class="hljs-comment">//获取成员变量名</span><br>                <span class="hljs-comment">//提取本成员变量在obj对象中的值(取值)</span><br>                field.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//暴力反射</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> field.get(obj) + <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//最终都会记录到文件,所以用String接,不能强转是整数会报错,所以直接拼接空字符串</span><br>                ps.println(name + <span class="hljs-string">&quot;=&quot;</span> + value);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.reflect_framework;<br><br><span class="hljs-keyword">import</span> com.kong.reflect.Test;<br><br><span class="hljs-comment">// 目标:提供一个通用框架 支持保存所有对象的具体信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        student.setAge(<span class="hljs-number">18</span>);<br>        student.setSex(<span class="hljs-string">&#x27;男&#x27;</span>);<br>        MybatisUtil.save(student);<br><br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        teacher.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>        teacher.setAge(<span class="hljs-number">20</span>);<br>        teacher.setSex(<span class="hljs-string">&#x27;男&#x27;</span>);<br>        teacher.setSalary(<span class="hljs-number">10000.0</span>);<br>        MybatisUtil.save(teacher);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf">data.txt 内容<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>Student<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">name</span><span class="hljs-operator">=</span>张三<br><span class="hljs-attribute">age</span><span class="hljs-operator">=</span><span class="hljs-number">18</span><br><span class="hljs-attribute">sex</span><span class="hljs-operator">=</span>男<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>Teacher<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">name</span><span class="hljs-operator">=</span>李四<br><span class="hljs-attribute">age</span><span class="hljs-operator">=</span><span class="hljs-number">20</span><br><span class="hljs-attribute">sex</span><span class="hljs-operator">=</span>男<br><span class="hljs-attribute">salary</span><span class="hljs-operator">=</span><span class="hljs-number">10000.0</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="注解概述"><a href="#注解概述" class="headerlink" title="注解概述"></a>注解概述</h3><ul><li>Java注解(Annotation)又称Java标注，是JDK5.0引入的一种注释机制。</li><li>Jva语言中的类、构造器、方法、成员变量、参数等都可以被注解进行标注。</li></ul><h4 id="注解的作用是什么呢？"><a href="#注解的作用是什么呢？" class="headerlink" title="注解的作用是什么呢？"></a>注解的作用是什么呢？</h4><ul><li>对Java中类、方法、成员变量做标记，然后进行特殊处理，至于到底做何种处理由业务需求来决定。</li><li>例如：JUnit框架中，标记了注解@Test的方法就可以被当成测试方法执行，而没有标记的就不能当成测<br>试方法执行。</li></ul><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><h4 id="自定义注解—格式"><a href="#自定义注解—格式" class="headerlink" title="自定义注解—格式"></a>自定义注解—格式</h4><ul><li>自定义注解就是自己做一个注解来使用。</li></ul> <img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220725134947911.png" alt="image-20220725134947911" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.annotation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyBook &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">()</span>;<span class="hljs-comment">//默认公开</span><br>    String[] authors();<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">price</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.annotation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Book &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<span class="hljs-comment">//特殊属性 必须叫value,且只有一个或者其他属性有默认值时可以不写</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;java&quot;</span>;<span class="hljs-comment">//有默认值</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.annotation;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *目标:学会自定义注解 掌握定义格式和语法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@MyBook(name=&quot;设计模式&quot;,authors=&#123;&quot;kong&quot;,&quot;作者2&quot;&#125;,price=100.0)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationDemo1</span> &#123;<br>    <span class="hljs-meta">@MyBook(name=&quot;设计模式&quot;,authors=&#123;&quot;kong&quot;,&quot;作者2&quot;&#125;,price=100.0)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@MyBook(name=&quot;设计模式&quot;,authors=&#123;&quot;kong&quot;,&quot;作者2&quot;&#125;,price=100.0)</span></span><br><span class="hljs-params">            String[] args)</span> &#123;<br>        <span class="hljs-comment">//注解可以在跟多地方</span><br><br>    &#125;<br>    <span class="hljs-meta">@Book(&quot;dsadas&quot;)</span><span class="hljs-comment">//只有一个属性 且只有一个或者其他属性有默认值时value可以不写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><ul><li>就是注解注解的注解</li></ul><h4 id="常见的有两个"><a href="#常见的有两个" class="headerlink" title="常见的有两个"></a>常见的有两个</h4><ul><li>@Target:约束自定义注解只能在哪些地方使用，</li><li>@Retention:申明注解的生命周期</li></ul><h4 id="Target中可使用的值定义在ElementType枚举类中，常用值如下"><a href="#Target中可使用的值定义在ElementType枚举类中，常用值如下" class="headerlink" title="@Target中可使用的值定义在ElementType枚举类中，常用值如下"></a>@Target中可使用的值定义在ElementType枚举类中，常用值如下</h4><blockquote><p>TYPE,类，接口<br>FIELD,成员变量<br>METHOD,成员方法<br>PARAMETER,方法参数<br>CONSTRUCTOR,构造器<br>LOCAL_VARIABLE,局部变量</p></blockquote><h4 id="Retention中可使用的值定义在RetentionPolicy枚举类中，常用值如下"><a href="#Retention中可使用的值定义在RetentionPolicy枚举类中，常用值如下" class="headerlink" title="@Retention中可使用的值定义在RetentionPolicy枚举类中，常用值如下"></a>@Retention中可使用的值定义在RetentionPolicy枚举类中，常用值如下</h4><blockquote><p>SOURCE:注解只作用在源码阶段，生成的字节码文件中不存在<br>CLASS:注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值。<br>RUNTIME：注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD,ElementType.FIELD&#125;)</span><span class="hljs-comment">//元注解 方法,变量</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-comment">//一直存活,在运行阶段也不消失</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Mytest &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.annotation;<br><span class="hljs-comment">//@Mytest //只能注解方法和成员变量了</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationDemo2</span> &#123;<br>    <span class="hljs-meta">@Mytest</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-meta">@Mytest</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解解析"><a href="#注解解析" class="headerlink" title="注解解析"></a>注解解析</h3><ul><li>注解的操作中经常需要进行解析，注解的解析就是判断是否存在注解，存在注解就解析出内容。</li></ul><h4 id="与注解解析相关的接口"><a href="#与注解解析相关的接口" class="headerlink" title="与注解解析相关的接口"></a>与注解解析相关的接口</h4><ul><li>Annotation:注解的顶级接口，注解都是Annotation类型的对象</li><li>AnnotatedElement:该接口定义了与注解解析相关的解析方法</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220725144104214.png" alt="image-20220725144104214"></p><ul><li>所有的类成分Clas,Method,Field,Constructor,.都实现了AnnotatedElement接口他们都拥有解析注解的能力：</li></ul><h4 id="解析注解的技巧"><a href="#解析注解的技巧" class="headerlink" title="解析注解的技巧"></a>解析注解的技巧</h4><ul><li>注解在哪个成分上，我们就先拿哪个成分对象。</li><li>比如注解作用成员方法，则要获得该成员方法对应的Method对象，再来拿上面的注解</li><li>比如注解作用在类上，则要该类的Class对象，再来拿上面的注解</li><li>比如注解作用在成员变量上，则要获得该成员变量对应的Fild对象，再来拿上面的注解</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220725144723510.png" alt="image-20220725144723510" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> NewBook &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">price</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">100</span>;<br>    String[] authors();<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.annotation;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Annotation;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationDemo3</span> &#123;<br>    <span class="hljs-comment">//判断类的注解是否存在</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseClass</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// a 先得到类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> BookStore.class;<br>        <span class="hljs-comment">// b 判断这个类上面是否存在这个注解</span><br>        <span class="hljs-keyword">if</span>(c.isAnnotationPresent(NewBook.class))&#123;<br>            <span class="hljs-comment">// c 得到这个注解对象</span><br>            <span class="hljs-type">NewBook</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> (NewBook) c.getDeclaredAnnotation(NewBook.class);<br>            <span class="hljs-comment">// d 输出注解的属性</span><br>            System.out.println(book.value());<br>            System.out.println(book.price());<br>            System.out.println(Arrays.toString(book.authors()));<span class="hljs-comment">//authors()是一个数组，所以需要转换成字符串</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//判断方法的注解是否存在</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>        <span class="hljs-comment">// a 先得到类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> BookStore.class;<br>        <span class="hljs-comment">// b 得到方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-comment">// c 判断这个方法上面是否存在这个注解</span><br>        <span class="hljs-keyword">if</span>(m.isAnnotationPresent(NewBook.class))&#123;<br>            <span class="hljs-comment">// d 得到这个注解对象</span><br>            <span class="hljs-type">NewBook</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> (NewBook) m.getDeclaredAnnotation(NewBook.class);<br>            <span class="hljs-comment">// e 输出注解的属性</span><br>            System.out.println(book.value());<br>            System.out.println(book.price());<br>            System.out.println(Arrays.toString(book.authors()));<span class="hljs-comment">//authors()是一个数组，所以需要转换成字符串</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@NewBook(value = &quot;java&quot;, price = 99.9, authors = &#123;&quot;zhangsan&quot;, &quot;lisi&quot;&#125;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookStore</span> &#123;<br>    <span class="hljs-meta">@NewBook(value = &quot;java1&quot;, price = 199.9, authors = &#123;&quot;zhang&quot;, &quot;lisi1&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解的应用场景之一-模拟Junit框架"><a href="#注解的应用场景之一-模拟Junit框架" class="headerlink" title="注解的应用场景之一   模拟Junit框架"></a>注解的应用场景之一   模拟Junit框架</h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h4><ul><li>定义若干个方法，只要加了MyTest注解，就可以在启动时被触发执行</li></ul><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><ul><li>定义一个自定义注解MyTest,只能注解方法，存活范围是一直都在。</li><li>定义若干个方法，只要有@MyTest注解的方法就能在启动时被触发执行，没有这个注解的方法不能执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><span class="hljs-comment">//元注解 方法</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-comment">//一直存活,在运行阶段也不消失</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationDmo4</span> &#123;<br>    <span class="hljs-meta">@MyTest</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====test1=====&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====test2=====&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@MyTest</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====test3=====&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动菜单:有注解才被调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 获得Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> AnnotationDmo4.class;<br><span class="hljs-comment">//        Constructor constructor = c.getDeclaredConstructor();</span><br>        <span class="hljs-comment">// 2 获得方法对象</span><br>        Method[] methods = c.getDeclaredMethods();<br>        <span class="hljs-comment">// 3 遍历方法,看是否有Mytest注解</span><br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            <span class="hljs-keyword">if</span> (method.isAnnotationPresent(MyTest.class)) &#123;<span class="hljs-comment">//判断是否有Mytest注解</span><br>                <span class="hljs-comment">// 4 调用方法</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    method.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationDmo4</span>());<span class="hljs-comment">//运行方法</span><br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;test1&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;test3&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p></blockquote><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="动态代理概述"><a href="#动态代理概述" class="headerlink" title="动态代理概述"></a>动态代理概述</h3><ul><li>代理指：某些场景下对象会找一个代理对象，来辅助自己完成一些工作，如：歌星（经济人），买房的人（房产中介）。</li></ul><h4 id="如何创建代理对象"><a href="#如何创建代理对象" class="headerlink" title="如何创建代理对象"></a>如何创建代理对象</h4><ul><li>Java中代理的代表类是：java.lang.reflect.Proxy.</li><li>Proxy提供了一个静态方法，用于为对象产生一个代理对象返回。</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220725160721754.png" alt="image-20220725160721754"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.proxy;<br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Skill</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">jump</span><span class="hljs-params">()</span>;<span class="hljs-comment">//跳舞</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span>;<span class="hljs-comment">//唱歌</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.proxy;<br><span class="hljs-comment">//接口的实现类(重写接口方法)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Star</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Skill</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Star</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jump</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name+<span class="hljs-string">&quot;开始跳舞&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name+<span class="hljs-string">&quot;开始唱歌&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.proxy;<br><span class="hljs-comment">//代理对象</span><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StarAgentProxy</span> &#123;<br>    <span class="hljs-comment">// 设计一个方法来返回明星对象的代理对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Skill <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Star star)</span> &#123;<br>        <span class="hljs-comment">// 创建一个代理对象</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         public static Object newProxyInstance(ClassLoader loader,</span><br><span class="hljs-comment">                             Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-comment">                             InvocationHandler h)</span><br><span class="hljs-comment">         参数一 :类加载器 参数二: 接口数组 参数三: 实现接口的方法的代理对象</span><br><span class="hljs-comment">         */</span><span class="hljs-comment">//这里只有一个接口Skill所以强转 多个接口时为Object[] 用Object[]接收</span><br>        <span class="hljs-keyword">return</span> (Skill) Proxy.newProxyInstance(star.getClass().getClassLoader(), star.getClass().getInterfaces(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                System.out.println(<span class="hljs-string">&quot;代理对象开始执行&quot;</span>);<br>                <span class="hljs-comment">//真正对象开始执行方法</span><br>                <span class="hljs-comment">//method正在调用的方法对象 args参数数组</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> method.invoke(star, args);<br>                System.out.println(<span class="hljs-string">&quot;代理对象执行完毕&quot;</span>);<br>                <span class="hljs-keyword">return</span> rs;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标:学习开发出一个动态代理对象出来,理解动态代理的执行流程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1 创建一个对象(杨超越),类必须实现接口.</span><br>        <span class="hljs-type">Star</span> <span class="hljs-variable">star</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&quot;杨超越&quot;</span>);<br>        <span class="hljs-comment">// 2 创建一个代理对象(代理对象是动态的),类必须实现接口.</span><br>        <span class="hljs-type">Skill</span> <span class="hljs-variable">skill</span> <span class="hljs-operator">=</span> StarAgentProxy.getProxy(star);<br>        skill.jump();<br>        skill.sing();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>代理对象开始执行<br>杨超越开始跳舞<br>代理对象执行完毕<br>代理对象开始执行<br>杨超越开始唱歌<br>代理对象执行完毕</p></blockquote><h3 id="动态代理的应用案例-做性能分析-代理的好处小结"><a href="#动态代理的应用案例-做性能分析-代理的好处小结" class="headerlink" title="动态代理的应用案例 : 做性能分析 代理的好处小结"></a>动态代理的应用案例 : 做性能分析 代理的好处小结</h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220725162436338.png" alt="image-20220725162436338" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.proxy2;<br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    String <span class="hljs-title function_">login</span><span class="hljs-params">(String loginName,String password)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUsers</span><span class="hljs-params">()</span>;<br>    String <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.proxy2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String loginName, String password)</span> &#123;<br><span class="hljs-comment">//        long startTime = System.currentTimeMillis();</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;错误&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(loginName)&amp;&amp;<span class="hljs-string">&quot;123456&quot;</span>.equals(password))&#123;<br>            rs = <span class="hljs-string">&quot;登录成功&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><span class="hljs-comment">//        long endTime = System.currentTimeMillis();</span><br><span class="hljs-comment">//        System.out.println(&quot;login方法耗时&quot;+(endTime-startTime)/1000.0+&quot;s&quot;);</span><br>        <span class="hljs-keyword">return</span> rs;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUsers</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        long startTime = System.currentTimeMillis();</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;正在删除...&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">2500</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><span class="hljs-comment">//        long endTime = System.currentTimeMillis();</span><br><span class="hljs-comment">//        System.out.println(&quot;deleteUsers方法耗时&quot;+(endTime-startTime)/1000.0+&quot;s&quot;);</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        long startTime = System.currentTimeMillis();</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;查询数据&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><span class="hljs-comment">//        long endTime = System.currentTimeMillis();</span><br><span class="hljs-comment">//        System.out.println(&quot;deleteUsers方法耗时&quot;+(endTime-startTime)/1000.0+&quot;s&quot;);</span><br>        <span class="hljs-keyword">return</span> rs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.proxy2;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyUtil</span> &#123;<br>    <span class="hljs-comment">//代理对象</span><br>   <span class="hljs-comment">//public static UserService getProxy(UserService obj)&#123;</span><br>       <span class="hljs-comment">//return (UserService) Proxy.newProxyInstance(obj.getClass().getClassLoader(),                                       </span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getProxy</span><span class="hljs-params">(T obj)</span>&#123;<span class="hljs-comment">//泛型就可以支持任意接口的实现类做代理</span><br>       <span class="hljs-keyword">return</span> (T) Proxy.newProxyInstance(obj.getClass().getClassLoader(),<br>               obj.getClass().getInterfaces(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>           <span class="hljs-meta">@Override</span><span class="hljs-comment">//这里重写 invoke方法</span><br>           <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>               <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<span class="hljs-comment">//开始时间</span><br>               <span class="hljs-comment">//真正触发执行的方法 args 参数数组(如果方法有参数)</span><br>               <span class="hljs-type">Object</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<span class="hljs-comment">//运行对应方法</span><br>               <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<span class="hljs-comment">//结束时间</span><br>               System.out.println(method.getName()+<span class="hljs-string">&quot;方法耗时:&quot;</span>+(endTime-startTime)/<span class="hljs-number">1000.0</span>+<span class="hljs-string">&quot;s&quot;</span>);<br>               <span class="hljs-keyword">return</span> rs;<br>           &#125;<br>       &#125;);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.proxy2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 掌握使用动态代理的解决问题 理解使用动态代理的优势</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建代理对象</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> ProxyUtil.getProxy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>());<br>        System.out.println(userService.login(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<br>        userService.deleteUsers();<br>        System.out.println(userService.selectUser());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>login方法耗时:1.008s<br>登录成功<br>正在删除…<br>deleteUsers方法耗时:2.501s<br>selectUser方法耗时:3.015s<br>查询数据</p></blockquote><h4 id="动态代理的优点"><a href="#动态代理的优点" class="headerlink" title="动态代理的优点"></a><font color='red'>动态代理的优点</font></h4><ul><li>可以在不改变方法源码的情况下，实现对方法功能的增强，提高了代码的复用。</li><li>简化了编程工作、提高了开发效率，同时提高了软件系统的可扩展性，。</li><li>可以为被代理对象的所有方法做代理。</li><li>非常的灵活，支持任意接口类型的实现类对象做代理，也可以直接为接本身做代理。</li></ul><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><ul><li>XML是可扩展标记语言(EXtensible Markup Language)的缩写，它是是一种数据表示格式，可以描述非常复杂的数据结构,常用于传输和存储数据</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726090131309.png" alt="image-20220726090131309" style="zoom:50%;" /><h4 id="XML的几个特点和使用场景"><a href="#XML的几个特点和使用场景" class="headerlink" title="XML的几个特点和使用场景"></a>XML的几个特点和使用场景</h4><ul><li>一是纯文本，默认使用UTF-8编码；二是可嵌套；</li><li>如果把XML内容存为文件，那么它就是一个XML文件。</li><li>XML的使用场景：XML内容经常被当成消息进行网络传输，或者作为配置文件用于存储系统的信息。</li></ul><h3 id="创建、语法规则"><a href="#创建、语法规则" class="headerlink" title="创建、语法规则"></a>创建、语法规则</h3><h4 id="XML的创建"><a href="#XML的创建" class="headerlink" title="XML的创建"></a>XML的创建</h4><ul><li>就是创建一个XML类型的文件，要求文件的后缀必须使用xml,如hello_world.xml</li></ul><h4 id="IDEA创建XML"><a href="#IDEA创建XML" class="headerlink" title="IDEA创建XML"></a>IDEA创建XML</h4><ul><li>新建File为XML格式即可</li></ul><h4 id="XML的语法规则"><a href="#XML的语法规则" class="headerlink" title="XML的语法规则"></a>XML的语法规则</h4><ul><li>XML文件的后缀名为：xml</li><li>文档声明必须是第一行</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726092613065.png" alt="image-20220726092613065" style="zoom:50%;" /><h5 id="XML的标签（元素）规则"><a href="#XML的标签（元素）规则" class="headerlink" title="XML的标签（元素）规则"></a>XML的标签（元素）规则</h5><ul><li>标签由一对尖括号和合法标识符组成：<name></name>,<font color='red'>必须存在一个根标签，有且只能有一个</font>。</li><li>标签必须成对出现，有开始，有结束：<name></name></li><li>特殊的标签可以不成对，但是必须有结束标记，如：<br/></li><li>标签中可以定义属性，属性和标签名空格隔开，属性值必须用引号引起来<student id="1"></student></li><li>标签需要正确的嵌套</li></ul><h5 id="XML的其他组成"><a href="#XML的其他组成" class="headerlink" title="XML的其他组成"></a>XML的其他组成</h5><ul><li>XML文件中可以定义注释信息：&lt;！–注释内容–&gt;</li><li>XML文件中可以存在以下特殊字符</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726094352807.png" alt="image-20220726094352807" style="zoom:50%;" /><ul><li>XML文件中可以存在CDATA区：<![CDATA[内容]]></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!--注释:这是一行注释--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>kong<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">info</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">addr</span>&gt;</span>地址<span class="hljs-tag">&lt;/<span class="hljs-name">addr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">info</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span>&gt;</span><br>        select * from user where age <span class="hljs-symbol">&amp;lt;</span> 11 <span class="hljs-comment">&lt;!--这里就是 &lt;11 --&gt;</span><br>        <span class="hljs-comment">&lt;!--也可以这样写,里面可以不受限制--&gt;</span><br>        &lt;![CDATA[<br>            select * from user where age &lt; 11<br>        ]]&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="XMl文档约束"><a href="#XMl文档约束" class="headerlink" title="XMl文档约束"></a>XMl文档约束</h3><ul><li>文档约束：是用来限定xml文件中的标签以及属性应该怎么写。</li><li>以此强制约束程序员必须按照文档约束的规定来编写xml文件。</li></ul><h5 id="文档约束分类"><a href="#文档约束分类" class="headerlink" title="文档约束分类"></a>文档约束分类</h5><ul><li>DTD</li><li>schema</li></ul><h4 id="XML文档约束-DTD的使用（了解）"><a href="#XML文档约束-DTD的使用（了解）" class="headerlink" title="XML文档约束-DTD的使用（了解）"></a>XML文档约束-DTD的使用（了解）</h4><h5 id="需求：利用DTD文档约束，约束一个XML文件的编写。"><a href="#需求：利用DTD文档约束，约束一个XML文件的编写。" class="headerlink" title="需求：利用DTD文档约束，约束一个XML文件的编写。"></a>需求：利用DTD文档约束，约束一个XML文件的编写。</h5><p>分析：</p><ol><li>编写DTD约束文档，后缀必须是.dtd</li></ol><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726095646838.png" alt="image-20220726095646838" style="zoom:50%;" /><ol start="2"><li>在需要编写的XML文件中导入该DTD约束文档</li><li>按照约束的规定编写XML文件的内容。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE 书架 <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;data.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 这里就是导入约束文件 --&gt;</span><br>&lt;书架&gt;<br>    &lt;书&gt;<br>        &lt;名称&gt;书名&lt;/名称&gt;<br>        &lt;作者&gt;作者&lt;/作者&gt;<br>        &lt;价格&gt;售价&lt;/价格&gt;<br>    &lt;/书&gt;<br>&lt;/书架&gt;<br></code></pre></td></tr></table></figure><h4 id="文档约束-schema"><a href="#文档约束-schema" class="headerlink" title="文档约束-schema"></a>文档约束-schema</h4><ul><li>schema可以约束具体的数据类型，约束能力上更强大。</li><li>schema本身也是一个xml文件，本身也受到其他约束文件的要求，所以编写的更加严谨</li></ul><h4 id="XML文档约束-schema的使用（了解）"><a href="#XML文档约束-schema的使用（了解）" class="headerlink" title="XML文档约束-schema的使用（了解）"></a>XML文档约束-schema的使用（了解）</h4><h5 id="需求：利用schema文档约束，约束一个XML文件的编写。"><a href="#需求：利用schema文档约束，约束一个XML文件的编写。" class="headerlink" title="需求：利用schema文档约束，约束一个XML文件的编写。"></a>需求：利用schema文档约束，约束一个XML文件的编写。</h5><p>分析：</p><ol><li>编写schema约束文档，后缀必须是.xsd,具体的形式到代码中观看。</li><li>在需要编写的XML文件中导入该schema约束文档</li><li>按照约束内容编写XML文件的标签。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--xsd文件--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">targetNamespace</span>=<span class="hljs-string">&quot;http://www.itcast.cn&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">elementFormDefault</span>=<span class="hljs-string">&quot;qualified&quot;</span> &gt;</span><br>    <span class="hljs-comment">&lt;!-- targetNamespace:申明约束文档的地址（命名空间）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;书架&#x27;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 写子元素 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">complexType</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- maxOccurs=&#x27;unbounded&#x27;: 书架下的子元素可以有任意多个！--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">sequence</span> <span class="hljs-attr">maxOccurs</span>=<span class="hljs-string">&#x27;unbounded&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;书&#x27;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 写子元素 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">complexType</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">sequence</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;书名&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;作者&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;售价&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;double&#x27;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">sequence</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">complexType</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">element</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">sequence</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">complexType</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">element</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br>&lt;书架 xmlns=&quot;http://www.itcast.cn&quot;<br>    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>    xsi:schemaLocation=&quot;http://www.itcast.cn data.xsd&quot;&gt;<br>    &lt;书&gt;<br>        &lt;书名&gt;神雕侠侣&lt;/书名&gt;<br>        &lt;作者&gt;金庸&lt;/作者&gt;<br>        &lt;售价&gt;122.2&lt;/售价&gt;<span class="hljs-comment">&lt;!-- 售价是double类型 --&gt;</span><br>    &lt;/书&gt;<br>&lt;/书架&gt;<br></code></pre></td></tr></table></figure><h2 id="XML解析技术"><a href="#XML解析技术" class="headerlink" title="XML解析技术"></a>XML解析技术</h2><ul><li>使用程序读取XML中的数据</li></ul><h4 id="两种解析方式"><a href="#两种解析方式" class="headerlink" title="两种解析方式"></a>两种解析方式</h4><ul><li>SAX解析</li><li>DOM解析</li></ul><h4 id="Dom常见的解析工具"><a href="#Dom常见的解析工具" class="headerlink" title="Dom常见的解析工具"></a>Dom常见的解析工具</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726103612560.png" alt="image-20220726103612560"></p><h4 id="DOM-dom4j-解析解析文档对象模型"><a href="#DOM-dom4j-解析解析文档对象模型" class="headerlink" title="DOM(dom4j)解析解析文档对象模型"></a>DOM(dom4j)解析解析文档对象模型</h4><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726103950406.png" alt="image-20220726103950406"></p><ul><li>Documenti对象：整个xml文档</li><li>Element对象：标签</li><li>Attribute对象：属性</li><li>Text对象：文本内容</li></ul><h4 id="使用Dom4j解析XML文件"><a href="#使用Dom4j解析XML文件" class="headerlink" title="使用Dom4j解析XML文件"></a>使用Dom4j解析XML文件</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726104956386.png" alt="image-20220726104956386" style="zoom:50%;" /><h5 id="Dom4j解析XML-得到Document文档对象"><a href="#Dom4j解析XML-得到Document文档对象" class="headerlink" title="Dom4j解析XML-得到Document文档对象"></a>Dom4j解析XML-得到Document文档对象</h5><ul><li>SAXReader类</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726131734197.png" alt="image-20220726131734197"></p><ul><li>Document类</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726131755816.png" alt="image-20220726131755816"></p><ul><li>Dom4j解析XML的元素、属性、文本</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726141338704.png" alt="image-20220726141338704"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.dom4j;<br><br><span class="hljs-keyword">import</span> jdk.jfr.StackTrace;<br><span class="hljs-keyword">import</span> org.dom4j.Attribute;<br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> javax.xml.parsers.SAXParser;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学会使用dom4j解析xml文件中的数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dom4jDemo</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseXMLData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 创建Dom4j的解析器对象,代表整个dom4j框架</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">// 2 把XML文件加载到内存中成为一个Document文档对象</span><br><span class="hljs-comment">//        Document document = saxReader.read(new File(&quot;XML/src/Contacts.xml&quot;));//需要通过模块名去定位</span><br>        <span class="hljs-comment">//class提供的方法 ;getResourceAsStream /是直接去src下寻找文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Dom4jDemo.class.getResourceAsStream(<span class="hljs-string">&quot;/Contacts.xml&quot;</span>);<span class="hljs-comment">//输入流管道</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(inputStream);<br>        <span class="hljs-comment">// 3 获取根元素对象</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> document.getRootElement();<br>        System.out.println(root.getName());<br>        <span class="hljs-comment">// 4 拿根元素下全部子元素对象(一级子元素)</span><br><span class="hljs-comment">//        List&lt;Element&gt; sonEles = root.elements(&quot;contact&quot;);//根据名称拿一级所有的contact子元素</span><br>        List&lt;Element&gt; sonEles = root.elements();<br>        <span class="hljs-keyword">for</span> (Element sonEle : sonEles) &#123;<br>            System.out.println(sonEle.getName());<br>        &#125;<br>        <span class="hljs-comment">// 拿某个子元素</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">userEle</span> <span class="hljs-operator">=</span> root.element(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(userEle.getName());<br>        <span class="hljs-comment">// 默认取第一个子元素对象</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> root.element(<span class="hljs-string">&quot;contact&quot;</span>);<br>        <span class="hljs-comment">// 获取子元素文本</span><br><span class="hljs-comment">//        System.out.println(contact.element(&quot;name&quot;).getText());//name的文本</span><br>        System.out.println(contact.elementText(<span class="hljs-string">&quot;name&quot;</span>));<span class="hljs-comment">//name的文本 同上 /   潘金莲  /</span><br>        System.out.println(contact.elementTextTrim(<span class="hljs-string">&quot;name&quot;</span>));<span class="hljs-comment">//Trim去掉前后空格 /潘金莲/</span><br>        <span class="hljs-comment">// 根据元素获取属性值</span><br>        <span class="hljs-type">Attribute</span> <span class="hljs-variable">idAttr</span> <span class="hljs-operator">=</span> contact.attribute(<span class="hljs-string">&quot;id&quot;</span>);<br>        System.out.println(idAttr.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+idAttr.getValue());<span class="hljs-comment">//id-&gt;1</span><br>        <span class="hljs-comment">// 直接提取属性值</span><br>        System.out.println(contact.attributeValue(<span class="hljs-string">&quot;id&quot;</span>));<span class="hljs-comment">//1</span><br>        System.out.println(contact.attributeValue(<span class="hljs-string">&quot;vip&quot;</span>));<span class="hljs-comment">//true</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="XML解析案例"><a href="#XML解析案例" class="headerlink" title="XML解析案例"></a>XML解析案例</h3><h5 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h5><ul><li>利用Dom4的知识，将Contact..xml文件中的联系人数据封装成List集合，其中每个元素是实体类Contact。打印输出List中的每个元素。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">contactList</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contact</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">vip</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>   潘金莲  <span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>panpan@itcast.cn<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">contact</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contact</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">vip</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>武松<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>wusong@itcast.cn<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">contact</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contact</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">vip</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>武大狼<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>wuda@itcast.cn<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">contact</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">contactList</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.dom4j;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&lt;contact id=&quot;1&quot; vip=&quot;true&quot;&gt;</span><br><span class="hljs-comment">&lt;name&gt;   潘金莲  &lt;/name&gt;</span><br><span class="hljs-comment">&lt;gender&gt;女&lt;/gender&gt;</span><br><span class="hljs-comment">&lt;email&gt;panpan@itcast.cn&lt;/email&gt;</span><br><span class="hljs-comment">&lt;/contact&gt;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contact</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> vip;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender;<br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Contact</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Contact</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> id, <span class="hljs-type">boolean</span> vip, <span class="hljs-type">char</span> gender, String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.vip = vip;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isVip</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> vip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVip</span><span class="hljs-params">(<span class="hljs-type">boolean</span> vip)</span> &#123;<br>        <span class="hljs-built_in">this</span>.vip = vip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(<span class="hljs-type">char</span> gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Contact&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, vip=&quot;</span> + vip +<br>                <span class="hljs-string">&quot;, gender=&quot;</span> + gender +<br>                <span class="hljs-string">&quot;, email=&#x27;&quot;</span> + email + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.dom4j;<br><br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> javax.xml.parsers.SAXParser;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dom4jTest</span> &#123;<br>    <span class="hljs-comment">// 解析XML中的数据成为一个List集合对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseToLIst</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1 导入框架</span><br>        <span class="hljs-comment">// 2 创建SAXReader对象</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">// 3 加载XML文件成为文档对象</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Dom4jTest.class.getResourceAsStream(<span class="hljs-string">&quot;/Contacts.xml&quot;</span>);<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(is);<br>        <span class="hljs-comment">// 4 先获取根元素对象</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> document.getRootElement();<br>        <span class="hljs-comment">// 5 提取contact子元素// 获取当前元素下指定名字的子元素集合</span><br>        List&lt;Element&gt; contactEles = root.elements(<span class="hljs-string">&quot;contact&quot;</span>);<br>        <span class="hljs-comment">// 6 准备ArrayList集合封装联系人信息</span><br>        List&lt;Contact&gt; contacts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 7 遍历提取的子元素集合</span><br>        <span class="hljs-keyword">for</span> (Element contactEle : contactEles) &#123;<br>            <span class="hljs-comment">// 8 每个子元素都是一个联系人集合</span><br>            <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>();<br>            contact.setId(Integer.valueOf(contactEle.attributeValue(<span class="hljs-string">&quot;id&quot;</span>)));<br>            <span class="hljs-comment">//👆强转要求真实类型必须为要转的类型,所以这里是类型转换,将文本String转Integer(Integer自动转int)</span><br>            contact.setVip(Boolean.valueOf(contactEle.attributeValue(<span class="hljs-string">&quot;vip&quot;</span>)));<br>            contact.setName(contactEle.elementTextTrim(<span class="hljs-string">&quot;name&quot;</span>));<br>            contact.setGender(contactEle.elementTextTrim(<span class="hljs-string">&quot;gender&quot;</span>).charAt(<span class="hljs-number">0</span>));<span class="hljs-comment">//字符串类型.charAt(0),取第一个返回char类型</span><br>            contact.setEmail(contactEle.elementTextTrim(<span class="hljs-string">&quot;email&quot;</span>));<br>            <span class="hljs-comment">// 9 把对象添加进List集合</span><br>            contacts.add(contact);<br>        &#125;<br>        <span class="hljs-comment">// 10 遍历添加好的集合</span><br>        <span class="hljs-keyword">for</span> (Contact contact : contacts) &#123;<br>            System.out.println(contact);<br>            <span class="hljs-comment">/*Contact&#123;name=&#x27;潘金莲&#x27;, id=1, vip=true, gender=女, email=&#x27;panpan@itcast.cn&#x27;&#125;</span><br><span class="hljs-comment">            Contact&#123;name=&#x27;武松&#x27;, id=2, vip=false, gender=男, email=&#x27;wusong@itcast.cn&#x27;&#125;</span><br><span class="hljs-comment">            Contact&#123;name=&#x27;武大狼&#x27;, id=3, vip=false, gender=男, email=&#x27;wuda@itcast.cn&#x27;&#125;*/</span><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Contact{name&#x3D;’潘金莲’, id&#x3D;1, vip&#x3D;true, gender&#x3D;女, email&#x3D;‘<a href="mailto:&#x70;&#97;&#x6e;&#112;&#x61;&#x6e;&#64;&#x69;&#116;&#99;&#97;&#x73;&#116;&#x2e;&#x63;&#x6e;">&#x70;&#97;&#x6e;&#112;&#x61;&#x6e;&#64;&#x69;&#116;&#99;&#97;&#x73;&#116;&#x2e;&#x63;&#x6e;</a>‘}<br>Contact{name&#x3D;’武松’, id&#x3D;2, vip&#x3D;false, gender&#x3D;男, email&#x3D;‘<a href="mailto:&#x77;&#117;&#x73;&#x6f;&#x6e;&#x67;&#x40;&#x69;&#116;&#99;&#97;&#115;&#116;&#x2e;&#99;&#110;">&#x77;&#117;&#x73;&#x6f;&#x6e;&#x67;&#x40;&#x69;&#116;&#99;&#97;&#115;&#116;&#x2e;&#99;&#110;</a>‘}<br>Contact{name&#x3D;’武大狼’, id&#x3D;3, vip&#x3D;false, gender&#x3D;男, email&#x3D;‘<a href="mailto:&#x77;&#117;&#x64;&#x61;&#64;&#105;&#x74;&#x63;&#x61;&#115;&#116;&#46;&#x63;&#x6e;">&#x77;&#117;&#x64;&#x61;&#64;&#105;&#x74;&#x63;&#x61;&#115;&#116;&#46;&#x63;&#x6e;</a>‘}</p></blockquote><h3 id="XML检索技术-Xpath"><a href="#XML检索技术-Xpath" class="headerlink" title="XML检索技术 Xpath"></a>XML检索技术 Xpath</h3><h5 id="如果需要从XML文件中检索需要的某个信息-如name-怎么解决？"><a href="#如果需要从XML文件中检索需要的某个信息-如name-怎么解决？" class="headerlink" title="如果需要从XML文件中检索需要的某个信息(如name)怎么解决？"></a>如果需要从XML文件中检索需要的某个信息(如name)怎么解决？</h5><ul><li>Dom4j需要进行文件的全部解析，然后再寻找数据。</li><li>Xpath技术更加适合做信息检索。</li></ul><h4 id="Xpath介绍"><a href="#Xpath介绍" class="headerlink" title="Xpath介绍"></a>Xpath介绍</h4><ul><li>XPath在解析XML文档方面提供了一独树一帜的路径思想，更加优雅，高效</li><li>XPath使用路径表达式来定位XML文档中的元素节点或属性节点。</li></ul><blockquote><p>示例<br>&#x2F;元素&#x2F;子元素&#x2F;孙元素<br>&#x2F;&#x2F;子元素&#x2F;&#x2F;孙元素</p></blockquote><h4 id="使用Xpath检索出XML文件"><a href="#使用Xpath检索出XML文件" class="headerlink" title="使用Xpath检索出XML文件"></a>使用Xpath检索出XML文件</h4><h5 id="需求：使用Dom4-把一个XML文件的数据进行解析"><a href="#需求：使用Dom4-把一个XML文件的数据进行解析" class="headerlink" title="需求：使用Dom4)把一个XML文件的数据进行解析"></a>需求：使用Dom4)把一个XML文件的数据进行解析</h5><p>分析：</p><ol><li>导入jar包(dom4j和jaxen-1.1.2.jar),Xpath技术依赖Dom4j技术</li><li>通过dom4j的SAXReader获取Document对象</li><li>利用XPath提供的APl,结合XPath的语法完成选取XML文档元素节点进行解析操作。</li><li>Document中与Xpath相关的API如下：</li></ol><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726153754823.png" alt="image-20220726153754823"></p><h5 id="Xpath四大检索方案"><a href="#Xpath四大检索方案" class="headerlink" title="Xpath四大检索方案"></a>Xpath四大检索方案</h5><ul><li><p>绝对路径</p><ul><li>采用绝对路径获取从根节点开始逐层的查找&#x2F;contactList&#x2F;contact&#x2F;name节点列表并打印信息</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726154603823.png" alt="image-20220726154603823"></p></li><li><p>相对路径</p><ul><li>先得到根节点contactList</li><li>再采用相对路径获取下一级contact节点的name子节点并打印信息</li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726190030756.png" alt="image-20220726190030756"></p></li><li><p>全文检索</p><ul><li>直接全文搜索所有的name元素并打印</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726190434628.png" alt="image-20220726190434628" style="zoom:50%;" /></li><li><p>属性查找</p><ul><li>在全文中搜索属性，或者带属性的元素</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726190306017.png" alt="image-20220726190306017" style="zoom:50%;" /></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">contactList</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contact</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">vip</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>   潘金莲  <span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>panpan@itcast.cn<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">contact</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contact</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">vip</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>武松<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>wusong@itcast.cn<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">contact</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contact</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">vip</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>武大狼<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>wuda@itcast.cn<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">contact</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">contact</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">info</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;888&quot;</span>&gt;</span>我是西门庆<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">info</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">contact</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">contactList</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.xpath;<br><br><span class="hljs-keyword">import</span> org.dom4j.Attribute;<br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.Node;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">xpathDemo</span> &#123;<br>    <span class="hljs-comment">// 1 绝对路径:/根元素/子元素/子元素</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// a 创建解析器对象</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">// b 把XML加载为文档对象</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(xpathDemo.class.getResourceAsStream(<span class="hljs-string">&quot;/Contacts2.xml&quot;</span>));<br>        <span class="hljs-comment">// c 检索全部名称</span><br>        List&lt;Node&gt; nameNodes = document.selectNodes(<span class="hljs-string">&quot;/contactList/contact/name&quot;</span>);<span class="hljs-comment">//返回的为父类节点类型</span><br>        <span class="hljs-keyword">for</span> (Node nameNode : nameNodes) &#123;<br>            <span class="hljs-type">Element</span> <span class="hljs-variable">nameEle</span> <span class="hljs-operator">=</span> (Element) nameNode;<span class="hljs-comment">//将父类节点类转成子类元素类</span><br>            System.out.println(nameEle.getTextTrim());<br><span class="hljs-comment">//            潘金莲</span><br><span class="hljs-comment">//            武松</span><br><span class="hljs-comment">//            武大狼</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 2 相对路径:./子元素/子元素(.代表当前元素)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// a 创建解析器对象</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">// b 把XML加载为文档对象</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(xpathDemo.class.getResourceAsStream(<span class="hljs-string">&quot;/Contacts2.xml&quot;</span>));<br>        <span class="hljs-comment">// 拿到根元素</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> document.getRootElement();<br>        <span class="hljs-comment">// c 检索全部名称</span><br>        List&lt;Node&gt; nameNodes = root.selectNodes(<span class="hljs-string">&quot;./contact/name&quot;</span>);<span class="hljs-comment">//返回的为父类节点类型</span><br>        <span class="hljs-keyword">for</span> (Node nameNode : nameNodes) &#123;<br>            <span class="hljs-type">Element</span> <span class="hljs-variable">nameEle</span> <span class="hljs-operator">=</span> (Element) nameNode;<span class="hljs-comment">//将父类节点类转成子类元素类</span><br>            System.out.println(nameEle.getTextTrim());<br><span class="hljs-comment">//            潘金莲</span><br><span class="hljs-comment">//            武松</span><br><span class="hljs-comment">//            武大狼</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 2 全文检索:</span><br>    <span class="hljs-comment">// 元素 在全文查找这个元素</span><br>    <span class="hljs-comment">//元素1/元素2 在全文查找元素1下面的一级元素2(只往下找一层)</span><br>    <span class="hljs-comment">//元素1//元素2 在全文查找元素1下面的全部元素2(下面所有层只要是元素2)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// a 创建解析器对象</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">// b 把XML加载为文档对象</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(xpathDemo.class.getResourceAsStream(<span class="hljs-string">&quot;/Contacts2.xml&quot;</span>));<br>        <span class="hljs-comment">// c 检索数据</span><br>        List&lt;Node&gt; nameNodes = document.selectNodes(<span class="hljs-string">&quot;//contact//name&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Node nameNode : nameNodes) &#123;<br>            <span class="hljs-type">Element</span> <span class="hljs-variable">nameEle</span> <span class="hljs-operator">=</span> (Element) nameNode;<br>            System.out.println(nameEle.getTextTrim());<br>            <span class="hljs-comment">//潘金莲</span><br>            <span class="hljs-comment">//武松</span><br>            <span class="hljs-comment">//武大狼</span><br>            <span class="hljs-comment">//我是西门庆</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 4 属性查找</span><br>    <span class="hljs-comment">//@属性名称 在全文检索 属性对象</span><br>    <span class="hljs-comment">//元素[@属性名称] 在全文检索包含改属性的 元素对象</span><br>    <span class="hljs-comment">//元素[@属性名称=值] 在全文检索包含该属性且属性值为该值的 元素对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse04</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// a 创建解析器对象</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">// b 把XML加载为文档对象</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(xpathDemo.class.getResourceAsStream(<span class="hljs-string">&quot;/Contacts2.xml&quot;</span>));<br>        <span class="hljs-comment">// c 检索数据</span><br>        List&lt;Node&gt; nameNodes = document.selectNodes(<span class="hljs-string">&quot;//@id&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Node nameNode : nameNodes) &#123;<br>            <span class="hljs-type">Attribute</span> <span class="hljs-variable">attr</span> <span class="hljs-operator">=</span> (Attribute) nameNode;<span class="hljs-comment">//id获取的为属性类,转换为属性类</span><br>            System.out.println(attr.getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+attr.getValue());<br>            <span class="hljs-comment">//id--&gt;1</span><br>            <span class="hljs-comment">//id--&gt;2</span><br>            <span class="hljs-comment">//id--&gt;3</span><br>            <span class="hljs-comment">//id--&gt;888</span><br>        &#125;<br>        <span class="hljs-comment">//查询name元素(包含id属性)</span><br><span class="hljs-comment">//        List&lt;Node&gt; nameNodes1 = document.selectNodes(&quot;//name[@id=888]&quot;);</span><br>        List&lt;Node&gt; nameNodes1 = document.selectNodes(<span class="hljs-string">&quot;//name[@id]&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Node nameNode : nameNodes1) &#123;<br>            <span class="hljs-type">Element</span> <span class="hljs-variable">ele</span> <span class="hljs-operator">=</span> (Element) nameNode;<span class="hljs-comment">//这里查到的是元素类</span><br>            System.out.println(ele.getTextTrim());<br>            <span class="hljs-comment">//我是西门庆</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul><li>之前我们创建类对象时，都是使用new对象的形式创建，在很多业务场景下也提供了不直接new的方式。</li><li>工厂模式(Factory Pattern)是Java中最常用的设计模式之一，这种类型的设计模式属于创建型模式，它提供了一种获取对象的方式</li></ul><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><ul><li><p>工厂的方法可以封装对象的创建细节，比如：为该对象进行加工和数据注入。</p></li><li><p>可以实现类与类之间的解耦操作（核心思想）。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.factory_pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-comment">//抽象类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.factory_pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mac</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Computer</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName()+<span class="hljs-string">&quot;启动了&quot;</span>);        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.factory_pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Huawei</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Computer</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName()+<span class="hljs-string">&quot;开机了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.factory_pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FactoryPattern</span> &#123;<br>    <span class="hljs-comment">//定义一个方法,创建对象返回</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Computer <span class="hljs-title function_">cerateComputer</span><span class="hljs-params">(String info)</span>&#123;<br>        <span class="hljs-keyword">switch</span> (info)&#123;<br>            <span class="hljs-keyword">case</span><span class="hljs-string">&quot;huawei&quot;</span>:<br>                <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Huawei</span>();<br>                computer.setName(<span class="hljs-string">&quot;华为&quot;</span>);<br>                computer.setPrice(<span class="hljs-number">9999</span>);<br>                <span class="hljs-keyword">return</span> computer;<br>            <span class="hljs-keyword">case</span><span class="hljs-string">&quot;mac&quot;</span>:<br>                <span class="hljs-type">Computer</span> <span class="hljs-variable">computer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mac</span>();<br>                computer1.setName(<span class="hljs-string">&quot;苹果&quot;</span>);<br>                computer1.setPrice(<span class="hljs-number">1999</span>);<br>                <span class="hljs-keyword">return</span> computer1;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.factory_pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FaceoryDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        Computer c = new Mac();</span><br><span class="hljs-comment">//        c.setName(&quot;苹果&quot;);</span><br><span class="hljs-comment">//        c.setPrice(1000);</span><br><span class="hljs-comment">//        c.start();</span><br>        <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> FactoryPattern.cerateComputer(<span class="hljs-string">&quot;huawei&quot;</span>);<br>        computer.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>华为开机了</p></blockquote><h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><ul><li>创建一个新类，包装原始类，从而在新类中提升原来类的功能。</li></ul><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><ul><li>装饰模式指的是在不改变原类的基础上，动态地扩展一个类的功能。</li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220726203717760.png" alt="image-20220726203717760" style="zoom:50%;" /><ol><li>定义父类。</li><li>定义原始类，继承父类，定义功能。</li><li>定义装饰类，继承父类，包装原始类，增强功能！！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.decorator_pattern;<br><span class="hljs-comment">//共同父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStream</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] buffer)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.decorator_pattern;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">//原始类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InputStream</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;低性能读取了一个字节a&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">97</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] buffer)</span> &#123;<br>        buffer[<span class="hljs-number">0</span>] = <span class="hljs-number">97</span>;<br>        buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">98</span>;<br>        buffer[<span class="hljs-number">2</span>] = <span class="hljs-number">99</span>;<br>        System.out.println(<span class="hljs-string">&quot;低性能读取了一个字节数组&quot;</span>+ Arrays.toString(buffer));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.decorator_pattern;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-comment">//装饰类:继承InputStream 拓展原始类功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InputStream</span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BufferedInputStream</span><span class="hljs-params">(InputStream is)</span>&#123;<br>        <span class="hljs-built_in">this</span>.is = is;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;提供缓冲区,提高读写性能&quot;</span>);<br>        <span class="hljs-keyword">return</span> is.read();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] buffer)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;提供缓冲区,提高读写性能&quot;</span>);<br>        <span class="hljs-keyword">return</span> is.read(buffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.decorator_pattern;<br><span class="hljs-comment">//定义父类:InputStream</span><br><span class="hljs-comment">//定义原始类:FileInputStream</span><br><span class="hljs-comment">//定义装饰类:BufferedInputStream</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorPattern</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>());<br>        System.out.println(is.read());<br>        System.out.println(is.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">3</span>]));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习,学个屁</title>
    <link href="/2022/07/04/%E4%B8%83%E6%9C%88%E5%9B%9B/"/>
    <url>/2022/07/04/%E4%B8%83%E6%9C%88%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记_基础</title>
    <link href="/2022/07/04/Java%E7%AC%94%E8%AE%B0_%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/07/04/Java%E7%AC%94%E8%AE%B0_%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaSE基础"><a href="#JavaSE基础" class="headerlink" title="JavaSE基础"></a>JavaSE基础</h1><h2 id="1-数据"><a href="#1-数据" class="headerlink" title="1 数据"></a><font color='blue'>1 数据</font></h2><h3 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a><font color='green'>1.1 数据类型</font></h3><ul><li><h5 id="n-代表换行"><a href="#n-代表换行" class="headerlink" title="\n 代表换行"></a>\n 代表换行</h5></li><li><h5 id="t-代表一个tab"><a href="#t-代表一个tab" class="headerlink" title="\t 代表一个tab"></a>\t 代表一个tab</h5></li></ul><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624220152230.png" alt="image-20220624220152230" style="zoom: 67%;" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/e850352ac65c103880a07b53bc119313b17e8941" alt="img" style="zoom:80%;" /><hr><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a><font color='blue'>2 变量</font></h2><h3 id="2-1-变量类型"><a href="#2-1-变量类型" class="headerlink" title="2.1 变量类型"></a><font color='green'>2.1 变量类型</font></h3><h4 id="2-1-1-基本数据类型"><a href="#2-1-1-基本数据类型" class="headerlink" title="2.1.1 基本数据类型"></a>2.1.1 <font color='cornflowerblue'>基本数据类型</font></h4><h4 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h4><ul><li><h5 id="int"><a href="#int" class="headerlink" title="int"></a><font color='orange'>int</font></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//定义一个整数变量i=1</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="long"><a href="#long" class="headerlink" title="long"></a>long</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">123456</span>; <span class="hljs-comment">//定义一个长整数i=123456，默认int类型，若字符超出int变量限制，需要在尾部加上L/l</span><br></code></pre></td></tr></table></figure><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><ul><li><h5 id="double-双精度"><a href="#double-双精度" class="headerlink" title="double 双精度"></a><font color='orange'>double</font> 双精度</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.01</span>; <span class="hljs-comment">//定义一个浮点数变量a=1.01,随意写小数，默认为double类型</span><br><span class="hljs-comment">//例如</span><br>b = <span class="hljs-number">10.1</span>/<span class="hljs-number">2</span>;<span class="hljs-comment">//此时b为double类型</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="float-单精度"><a href="#float-单精度" class="headerlink" title="float 单精度"></a>float 单精度</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">float</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.5F</span>;<span class="hljs-comment">//定义一个浮点数变量a=9.5，随意写小数字变量需在其后面加F/f</span><br></code></pre></td></tr></table></figure><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><ul><li><h5 id="char"><a href="#char" class="headerlink" title="char "></a><font color='orange'>char </font></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;一&#x27;</span>; <span class="hljs-comment">//定义一个字符变量,任意 单个 字符，加 单引号</span><br><span class="hljs-type">char</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>; <span class="hljs-comment">//对应ASCII码相加，例如a对应97，加1，输出i为b</span><br><span class="hljs-type">char</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;中国&#x27;</span>;<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><ul><li><h5 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a><font color='orange'>boolean</font></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> ture;<span class="hljs-comment">//定义一个布尔变量，为true/false</span><br></code></pre></td></tr></table></figure><h3 id="2-1-2-引用数据类型"><a href="#2-1-2-引用数据类型" class="headerlink" title="2.1.2 引用数据类型"></a><font color='cornflowerblue'>2.1.2 引用数据类型</font></h3><ul><li><h5 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;一二三&quot;</span><span class="hljs-comment">//定义字符串变量a=一二三，加 双引号</span><br></code></pre></td></tr></table></figure><h2 id="2-2-变量标准"><a href="#2-2-变量标准" class="headerlink" title="2.2 变量标准"></a><font color='green'>2.2 变量标准</font></h2><ul><li><h5 id="变量的有效范围从定义-开始到“-”截止，且在同一个范围内部不能同时定义2个同名的变量。"><a href="#变量的有效范围从定义-开始到“-”截止，且在同一个范围内部不能同时定义2个同名的变量。" class="headerlink" title="变量的有效范围从定义 开始到“}”截止，且在同一个范围内部不能同时定义2个同名的变量。"></a>变量的有效范围从定义 开始到“<font color='red'>}</font>”截止，且在同一个范围内部不能同时定义2个同名的变量。</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//错误示例</span><br>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br>a++ ;<span class="hljs-comment">//此时a找不到</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="变量定义可以没有初始值，但是使用的时候必须给初始值。"><a href="#变量定义可以没有初始值，但是使用的时候必须给初始值。" class="headerlink" title="变量定义可以没有初始值，但是使用的时候必须给初始值。"></a>变量定义可以没有<font color='red'>初始值</font>，但是使用的时候必须给初始值。</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//错误示例</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-keyword">if</span> (a!=<span class="hljs-number">0</span>); <span class="hljs-comment">//a没有初始值</span><br></code></pre></td></tr></table></figure><h2 id="3-进制"><a href="#3-进制" class="headerlink" title="3 进制"></a><font color='blue'>3 进制</font></h2><ul><li><h5 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0B001</span>;<span class="hljs-comment">//定义二进制数（以0B(0b)开头）</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0777</span>;<span class="hljs-comment">//定义八进制数（以0开头）</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0XFA</span>;<span class="hljs-comment">//定义十六进制数（以0X(0x)开头）</span><br></code></pre></td></tr></table></figure><h2 id="4-类型转换"><a href="#4-类型转换" class="headerlink" title="4 类型转换"></a><font color='blue'>4 类型转换</font></h2><ul><li><h6 id="在表达式中，小范围类型的变量会自动转换成当前较大范围类型的再运算。"><a href="#在表达式中，小范围类型的变量会自动转换成当前较大范围类型的再运算。" class="headerlink" title="在表达式中，小范围类型的变量会自动转换成当前较大范围类型的再运算。"></a><font color='black'>在表达式中，小范围类型的变量会自动转换成当前较大范围类型的再运算。</font></h6></li><li><h6 id="byte-、shout-、char-—-gt-int-—-gt-long-—-gt-float-—-gt-double"><a href="#byte-、shout-、char-—-gt-int-—-gt-long-—-gt-float-—-gt-double" class="headerlink" title="byte 、shout 、char —&gt; int —&gt; long —&gt; float —&gt;double"></a><font color='red'>byte 、shout 、char</font> —&gt; int —&gt; long —&gt; float —&gt;double</h6></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><h5 id="表达式的最终结果类型由表达式中的最高类型决定。"><a href="#表达式的最终结果类型由表达式中的最高类型决定。" class="headerlink" title="表达式的最终结果类型由表达式中的最高类型决定。"></a>表达式的最终结果类型由表达式中的<font color='red'>最高类型决定。</font></h5></li><li><h5 id="在表达式中，byte、short、char-是直接转换成int类型参与运算。"><a href="#在表达式中，byte、short、char-是直接转换成int类型参与运算。" class="headerlink" title="在表达式中，byte、short、char 是直接转换成int类型参与运算。"></a><font color='red'>在表达式中，byte、short、char</font> 是直接转换成<font color='red'>int</font>类型参与运算。</h5></li><li><h5 id="类型范围大的数据或者变量，不能直接赋值给类型范围小的变量，会报错。"><a href="#类型范围大的数据或者变量，不能直接赋值给类型范围小的变量，会报错。" class="headerlink" title="类型范围大的数据或者变量，不能直接赋值给类型范围小的变量，会报错。"></a>类型范围<font color='red'>大</font>的数据或者变量，不能直接<font color='red'>赋值</font>给类型范围<font color='red'>小</font>的变量，会报错。</h5></li></ul><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//正确示例</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)a;<span class="hljs-comment">//不能直接赋值</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="可能造成数据（丢失）溢出"><a href="#可能造成数据（丢失）溢出" class="headerlink" title="可能造成数据（丢失）溢出"></a>可能造成数据（丢失）溢出</h5></li><li><h5 id="浮点型强转成整型，直接丢掉小数部分，保留整数部分返回"><a href="#浮点型强转成整型，直接丢掉小数部分，保留整数部分返回" class="headerlink" title="浮点型强转成整型，直接丢掉小数部分，保留整数部分返回"></a>浮点型强转成整型，<font color='red'>直接丢掉小数部分，保留整数部分返回</font></h5></li></ul><h2 id="5-运算"><a href="#5-运算" class="headerlink" title="5 运算"></a><font color='blue'>5 运算</font></h2><h4 id="常用运算"><a href="#常用运算" class="headerlink" title="常用运算"></a>常用运算</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-string">&quot;a&quot;</span>+<span class="hljs-number">5</span>;<span class="hljs-comment">//输出a5 </span><br><span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">5</span>;<span class="hljs-comment">//输出102//97+5</span><br><span class="hljs-string">&quot;aa&quot;</span>+<span class="hljs-number">5</span>;<span class="hljs-comment">//输出aa5</span><br></code></pre></td></tr></table></figure><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624220601251.png" alt="image-20220624220601251" style="zoom: 50%;" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624220712921.png" alt="image-20220624220712921" style="zoom: 50%;" /><h4 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//格式 (判断)?a:b;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">90</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> i == <span class="hljs-number">90</span> ? <span class="hljs-string">&quot;是&quot;</span> : <span class="hljs-string">&quot;否&quot;</span> <span class="hljs-comment">//判断是否符合条件，是，返回前面的值，否，返回后面的值</span><br>System.out.println(r);<span class="hljs-comment">//r = 否</span><br></code></pre></td></tr></table></figure><h2 id="6-算法"><a href="#6-算法" class="headerlink" title="6 算法"></a><font color='blue'>6 算法</font></h2><h3 id="6-1-结构"><a href="#6-1-结构" class="headerlink" title="6.1 结构"></a><font color='green'>6.1 结构</font></h3><h4 id="6-1-1分支结构"><a href="#6-1-1分支结构" class="headerlink" title="6.1.1分支结构"></a><font color='cornflowerblue'>6.1.1分支结构</font></h4><ul><li><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件)&#123;<br>    分支<span class="hljs-number">1</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    分支<span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (值)&#123;<br>        <span class="hljs-keyword">case</span>(对应值):<br>           执行……;<br>           <span class="hljs-keyword">break</span>;<span class="hljs-comment">//退出，没有则继续执行下一项</span><br>        <span class="hljs-keyword">case</span>(对应值):<br>           执行……;<br>           <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<span class="hljs-comment">//都没有则执行这一条</span><br>           执行……;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-1-2-循环结构"><a href="#6-1-2-循环结构" class="headerlink" title="6.1.2 循环结构"></a><font color='cornflowerblue'>6.1.2 循环结构</font></h3><ul><li><h5 id="for"><a href="#for" class="headerlink" title="for"></a>for</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i++)<br>&#123;<br>    <span class="hljs-type">int</span> a;<br>    a++;<br>&#125;<br><span class="hljs-comment">//for-each</span><br><span class="hljs-type">int</span> [] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c :a)&#123;<br>            System.out.println(c);<br>        &#125;<br><span class="hljs-comment">//之间遍历数组并输出元素</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="while"><a href="#while" class="headerlink" title="while"></a>while</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">white ( i &gt; <span class="hljs-number">0</span>)&#123;<br>    执行……<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a><font color='red'>控制语句</font></h4><ul><li><h5 id="break-跳出并结束当前所在循环的执行"><a href="#break-跳出并结束当前所在循环的执行" class="headerlink" title="break 跳出并结束当前所在循环的执行"></a>break <font color='red'>跳出并结束当前所在循环</font>的执行</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span> ; i &lt;=  <span class="hljs-number">10</span> ; i++)&#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<span class="hljs-comment">//i为5时结束循环并跳出</span><br>    &#125;<br>    x++;<br>&#125;<br><span class="hljs-comment">//x最终为4</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="continue-跳出当前循环的当次执行，进入下一次循环"><a href="#continue-跳出当前循环的当次执行，进入下一次循环" class="headerlink" title="continue 跳出当前循环的当次执行，进入下一次循环"></a>continue 跳出<font color='red'>当前循环的当次执行，进入下一次循环</font></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ; i &lt;= <span class="hljs-number">10</span> ; i++)&#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)&#123;<br>        <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//当i为5时跳出，直接执行下一次循环</span><br>    &#125;<br>    x++;<br>&#125;<br><span class="hljs-comment">//x最终为9</span><br></code></pre></td></tr></table></figure><h2 id="6-2-方法"><a href="#6-2-方法" class="headerlink" title="6.2 方法"></a><font color='green'>6.2 方法</font></h2><ul><li><h5 id="创建方法-public-static"><a href="#创建方法-public-static" class="headerlink" title="创建方法(public static )"></a>创建方法(public static )</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> sss(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//调用方法sss，按格式输入1，2</span><br>        System.out.println(k);<span class="hljs-comment">//输出结果为两数相加</span><br>    &#125;<span class="hljs-comment">//以下为创建的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sss</span> <span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<span class="hljs-comment">//创建一个为sss的方法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<span class="hljs-comment">//输入的两个数相加</span><br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="创建数组找出最大值方法"><a href="#创建数组找出最大值方法" class="headerlink" title="创建数组找出最大值方法"></a>创建数组找出最大值方法</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">int</span>[] aa = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">89</span>,<span class="hljs-number">74</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>&#125;;<br>       System.out.println(datamax(aa));<span class="hljs-comment">//将aa数组带入方法并输出最大值</span><br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">datamax</span><span class="hljs-params">(<span class="hljs-type">int</span>[] n)</span> &#123;<span class="hljs-comment">//定义一个数组方法</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//初始最大值</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n.length; i++) &#123;<span class="hljs-comment">//遍历数组找出最大值</span><br>           <span class="hljs-keyword">if</span> (n[i] &gt; max) &#123;<br>               max = n[i];<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> max;<span class="hljs-comment">//输出最大值</span><br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="重载方法"><a href="#重载方法" class="headerlink" title="重载方法"></a>重载方法</h5></li></ul><blockquote><p>同一个类中，出现多个方法名相同，但是形参列表是不同的，那么这些方法就是重载方法</p></blockquote><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a><font color='red'>注意事项</font></h4><ul><li>方法的编写顺序无所谓</li><li>方法与方法之间为平级，不能嵌套定义,方法内，无法在嵌套定义方法</li><li>方法的返回值类型为void（无返回值），方法内不使用return输出，若方法写明返回值类型，则方法内部必须使用return返回对应类型的数据</li><li>return语句下不能编写代码，return之后就会结束</li><li>方法不调用就不执行，调用时必须严格匹配方法的参数情况</li><li>有返回值的方法调用时可以选择定义变量接收结果，或者直接输出调用，甚至直接调用；无返回值的调用只能调用一下</li></ul><h2 id="6-3-示例"><a href="#6-3-示例" class="headerlink" title="6.3 示例"></a><font color='green'>6.3 示例</font></h2><ul><li><h5 id="数值拆分-倒序输出"><a href="#数值拆分-倒序输出" class="headerlink" title="数值拆分(倒序输出)"></a>数值拆分(倒序输出)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<span class="hljs-comment">//设置初始值data = 123</span><br><span class="hljs-keyword">while</span> (data&gt;<span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//判断当前值是否大于零，大于则进入循环</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> data % <span class="hljs-number">10</span>;<span class="hljs-comment">//对初始值求余，得出个位数 c = 3</span><br>data = data/<span class="hljs-number">10</span>;<span class="hljs-comment">//对初始值整除，去除个位 data = 12   </span><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="水仙花数-三位数，且每位数立方相加等于原数"><a href="#水仙花数-三位数，且每位数立方相加等于原数" class="headerlink" title="水仙花数(三位数，且每位数立方相加等于原数)"></a>水仙花数(三位数，且每位数立方相加等于原数)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; i &lt;= <span class="hljs-number">999</span>; i++) &#123;<span class="hljs-comment">//定义i设置三位数条件，每次加1</span><br>     <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> i;<span class="hljs-comment">//将i赋值c，不更改原数值</span><br>     sum = <span class="hljs-number">0</span>;<span class="hljs-comment">//求和归零</span><br>    <span class="hljs-keyword">while</span> (c&gt;<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断值是否大于0</span><br>         g = c % <span class="hljs-number">10</span>;<span class="hljs-comment">//对10求余，得出最后一位</span><br>         c = c /<span class="hljs-number">10</span>;<span class="hljs-comment">//对10整除，去除最后一位</span><br>         b = g*g*g;<span class="hljs-comment">//位数的立方</span><br>         sum += b;<span class="hljs-comment">//循环范围内，每次相加，得出立方和</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (sum == i) &#123;<span class="hljs-comment">//判断立方和是否为原数</span><br>         System.out.println(i);<span class="hljs-comment">//输出原数</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<span class="hljs-comment">//设置随机数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> s.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<span class="hljs-comment">//随机数范围0-99加一为1-100</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//重复循环</span><br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//设置输入</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> in.nextInt();<span class="hljs-comment">//定义变量将输入值赋予变量</span><br>            <span class="hljs-keyword">if</span> (a&lt;data)&#123;<span class="hljs-comment">//判断随机数与变量的大小</span><br>                System.out.println(<span class="hljs-string">&quot;小&quot;</span>);<br>            &#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a&gt;data)&#123;<br>                System.out.println(<span class="hljs-string">&quot;大&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜对了&quot;</span> + a);<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//正确后退出循环</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="数组随机数"><a href="#数组随机数" class="headerlink" title="数组随机数"></a>数组随机数</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;输入几位数组&quot;</span>);<br>       <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>       <span class="hljs-type">int</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> in.nextInt();<span class="hljs-comment">//输入要猜几位的数组</span><br>       <span class="hljs-type">int</span>[] a =<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[pp];<span class="hljs-comment">//定义一个&quot;输入&quot;位数组</span><br>       <span class="hljs-type">Random</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<span class="hljs-comment">//定义随机数</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pp; i++) &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> s.nextInt(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>);<span class="hljs-comment">//将1-20之间的随机数赋值给sj</span><br>           a[i] = sj;<span class="hljs-comment">//将随机数sj填入数组对应位数</span><br>       &#125;<span class="hljs-comment">//以上得出随机数数组</span><br>       out:<span class="hljs-comment">//给死循环加退出</span><br>       <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>           System.out.println(<span class="hljs-string">&quot;输入1-20之间的整数&quot;</span>);<br>           <span class="hljs-type">int</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> in.nextInt();<span class="hljs-comment">//输入猜的数</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<span class="hljs-comment">//</span><br>               <span class="hljs-keyword">if</span> (a[i] == sr)&#123;<span class="hljs-comment">//将输入的数与数组每一位相对比</span><br>                   System.out.println(<span class="hljs-string">&quot;猜对了，在第&quot;</span> + (<span class="hljs-type">int</span>)(i+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;位&quot;</span>);<span class="hljs-comment">//猜对，输出在数组第一次出现的位数</span><br>                   <span class="hljs-keyword">break</span> out;<span class="hljs-comment">//退出死循环</span><br>               &#125;<br>           &#125;<br>           System.out.println(<span class="hljs-string">&quot;未命中&quot;</span>);<span class="hljs-comment">//与数组每一位相对比都不是，则输出未命中</span><br>       &#125;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>           System.out.print(a[i]+<span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">//输出数组每一位，在同一行</span><br>       &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="数组随机排序"><a href="#数组随机排序" class="headerlink" title="数组随机排序"></a>数组随机排序</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> [] codes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<span class="hljs-comment">//定义一个数组</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//新建输入</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; codes.length; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;输出第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个工号&quot;</span>);<span class="hljs-comment">//输出工号提示</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> in.nextInt();<span class="hljs-comment">//输入的值赋予code</span><br>            codes[i] = code;<span class="hljs-comment">//将code依次加入数组</span><br>        &#125;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">suiji</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<span class="hljs-comment">//新建随机数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//新建临时中转值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; codes.length; j++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> suiji.nextInt(codes.length);<span class="hljs-comment">//设置随机最大值，从0开始 对应数组</span><br>            temp = codes[index];<span class="hljs-comment">//将数组随机位数的值放到中转</span><br>            codes[index] = codes[j];<span class="hljs-comment">//将依次读到的数值存到随机到的位置</span><br>            codes[j] = temp;<span class="hljs-comment">//将随机原位置的值放到依次读到的值的位置，完成两数值位置交换</span><br>        &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><font color='red'>冒泡排序</font></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;输入几位数组&quot;</span>);<br>       <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>       <span class="hljs-type">int</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> in.nextInt();<span class="hljs-comment">//输入要猜几位的数组</span><br>       <span class="hljs-type">int</span>[] codes =<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[pp];<span class="hljs-comment">//定义一个&quot;输入&quot;位数组</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; o &lt; codes.length; o++) &#123;<br>           System.out.println(<span class="hljs-string">&quot;输出第&quot;</span> + (o + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个&quot;</span>);<span class="hljs-comment">//输出工号提示</span><br>           <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> in.nextInt();<span class="hljs-comment">//输入的值赋予code</span><br>           codes[o] = code;<span class="hljs-comment">//将code依次加入数组</span><br>       &#125;<span class="hljs-comment">//以上为自定义数组位数并自定义数组值</span><br>       <span class="hljs-type">int</span> temp;<span class="hljs-comment">//定义中转值</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt; codes.length; k++) &#123;<span class="hljs-comment">//循环次数从1开始（便于后续减去）到数组长度，例如5个数只需比较四次，</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; codes.length - k; i++) &#123;<span class="hljs-comment">//减去k，因为每次排序完，就可以一轮少一次排序</span><br>               <span class="hljs-keyword">if</span> (codes[i] &gt; codes[(i + <span class="hljs-number">1</span>)]) &#123;<span class="hljs-comment">//比较前后量数值大小，前面的数值大则执行调换</span><br>                   temp = codes[i];<span class="hljs-comment">//前面的值存临时</span><br>                   codes[i] = codes[(i + <span class="hljs-number">1</span>)];<span class="hljs-comment">//后面的换到前面</span><br>                   codes[(i + <span class="hljs-number">1</span>)] = temp;<span class="hljs-comment">//临时大值换到后面</span><br>               &#125;<br>           &#125;<br>       &#125;<span class="hljs-comment">//以下为输出排序后的数组</span><br>       System.out.println();<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; q &lt; codes.length; q++) &#123;<br>           System.out.print(codes[q]+<span class="hljs-string">&quot; &quot;</span>);<br>       &#125;<span class="hljs-comment">//例如4位数组，第一轮只需比三次，第二轮只需比两次，第三轮只需比一次。且只需比三轮。（至多次数）</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="查询每个数在数组中的重复个数"><a href="#查询每个数在数组中的重复个数" class="headerlink" title="查询每个数在数组中的重复个数"></a>查询每个数在数组中的重复个数</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">int</span> x;<span class="hljs-comment">//定义变量x</span><br>    <span class="hljs-type">int</span> [] numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//定义十位数组</span><br>    x = in.nextInt();<span class="hljs-comment">//将输入赋值x，输入小于10的数</span><br>    <span class="hljs-keyword">while</span> (x!=-<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//输入-1终止</span><br>        <span class="hljs-keyword">if</span> (x&gt;=<span class="hljs-number">0</span> &amp;&amp; x&lt;=<span class="hljs-number">9</span>)&#123;<span class="hljs-comment">//对应数组位数</span><br>            numbers[x]++;<span class="hljs-comment">//输入的数对应数组位数，对应位数数值加一，例如2就为对应数组变成1</span><br>        &#125;<br>        x = in.nextInt();<span class="hljs-comment">//重复输入</span><br>    &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;<span class="hljs-comment">//遍历数组</span><br>            System.out.print(i + <span class="hljs-string">&quot;:&quot;</span> + numbers[i]+<span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">//输出数组对应位数和位数对应数字</span><br>        &#125;<span class="hljs-comment">//示例 2 0 4 2 2 输出 0:1 2:3 4:1</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="判断数值是否在数组中"><a href="#判断数值是否在数组中" class="headerlink" title="判断数值是否在数组中"></a>判断数值是否在数组中</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[]numbres = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> in.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numbres.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (x==numbres[i])&#123;<br>                b =i + <span class="hljs-number">1</span>;<br>                System.out.println(<span class="hljs-string">&quot;此数在数组内，且第一次出现的位数为&quot;</span> + b + <span class="hljs-string">&quot;位&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;不在此数组内&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="mooc-多项式加法"><a href="#mooc-多项式加法" class="headerlink" title="mooc 多项式加法"></a>mooc 多项式加法</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//定义输入</span><br>       <span class="hljs-type">int</span> [] e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">101</span>];<span class="hljs-comment">//题目说幂次最大100，这里我将数组的位数当做幂次，所以有101个（从0开始）//数组的位数代表幂次，对应的数值代表系数</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//用来后续判断是否加“+”</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<span class="hljs-comment">//因为我只定义一个数组，所以用来判断输入两次0后就停止输入开始输出</span><br>       <span class="hljs-keyword">while</span> (c!=<span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//判断是否退出循环</span><br>           <span class="hljs-type">int</span> <span class="hljs-variable">s</span>  <span class="hljs-operator">=</span> in.nextInt();<span class="hljs-comment">//输入的值赋予数组的位数</span><br>           <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> in.nextInt();<span class="hljs-comment">//输入位数对应的数值</span><br>           <span class="hljs-keyword">if</span> (s &gt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//位数不可能为负从零开始，所以大于等于0</span><br>               e[s] += f;<span class="hljs-comment">//这里如果输入两次同样的位数，所对应的值就会累加，省去一个数组</span><br>           &#125;<span class="hljs-keyword">if</span> (s == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断输入几次0了</span><br>               c--;<span class="hljs-comment">//初始值为2，两次之后就退出</span><br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> e.length - <span class="hljs-number">1</span>; k &gt;=<span class="hljs-number">0</span>; k--) &#123;<span class="hljs-comment">//因为幂次要降序，数组位数等于幂次，所以从最后一个开始倒序</span><br>           <span class="hljs-keyword">if</span> (e[k] != <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//判断数组对应位数是否有值，默认为0，为0则不输出</span><br>               <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//判断是否为第一位，初始值0，第一位不输出“+”</span><br>                   <span class="hljs-keyword">if</span> (e[k] &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//判断当前位数对应数值是否为正数</span><br>                       System.out.print(<span class="hljs-string">&quot;+&quot;</span>);<span class="hljs-comment">//都满足则输出“+”</span><br>                   &#125;<br>               &#125;<br>               <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//判断幂次是否为1，为1不用写1次方（数组位数代表幂次）</span><br>                   <span class="hljs-keyword">if</span>( e[k] == <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//判断系数是否为1，同上</span><br>                       System.out.print(<span class="hljs-string">&quot;x&quot;</span>);<span class="hljs-comment">//都为1，则为x（没有系数和次方）</span><br>                   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e[k]==( -<span class="hljs-number">1</span> ))&#123;<span class="hljs-comment">//若为-1，避免输出-1x，</span><br>                       System.out.print( <span class="hljs-string">&quot;-x&quot;</span>);<span class="hljs-comment">//-1输出-x</span><br>                   &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//只有系数</span><br>                       System.out.print( e[k] + <span class="hljs-string">&quot;x&quot;</span>);<span class="hljs-comment">//例如 -2x，3x</span><br>                   &#125;<br>               &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//根据题目，幂次为0，只用输出系数</span><br>                   System.out.print(e[k]);<span class="hljs-comment">//例如-20</span><br>               &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//幂次不为0或1</span><br>                   <span class="hljs-keyword">if</span>(e[k]==<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//若系数为1</span><br>                       System.out.print(<span class="hljs-string">&quot;x&quot;</span>+k);<span class="hljs-comment">//不用输出系数，例如x³</span><br>                   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( e[k] == (-<span class="hljs-number">1</span>) )&#123;<span class="hljs-comment">//系数为-1</span><br>                           System.out.print(<span class="hljs-string">&quot;-x&quot;</span> + k);<span class="hljs-comment">//同理,例如-x²</span><br>                   &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//都不是则正常输出</span><br>                       System.out.print(e[k] + <span class="hljs-string">&quot;x&quot;</span> + k);<span class="hljs-comment">//为正数，上面加过“+”，为负数则带入原数，例如3x²，-2x³</span><br>                   &#125;<br>               &#125;<br>               count = <span class="hljs-number">1</span>;<span class="hljs-comment">//赋值，代表后续的都不为第一位，要加“+”</span><br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//若值都为0</span><br>           System.out.println(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-comment">//输出0</span><br>       &#125;`<br></code></pre></td></tr></table></figure><ul><li><h5 id="取出前50个素数"><a href="#取出前50个素数" class="headerlink" title="取出前50个素数"></a>取出前50个素数</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">50</span>];<span class="hljs-comment">//定义一个50个数的数组</span><br>    data[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<span class="hljs-comment">//将第一个0位赋值2，第一个素数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//定义有1个素数</span><br>    out:<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;x &lt; data.length;i++)&#123;<span class="hljs-comment">//从三开始无限加，条件是找到50个素数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;a &lt; x; a++)&#123;<span class="hljs-comment">//当前数除已知的素数</span><br>                <span class="hljs-keyword">if</span> (i % data[a] ==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//为0则重新下一轮</span><br>                <span class="hljs-keyword">continue</span> out;<br>                &#125;<br>            &#125;<br>            data[x++]=i;<span class="hljs-comment">//将得出的素数赋值给数组，这里i++代表先赋值在将</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k:data) &#123;<span class="hljs-comment">//遍历数组取出素数</span><br>            System.out.print(k+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="7-Java包"><a href="#7-Java包" class="headerlink" title="7 Java包"></a><font color='blue'>7 Java包</font></h2><ul><li><h4 id="随机数-Random"><a href="#随机数-Random" class="headerlink" title="随机数 Random"></a>随机数 Random</h4></li></ul><p><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624221952121.png" alt="image-20220624221952121"></p><h2 id="8-数组"><a href="#8-数组" class="headerlink" title="8 数组"></a><font color='blue'>8 数组</font></h2><ul><li><h5 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//int[] i = new int[] &#123;1,2,3,4&#125;;</span><br><span class="hljs-type">int</span>[] i = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<span class="hljs-comment">//简化</span><br>String[] a = &#123;<span class="hljs-string">&quot;一&quot;</span>,<span class="hljs-string">&quot;二&quot;</span>,<span class="hljs-string">&quot;三&quot;</span>&#125;;<br><span class="hljs-type">int</span>[][] i = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]<span class="hljs-comment">//定义一个两行三列的数组</span><br>System.out.println(i[<span class="hljs-number">0</span>]);<span class="hljs-comment">//输出i数组第一个数据，数组数据从0开始</span><br></code></pre></td></tr></table></figure><blockquote><h5 id="length-数组长度"><a href="#length-数组长度" class="headerlink" title="length(数组长度)"></a>length(数组长度)</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] i = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>System.out.println(i.length);<span class="hljs-comment">//输出数组i的长度</span><br></code></pre></td></tr></table></figure><blockquote><h5 id="数组动态初始化"><a href="#数组动态初始化" class="headerlink" title="数组动态初始化"></a>数组动态初始化</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> [] i = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<span class="hljs-comment">//先定义一个数组，默认数组数据为0</span><br>i[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<span class="hljs-comment">//再对数组进行赋值</span><br><span class="hljs-comment">//String默认值为null，double默认0.0</span><br></code></pre></td></tr></table></figure><blockquote><h5 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<span class="hljs-comment">//定义数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; a.length;i++ )&#123;<span class="hljs-comment">//循环次数从0开始，到数组最大长度结束</span><br>    System.out.println(a[i]);<span class="hljs-comment">//输出当前值</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a><font color='cornflowerblue'>注意事项</font></h3><ul><li><h5 id="什么类型的数组只能存放什么类型的数据"><a href="#什么类型的数组只能存放什么类型的数据" class="headerlink" title="什么类型的数组只能存放什么类型的数据"></a>什么<font color='red'>类型</font>的数组只能存放什么类型的数据</h5></li><li><h5 id="数组一旦被定义出来之后，类型和长度就固定了"><a href="#数组一旦被定义出来之后，类型和长度就固定了" class="headerlink" title="数组一旦被定义出来之后，类型和长度就固定了"></a>数组一旦被定义出来之后，<font color='red'>类型和长度</font>就固定了</h5></li></ul><h2 id="9-面向对象"><a href="#9-面向对象" class="headerlink" title="9 面向对象"></a><font color='blue'>9 面向对象</font></h2><h3 id="9-1-新建类"><a href="#9-1-新建类" class="headerlink" title="9.1 新建类"></a><font color='green'>9.1 新建类</font></h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624222517528.png" alt="image-20220624222517528" style="zoom:80%;" /><h3 id="9-2-构造器"><a href="#9-2-构造器" class="headerlink" title="9.2 构造器"></a><font color='green'>9.2 构造器</font></h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624222626819.png" alt="image-20220624222626819" style="zoom: 67%;" /><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624222812216.png" alt="image-20220624222812216" style="zoom:60%;" /><h3 id="9-3-this"><a href="#9-3-this" class="headerlink" title="9.3 this"></a><font color='green'>9.3 this</font></h3><h5 id="this代表当前对象"><a href="#this代表当前对象" class="headerlink" title="this代表当前对象"></a><font color='red'>this代表当前对象</font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo3</span> &#123;<br>    String age;<br>    <span class="hljs-type">int</span> command;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">demo3</span><span class="hljs-params">(String age, <span class="hljs-type">int</span> command)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<span class="hljs-comment">//从参数构造器的形参取到的值赋值给对象要加this,不能写age = age,这样都默认为构造器的形参</span><br>        <span class="hljs-built_in">this</span>.command = command;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-4-javaBean"><a href="#9-4-javaBean" class="headerlink" title="9.4 javaBean"></a><font color='green'>9.4 javaBean</font></h3><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/image-20220624222936291.png" alt="image-20220624222936291" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kong.javabean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> height, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.height = height;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeight</span><span class="hljs-params">(<span class="hljs-type">double</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-5-案例"><a href="#9-5-案例" class="headerlink" title="9.5 案例"></a><font color='green'>9.5 案例</font></h3><h4 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a><font color='cornflowerblue'>购物车</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Goods[] shopCar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>[<span class="hljs-number">100</span>];<span class="hljs-comment">//[null]//int[] a = new int[100]//创建数组不参与循环</span><br>    out:<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;请您选择如下命令操作:&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;添加商品到购物车:add&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;查询商品购物车展示:query&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;修改商品数量:update&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;结算商品的金额:pay&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请您输入命令: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> in.next();<br>        <span class="hljs-keyword">switch</span> (command) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:<span class="hljs-comment">//添加商品到购物车</span><br>                addGoods(shopCar, in);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;query&quot;</span>:<span class="hljs-comment">//查询商品在购物车展示</span><br>                queryGoods(shopCar);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;update&quot;</span>:<span class="hljs-comment">//修改商品在购物车数量</span><br>                updateGoods(shopCar, in);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pay&quot;</span>:<span class="hljs-comment">//结算金额</span><br>                payGoods(shopCar);<br>                <span class="hljs-keyword">break</span> out;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;输入错误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payGoods</span><span class="hljs-params">(Goods[] shopCar)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">pay</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; shopCar.length; i++) &#123;<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> shopCar[i];<br>        <span class="hljs-keyword">if</span> (g != <span class="hljs-literal">null</span>) &#123;<br>            pay += (g.price*g.buyNumber);<br>            a++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a ==<span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;您未加购商品&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        queryGoods(shopCar);<br>        System.out.println(<span class="hljs-string">&quot;您一共需支付&quot;</span> + pay + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateGoods</span><span class="hljs-params">(Goods[] shopCar, Scanner ii)</span> &#123;<span class="hljs-comment">//将下面方法调用,修改商品数量</span><br>    System.out.println(<span class="hljs-string">&quot;输入要修改的商品编号&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">bh</span> <span class="hljs-operator">=</span> ii.nextInt();<br>    <span class="hljs-type">Goods</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> getGoodsId(shopCar, bh);<br>    <span class="hljs-keyword">if</span> (g != <span class="hljs-literal">null</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;输入 &quot;</span>+g.name+<span class="hljs-string">&quot; 要购买的数量&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sl</span> <span class="hljs-operator">=</span> ii.nextInt();<br>        g.buyNumber = sl;<br>        System.out.println(<span class="hljs-string">&quot;修改完成&quot;</span>);<br>        queryGoods(shopCar);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;输入错误&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Goods <span class="hljs-title function_">getGoodsId</span><span class="hljs-params">(Goods[] shopCar, <span class="hljs-type">int</span> id)</span> &#123;<span class="hljs-comment">//寻找是否有此id商品,找到返回商品数据,没找到返回为空,封装方法</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; shopCar.length; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> shopCar[i];<br>        <span class="hljs-keyword">if</span> (g != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (g.id == id) &#123;<br>                <span class="hljs-keyword">return</span> g;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryGoods</span><span class="hljs-params">(Goods[] shopCar)</span> &#123;<span class="hljs-comment">//商品展示</span><br>    System.out.println(<span class="hljs-string">&quot;===========查询购物车信息==========&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;编号\t\t名称\t\t\t价格\t\t\t购买数量&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; shopCar.length; i++) &#123;<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> shopCar[i];<span class="hljs-comment">//int g = a[i] 吧goods想象成int</span><br>        <span class="hljs-keyword">if</span> (g != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(g.id + <span class="hljs-string">&quot;\t\t&quot;</span> + g.name + <span class="hljs-string">&quot;\t\t\t&quot;</span> + g.price + <span class="hljs-string">&quot;\t\t\t&quot;</span> + g.buyNumber);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//为空遍历结束</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addGoods</span><span class="hljs-params">(Goods[] shopCar, Scanner ii)</span> &#123;<span class="hljs-comment">//商品录入</span><br>    <span class="hljs-comment">//录入要购买商品的信息</span><br>    System.out.println(<span class="hljs-string">&quot;请输入购买商品的编号(不重复)&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> ii.nextInt();<br>    System.out.println(<span class="hljs-string">&quot;请输入购买商品的名称&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> ii.next();<br>    System.out.println(<span class="hljs-string">&quot;请输入购买商品的数量&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">buyNumber</span> <span class="hljs-operator">=</span> ii.nextInt();<br>    System.out.println(<span class="hljs-string">&quot;请输入购买商品的价格&quot;</span>);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> ii.nextDouble();<br>    <span class="hljs-comment">//把购买商品的信息封装成一个对象</span><br>    <span class="hljs-type">Goods</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>();<br>    g.id = id;<br>    g.name = name;<br>    g.buyNumber = buyNumber;<br>    g.price = price;<br>    <span class="hljs-comment">//商品对象添加到购物车数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; shopCar.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (shopCar[i] == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//确定没有数据</span><br>            shopCar[i] = g;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;商品 &quot;</span> + name + <span class="hljs-string">&quot; 添加完成&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Goods</span> &#123;<br>    <span class="hljs-type">int</span> id;<span class="hljs-comment">//商品编号</span><br>    String name;<span class="hljs-comment">//商品名称</span><br>    <span class="hljs-type">double</span> price;<span class="hljs-comment">//价格</span><br>    <span class="hljs-type">int</span> buyNumber;<span class="hljs-comment">//数量</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-string"><a href="#10-string" class="headerlink" title="10 string"></a><font color='blue'>10 string</font></h2><ul><li>java.lang.String类代表字符串，String类定义的变量可以用于指向字符串对象，然后操作该字符串。</li><li>Java程序中的所有字符串文字（例如“abc”）都为此类的对象。</li><li>String其实常被称为不可变字符串类型，它的对象在创建后不能被更改。<ul><li>每次更改都是指向了新的对象</li></ul></li></ul><h3 id="10-1-常用api"><a href="#10-1-常用api" class="headerlink" title="10.1 常用api"></a><font color='green'>10.1 常用api</font></h3><ul><li><h5 id="equals-字符串比较"><a href="#equals-字符串比较" class="headerlink" title="equals(字符串比较)"></a>equals(字符串比较)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;123&quot;</span>);<br>System.out.println(a.equals(b));<span class="hljs-comment">//输出true</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="equalsIgnoreCase-忽略大小写比较字符串"><a href="#equalsIgnoreCase-忽略大小写比较字符串" class="headerlink" title="equalsIgnoreCase(忽略大小写比较字符串)"></a>equalsIgnoreCase(忽略大小写比较字符串)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a123&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;A123&quot;</span>);<br>System.out.println(a.equalsIgnoreCase(b));<span class="hljs-comment">//输出true</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="length-获取字符串长度"><a href="#length-获取字符串长度" class="headerlink" title="length(获取字符串长度)"></a>length(获取字符串长度)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>System.out.pprintln(z.length);<span class="hljs-comment">//输出5</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="charAT-获取索引位置处的字符"><a href="#charAT-获取索引位置处的字符" class="headerlink" title="charAT(获取索引位置处的字符)"></a>charAT(获取索引位置处的字符)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;22345&quot;</span>;<br>System.out.pprintln(z.charAT(<span class="hljs-number">0</span>));<span class="hljs-comment">//第一个字符,输出2</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a><font color='red'>遍历字符串</font></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++)&#123;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">ah</span> <span class="hljs-operator">=</span> a.charAT(i);<br>    System.out.println(ah);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="toCharArray-把字符串转成字符数组"><a href="#toCharArray-把字符串转成字符数组" class="headerlink" title="toCharArray(把字符串转成字符数组)"></a>toCharArray(把字符串转成字符数组)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">char</span>[] b = a.toCharArray();<span class="hljs-comment">//b = &#123;1,2,3&#125;</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="substring-截取字符串内容"><a href="#substring-截取字符串内容" class="headerlink" title="substring(截取字符串内容)"></a>substring(截取字符串内容)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>System.out.println(a.substring(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>));<span class="hljs-comment">//输出34(左边包含,右边不包含)</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="replace-替换字符串"><a href="#replace-替换字符串" class="headerlink" title="replace(替换字符串)"></a>replace(替换字符串)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345123&quot;</span>;<br>System.out.println(a.replace(<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>))<span class="hljs-comment">//将123替换成111,输出11145111//只输入一位默认取到末尾</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="contains-查询是否包含字符"><a href="#contains-查询是否包含字符" class="headerlink" title="contains(查询是否包含字符)"></a>contains(查询是否包含字符)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>System.out.println(a.contains(<span class="hljs-string">&quot;123&quot;</span>));<span class="hljs-comment">//包含123,返回true</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="startsWith-查询是否以输入字符开头"><a href="#startsWith-查询是否以输入字符开头" class="headerlink" title="startsWith(查询是否以输入字符开头)"></a>startsWith(查询是否以输入字符开头)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>System.out.println(a.startsWith(<span class="hljs-string">&quot;12&quot;</span>));<span class="hljs-comment">//是12开头,输出true</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="split-按照某个字符把字符串分割成字符串数组返回"><a href="#split-按照某个字符把字符串分割成字符串数组返回" class="headerlink" title="split(按照某个字符把字符串分割成字符串数组返回)"></a>split(按照某个字符把字符串分割成字符串数组返回)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a.31.313&quot;</span>;<br>String[] b = a.split(<span class="hljs-string">&quot;.&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>     System.out.println(b[i]);<span class="hljs-comment">//输出&#123;a,31,313&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-ArrayList-集合"><a href="#11-ArrayList-集合" class="headerlink" title="11 ArrayList 集合"></a><font color='blue'>11 ArrayList 集合</font></h2><h3 id="11-1-集合的特点"><a href="#11-1-集合的特点" class="headerlink" title="11.1 集合的特点"></a><font color='green'>11.1 集合的特点</font></h3><ul><li><h5 id="集合的大小不固定，启动后可以动态变化，类型也可以选择不固定"><a href="#集合的大小不固定，启动后可以动态变化，类型也可以选择不固定" class="headerlink" title="集合的大小不固定，启动后可以动态变化，类型也可以选择不固定."></a>集合的<font color='red'>大小不固定</font>，启动后可以动态变化，类型也可以选择不固定.</h5></li><li><h5 id="集合非常适合做元素个数不确定，且要进行增删操作的业务场景"><a href="#集合非常适合做元素个数不确定，且要进行增删操作的业务场景" class="headerlink" title="集合非常适合做元素个数不确定，且要进行增删操作的业务场景."></a>集合非常适合做元素个数不确定，且要进行增删操作的业务场景.</h5></li><li><h5 id="集合的提供了许多丰富、好用的功能，而数组的功能很单一"><a href="#集合的提供了许多丰富、好用的功能，而数组的功能很单一" class="headerlink" title="集合的提供了许多丰富、好用的功能，而数组的功能很单一."></a>集合的提供了许多丰富、好用的功能，而数组的功能很单一.</h5></li><li><h5 id="ArrayList是集合的一种-支持索引"><a href="#ArrayList是集合的一种-支持索引" class="headerlink" title="ArrayList是集合的一种,支持索引."></a>ArrayList是集合的一种,支持索引.</h5></li></ul><h3 id="11-2-ArrayList的使用"><a href="#11-2-ArrayList的使用" class="headerlink" title="11.2 ArrayList的使用"></a><font color='green'>11.2 ArrayList的使用</font></h3><h5 id="示例-集合中只能储存引用类型-不支持基本数据类型"><a href="#示例-集合中只能储存引用类型-不支持基本数据类型" class="headerlink" title="示例    (集合中只能储存引用类型,不支持基本数据类型)"></a><font color='red'>示例    (集合中只能储存引用类型,不支持基本数据类型)</font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ArrayList</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<span class="hljs-comment">//新建集合对象</span><br>a.add(<span class="hljs-string">&quot;元素1&quot;</span>);<span class="hljs-comment">//向集合添加元素</span><br>a.add(<span class="hljs-number">12</span>);<span class="hljs-comment">//可以使任意类型</span><br>a.add(<span class="hljs-number">1.2</span>);<br>a.add(<span class="hljs-string">&#x27;一&#x27;</span>);<br>System.out.println(a);<span class="hljs-comment">//可以直接输出,输出结果为[元素1, 12, 1.2, 一]</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="给指定索引添加元素"><a href="#给指定索引添加元素" class="headerlink" title="给指定索引添加元素"></a>给指定索引添加元素</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">示例;<br>a.add(<span class="hljs-number">2</span>, <span class="hljs-number">45</span>);<span class="hljs-comment">//给索引2添加元素,元素向后位移为[元素1, 45, 12, 1.2, 一]</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="固定集合元素类型"><a href="#固定集合元素类型" class="headerlink" title="固定集合元素类型"></a>固定集合元素类型</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; List = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;()<span class="hljs-comment">//定义字符串类型集合</span><br>ArrayList&lt;Integer&gt;List = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;()<span class="hljs-comment">//定义整数类型集合,注意不是int</span><br></code></pre></td></tr></table></figure><h3 id="11-3-常用api"><a href="#11-3-常用api" class="headerlink" title="11.3 常用api"></a><font color='green'>11.3 常用api</font></h3><ul><li><h5 id="get-获取某个索引位置处的元素值"><a href="#get-获取某个索引位置处的元素值" class="headerlink" title="get(获取某个索引位置处的元素值)"></a>get(获取某个索引位置处的元素值)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">示例;<br>System.out.println(a.get(<span class="hljs-number">1</span>))<span class="hljs-comment">//获取索引1的元素值,输出12</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="size-获取元素的个数"><a href="#size-获取元素的个数" class="headerlink" title="size(获取元素的个数)"></a>size(获取元素的个数)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">示例;<br>System.out.println(a.size());<span class="hljs-comment">//输出4,元素个数</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a><font color='red'>遍历集合</font></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">示例;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.size(); i++) &#123;<br>    System.out.println(a.get(i));<span class="hljs-comment">//依次输出集合元素</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h5 id="remove-根据索引位置-删除元素值并返回被删除的元素值-x2F-x2F-遍历删除加i–或者倒叙"><a href="#remove-根据索引位置-删除元素值并返回被删除的元素值-x2F-x2F-遍历删除加i–或者倒叙" class="headerlink" title="remove(根据索引位置,删除元素值并返回被删除的元素值)&#x2F;&#x2F;遍历删除加i–或者倒叙"></a>remove(根据索引位置,<font color='red'>删除</font>元素值并<font color='red'>返回被删除的元素值</font>)&#x2F;&#x2F;<font color='red'>遍历删除加i–或者倒叙</font></h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">示例;<br>System.out.println(a.remove(<span class="hljs-number">1</span>));<span class="hljs-comment">//删除索引1的元素值并返回,输出&quot;12&quot;</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="remove重载-直接删除元素值-成功返回true-失败返回false"><a href="#remove重载-直接删除元素值-成功返回true-失败返回false" class="headerlink" title="remove重载(直接删除元素值,成功返回true,失败返回false)"></a>remove重载(直接删除元素值,成功返回true,失败返回false)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">示例;<span class="hljs-comment">//删除整数类型  (a.remove((Integer)12))</span><br>System.out.println(a.remove(<span class="hljs-string">&quot;元素1&quot;</span>));<span class="hljs-comment">//删除集合中为元素1的元素值,返回true(有重复的只删除第一个)</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="set-修改索引位置的元素值-返回修改前的元素值"><a href="#set-修改索引位置的元素值-返回修改前的元素值" class="headerlink" title="set(修改索引位置的元素值,返回修改前的元素值)"></a>set(修改索引位置的元素值,返回<font color='red'>修改前</font>的元素值)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">示例;<br>System.out.println(a.set(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;123&quot;</span>));<span class="hljs-comment">//将索引1的元素值修改为123,返回&quot;元素1&quot;</span><br></code></pre></td></tr></table></figure><h3 id="11-4-案例"><a href="#11-4-案例" class="headerlink" title="11.4 案例"></a><font color='red'>11.4 案例</font></h3><ul><li><h5 id="电影类型集合输出"><a href="#电影类型集合输出" class="headerlink" title="电影类型集合输出"></a>电影类型集合输出</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Movie&gt; List = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//新建Movie类型集合</span><br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;长津湖&quot;</span>, <span class="hljs-number">9.7</span>, <span class="hljs-string">&quot;吴京&quot;</span>);<span class="hljs-comment">//新建Movie类型并赋值</span><br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;我和我的父辈&quot;</span>, <span class="hljs-number">9.6</span>, <span class="hljs-string">&quot;吴京&quot;</span>);<br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">m3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;扑水少年&quot;</span>, <span class="hljs-number">9.5</span>, <span class="hljs-string">&quot;王川&quot;</span>);<br>        List.add(m1);<span class="hljs-comment">//将Movie类型元素值赋予集合</span><br>        List.add(m2);<br>        List.add(m3);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; List.size(); i++) &#123;<span class="hljs-comment">//遍历集合</span><br>            <span class="hljs-type">Movie</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> List.get(i);<span class="hljs-comment">//新建Movie类型变量来接元素值</span><br>            System.out.println(<span class="hljs-string">&quot;电影名称:&quot;</span> + s.getName() + <span class="hljs-string">&quot;评分:&quot;</span> + s.getScore() + <span class="hljs-string">&quot;主演:&quot;</span> + s.getActor());<span class="hljs-comment">//输出信息</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*//建立电影信息类型对象</span><br><span class="hljs-comment">public class Movie &#123;</span><br><span class="hljs-comment">    private String name;</span><br><span class="hljs-comment">    private double score;</span><br><span class="hljs-comment">    private String actor;</span><br><span class="hljs-comment">    public Movie() &#123;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public Movie(String name, double score, String actor) &#123;</span><br><span class="hljs-comment">        this.name = name;</span><br><span class="hljs-comment">        this.score = score;</span><br><span class="hljs-comment">        this.actor = actor;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public String getName() &#123;return name;&#125;</span><br><span class="hljs-comment">    public void setName(String name) &#123;this.name = name;&#125;</span><br><span class="hljs-comment">    public double getScore() &#123;return score;&#125;</span><br><span class="hljs-comment">    public void setScore(double score) &#123;this.score = score;&#125;</span><br><span class="hljs-comment">    public String getActor() &#123;return actor;&#125;</span><br><span class="hljs-comment">    public void setActor(String actor) &#123;this.actor = actor;&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="输入学生信息根据学号查找输出"><a href="#输入学生信息根据学号查找输出" class="headerlink" title="输入学生信息根据学号查找输出"></a>输入学生信息根据学号查找输出</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        ArrayList&lt;Student&gt; studens = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        studens.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;2018001&quot;</span>, <span class="hljs-string">&quot;小是的明&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;计算机一班&quot;</span>));<br>        studens.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;2018002&quot;</span>, <span class="hljs-string">&quot;小是多&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;护理一班&quot;</span>));<br>        studens.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;2018003&quot;</span>, <span class="hljs-string">&quot;大是明&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&quot;电竞一班&quot;</span>));<br>        studens.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;2018004&quot;</span>, <span class="hljs-string">&quot;奥德明&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;计算机二班&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;==学号====姓名===年龄====班级==&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; studens.size(); i++) &#123;<span class="hljs-comment">//遍历集合输出信息</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> studens.get(i);<span class="hljs-comment">//新建学生信息类型变量来接集合元素</span><br>            System.out.println(k.getStudyNumber() + <span class="hljs-string">&quot;\t&quot;</span> + k.getName() + <span class="hljs-string">&quot;\t&quot;</span> + k.getAge() + <span class="hljs-string">&quot;\t&quot;</span> + k.getClassname());<span class="hljs-comment">//依次输出</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//调用方法根据学号查询信息并输出</span><br>            System.out.println(<span class="hljs-string">&quot;请输入学号&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">studyNamber</span> <span class="hljs-operator">=</span> in.next();<span class="hljs-comment">//输入学号</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> getStudentById(studens,studyNamber);<span class="hljs-comment">//调用方法,放入集合和学号</span><br>            <span class="hljs-keyword">if</span> (b!=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//如果不为空,就是找到了</span><br>                System.out.println(b.getStudyNumber() + <span class="hljs-string">&quot;\t&quot;</span> + b.getName() + <span class="hljs-string">&quot;\t&quot;</span> + b.getAge() + <span class="hljs-string">&quot;\t&quot;</span> + b.getClassname());<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//为空</span><br>                System.out.println(<span class="hljs-string">&quot;查无此人&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据学号查询学生对象返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> studens 存储全部学生对象的集合</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> StudentName 学号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 学生对象 | null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Student <span class="hljs-title function_">getStudentById</span><span class="hljs-params">(ArrayList&lt;Student&gt; studens,String StudentName)</span> &#123;<span class="hljs-comment">//定义方法</span><br>    <span class="hljs-comment">//遍历学生对象集合</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; studens.size(); i++) &#123;<span class="hljs-comment">//遍历集合</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> studens.get(i);<br>            <span class="hljs-keyword">if</span> (a.getStudyNumber().equals(StudentName))&#123;<span class="hljs-comment">//比对学号</span><br>                <span class="hljs-keyword">return</span> a;<span class="hljs-comment">//查找到输出</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//为空</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*建立学生信息类型对象</span><br><span class="hljs-comment">public class Student &#123;</span><br><span class="hljs-comment">    private String studyNumber;</span><br><span class="hljs-comment">    private String name;</span><br><span class="hljs-comment">    private int age;</span><br><span class="hljs-comment">    private String classname;</span><br><span class="hljs-comment">    public Student() &#123;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public Student(String studyNumber, String name, int age, String classname) &#123;</span><br><span class="hljs-comment">        this.studyNumber = studyNumber;</span><br><span class="hljs-comment">        this.name = name;</span><br><span class="hljs-comment">        this.age = age;</span><br><span class="hljs-comment">        this.classname = classname;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public String getStudyNumber() &#123;return studyNumber;&#125;</span><br><span class="hljs-comment">    public void setStudyNumber(String studyNumber) &#123;this.studyNumber = studyNumber;&#125;</span><br><span class="hljs-comment">    public String getName() &#123;return name;&#125;</span><br><span class="hljs-comment">    public void setName(String name) &#123;this.name = name;&#125;</span><br><span class="hljs-comment">    public int getAge() &#123;return age;&#125;</span><br><span class="hljs-comment">    public void setAge(int age) &#123;this.age = age;&#125;</span><br><span class="hljs-comment">    public String getClassname() &#123;return classname;&#125;</span><br><span class="hljs-comment">    public void setClassname(String classname) &#123;this.classname = classname;&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里物联网数据流转至RDS&amp;mySQL</title>
    <link href="/2022/07/01/%E9%98%BF%E9%87%8C%E7%89%A9%E8%81%94%E7%BD%91%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BD%AC/"/>
    <url>/2022/07/01/%E9%98%BF%E9%87%8C%E7%89%A9%E8%81%94%E7%BD%91%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://rdsnext.console.aliyun.com/?spm=a2c4g.11186623.0.0.31774738ftR0Eg">云数据库RDS平台</a> </li><li>创建实例 <a href="https://www.aliyun.com/database/dbfirstbuy?spm=5176.19720258.J_2937333540.1.22bd76f4nvdy3k&scm=20140722.B_8555276.P_9041.MO_402-ST_5737-ID_28892-CID_28892-V_1">购买链接</a><img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656399164878-a86286d5-5067-4a8f-b503-1321b286b383.png" alt="img"></li><li>进入管理<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656399619130-6ebc27eb-9ac3-4fd4-8f48-310be584e3b9.png" alt="img"></li><li>创建账号<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656399712073-d3c75570-bf16-4781-b3ff-e4feed733108.png" alt="img"></li><li>创建数据库,并登陆数据库<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656399781485-f684ca37-31f7-4740-8b8f-abc5db1e84c7.png" alt="img"></li><li>右击,创建表<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656399872121-8732fcfc-2bc1-4871-8da7-391496d34b18.png" alt="img"></li><li><a href="https://iot.console.aliyun.com/lk/vpc/instance/detail_s">创建物联网平台</a></li><li>创建产品,自定义品类<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656400021435-6ef625dd-c4e0-4363-ba9f-831be91892c2.png" alt="img"></li><li>查看产品-&gt;功能定义,(编辑草稿)添加模块&#x2F;标识符和数据类型与数据库中的字段要匹配<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656400365714-9bfd5790-d64f-4704-bb06-78db7a4c2c2a.png" alt="img"></li><li>添加设备<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656400060394-8c0f1311-3d82-4fc2-82b8-2ca5d8214b19.png" alt="img"></li><li>云产品流转-&gt;创建解析器<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656400113628-1043a8a6-4b24-4502-abc1-7efbfc29a203.png" alt="img"></li><li>创建数据源..</li><li>创建数据目的,为存储到云数据库(RDS)中<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656400169007-4d584ace-ea6e-4bf0-a9fd-ff3d875a81ec.png" alt="img"></li><li>解析器脚本</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//上报数据示例</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;deviceType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CustomCategory&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;iotId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JCp9***&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;requestId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1626948228247&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;checkFailedData&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;productKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a1o***&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gmtCreate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1626948134445</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deviceName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Device1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;items&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Temperature&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1626948134319</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Humidity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1626948134319</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//通过payload函数，获取设备上报的消息内容，并按照JSON格式转换。</span><br>var data = payload(<span class="hljs-string">&quot;json&quot;</span>); <br><span class="hljs-comment">//筛选出上报的温湿度值。</span><br>var h = getOrNull(data<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;items&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Humidity&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;value&quot;</span>);<br>var t = data.items.temperature.value;<br><span class="hljs-comment">// RDS表结构为id[自增主键]、deviceName、temperature、humidity、time，在writeRds方法中，可以按column:value的形式，将值写入对应的列。</span><br>if (t &gt; <span class="hljs-number">1</span>) <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//数值大于1,转发到数据库</span><br>    writeRds(<span class="hljs-number">1004</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;temperature&quot;</span><span class="hljs-punctuation">:</span>t<span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;Humidity&quot;</span><span class="hljs-punctuation">:</span>h<span class="hljs-punctuation">&#125;</span>);  <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="15"><li>监控运维-&gt;设备模拟器-&gt;属性上报<img src="https://kong-1252345869.cos.ap-nanjing.myqcloud.com/typora/1656400447326-77df82f6-2281-4c89-9159-354d18f43abb.png" alt="img"></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>物联网</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
